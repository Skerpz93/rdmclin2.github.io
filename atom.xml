<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mcl&#39;s space</title>
  <subtitle>Let’s Build Something Awesome!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.mclspace.com/"/>
  <updated>2016-05-17T04:11:38.000Z</updated>
  <id>http://www.mclspace.com/</id>
  
  <author>
    <name>LinChen</name>
    <email>rdmclin2@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>创建并发布Node.js模块</title>
    <link href="http://www.mclspace.com/2016/05/17/create-and-publish-a-nodejs-module/"/>
    <id>http://www.mclspace.com/2016/05/17/create-and-publish-a-nodejs-module/</id>
    <published>2016-05-17T04:07:32.000Z</published>
    <updated>2016-05-17T04:11:38.000Z</updated>
    
    <content type="html">&lt;p&gt;我们跟着npmjs的视频教程来,您可以直接看视频,下面为简略步骤方便查阅&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.npmjs.com/getting-started/creating-node-modules&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;创建Node.js模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.npmjs.com/getting-started/publishing-npm-packages&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;发布Npm包&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;创建Node-js模块&quot;&gt;创建Node.js模块&lt;/h1&gt;&lt;h3 id=&quot;创建package-json包&quot;&gt;创建package.json包&lt;/h3&gt;&lt;p&gt;package.json记录你的包的元信息&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ mkdir npm-demo-pkg-mcl &amp;#38;&amp;#38; cd $_&amp;#10;$ npm init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;author格式: &lt;code&gt;name &amp;lt;email&amp;gt; (website)&lt;/code&gt;    例如:&lt;code&gt;Calvin Meng &amp;lt;rdmclin2@gmail.com&amp;gt; (http://www.mclspace.com)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PS: 取一个你自己的包名,例如npm-demo-pkg-yourname&lt;/p&gt;
&lt;h3 id=&quot;添加Entry_Point&quot;&gt;添加Entry Point&lt;/h3&gt;&lt;p&gt;Entry Point是你程序的入口文件，类似于java里的main&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ vim index.js&amp;#10;&amp;#36755;&amp;#20837;:&amp;#10;exports.printMsg = function()&amp;#123;&amp;#10;    console.log(&amp;#34;This message is from npm package demo&amp;#34;);&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;发布NPM包&quot;&gt;发布NPM包&lt;/h1&gt;&lt;p&gt;任何一个有package.json文件的目录都可以发布成一个包,name和version为必须，其他为optional&lt;/p&gt;
&lt;h3 id=&quot;添加用户&quot;&gt;添加用户&lt;/h3&gt;&lt;p&gt;首先你得注册一个账号。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm adduser&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果你有账号了可以用login登录&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm login&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后可以在用&lt;code&gt;www.npmjs.org/~username&lt;/code&gt;访问你的信息，也可以通过&lt;code&gt;npm config ls&lt;/code&gt;查看当前用户设置&lt;/p&gt;
&lt;h3 id=&quot;发布包&quot;&gt;发布包&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm publish&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你使用的是cnpm会报错:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;no_perms Private mode enable, only admin can publish this module&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;设置回原来的就好,记得重新adduser&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm config set registry http://registry.npmjs.org&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果你有一些文件不想上传，可以用&lt;code&gt;.gitignore&lt;/code&gt; 或者 &lt;code&gt;.npmignore&lt;/code&gt;,发布完成后你可以到&lt;code&gt;https://npmjs.com/package/&amp;lt;package&amp;gt;&lt;/code&gt; 查看你的包&lt;/p&gt;
&lt;h1 id=&quot;更新NPM包&quot;&gt;更新NPM包&lt;/h1&gt;&lt;p&gt;直接&lt;code&gt;npm publish&lt;/code&gt;会出错,因为需要更新版本号。你可以手动更新，也可以使用version命令&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm version patch&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;会增加你版本号的最后一位,另外还有minor和major。注意如果你有github库地址，这个命令会给你的github库增加一个release tag。然后再&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm publish&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;我们跟着npmjs的视频教程来,您可以直接看视频,下面为简略步骤方便查阅&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.npmjs.com/getting-started/creating-node-modules&quot;&gt;创建Node.js模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.npmjs.com/getting-started/publishing-npm-packages&quot;&gt;发布Npm包&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="nodejs" scheme="http://www.mclspace.com/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://www.mclspace.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Github 个性卡片</title>
    <link href="http://www.mclspace.com/2016/04/19/github-user-card/"/>
    <id>http://www.mclspace.com/2016/04/19/github-user-card/</id>
    <published>2016-04-19T15:22:11.000Z</published>
    <updated>2016-04-19T15:53:23.000Z</updated>
    
    <content type="html">&lt;p&gt;今天看到一个好玩的项目&lt;a href=&quot;https://github.com/lepture/github-cards&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub Cards&lt;/a&gt;，它可以帮助你生成你的个性github名片，或者你的github项目名片。以后可以在介绍你的项目的时候用到它，既美观又大方。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;创建方法&quot;&gt;创建方法&lt;/h1&gt;&lt;p&gt;你可以直接进入&lt;a href=&quot;http://lab.lepture.com/github-cards&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;网站&lt;/a&gt;进行创建,也可以通过代码直接生成。&lt;/p&gt;
&lt;p&gt;首先引入&lt;code&gt;widget.js&lt;/code&gt;,然后创建相应类型的div,例如&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;div class=&amp;#34;github-card&amp;#34; data-github=&amp;#34;rdmclin2&amp;#34; data-width=&amp;#34;400&amp;#34; data-height=&amp;#34;317&amp;#34; data-theme=&amp;#34;medium&amp;#34;&amp;#62;&amp;#60;/div&amp;#62;&amp;#10;&amp;#60;script src=&amp;#34;//cdn.jsdelivr.net/github-cards/latest/widget.js&amp;#34;&amp;#62;&amp;#60;/script&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以配置宽和高，主题(default,medium)等，以下是我的github名片:&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;github-card&quot; data-github=&quot;rdmclin2&quot; data-width=&quot;400&quot; data-height=&quot;317&quot; data-theme=&quot;medium&quot;&gt;&lt;/div&gt;&lt;/p&gt;
&lt;script src=&quot;//cdn.jsdelivr.net/github-cards/latest/widget.js&quot;&gt;&lt;/script&gt;





&lt;p&gt;感觉不错，再贴几个项目的名片:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;div class=&amp;#34;github-card&amp;#34; data-github=&amp;#34;rdmclin2/TechStack&amp;#34; data-width=&amp;#34;400&amp;#34; data-height=&amp;#34;&amp;#34; data-theme=&amp;#34;medium&amp;#34;&amp;#62;&amp;#60;/div&amp;#62;&amp;#10;&amp;#60;script src=&amp;#34;//cdn.jsdelivr.net/github-cards/latest/widget.js&amp;#34;&amp;#62;&amp;#60;/script&amp;#62;&amp;#10;&amp;#10;&amp;#60;div class=&amp;#34;github-card&amp;#34; data-github=&amp;#34;jie-yuan/Vue-jieyuan&amp;#34; data-width=&amp;#34;400&amp;#34; data-height=&amp;#34;150&amp;#34; data-theme=&amp;#34;default&amp;#34;&amp;#62;&amp;#60;/div&amp;#62;&amp;#10;&amp;#60;script src=&amp;#34;//cdn.jsdelivr.net/github-cards/latest/widget.js&amp;#34;&amp;#62;&amp;#60;/script&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;github-card&quot; data-github=&quot;rdmclin2/TechStack&quot; data-width=&quot;400&quot; data-height=&quot;&quot; data-theme=&quot;medium&quot;&gt;&lt;/div&gt;&lt;/p&gt;
&lt;script src=&quot;//cdn.jsdelivr.net/github-cards/latest/widget.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;div class=&quot;github-card&quot; data-github=&quot;jie-yuan/Vue-jieyuan&quot; data-width=&quot;400&quot; data-height=&quot;150&quot; data-theme=&quot;default&quot;&gt;&lt;/div&gt;&lt;/p&gt;
&lt;script src=&quot;//cdn.jsdelivr.net/github-cards/latest/widget.js&quot;&gt;&lt;/script&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;今天看到一个好玩的项目&lt;a href=&quot;https://github.com/lepture/github-cards&quot;&gt;GitHub Cards&lt;/a&gt;，它可以帮助你生成你的个性github名片，或者你的github项目名片。以后可以在介绍你的项目的时候用到它，既美观又大方。&lt;/p&gt;
    
    </summary>
    
      <category term="github" scheme="http://www.mclspace.com/categories/github/"/>
    
    
      <category term="github" scheme="http://www.mclspace.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Quiver简易指南</title>
    <link href="http://www.mclspace.com/2016/04/07/Quiver-simple-tutorial/"/>
    <id>http://www.mclspace.com/2016/04/07/Quiver-simple-tutorial/</id>
    <published>2016-04-07T07:46:16.000Z</published>
    <updated>2016-04-07T11:19:30.000Z</updated>
    
    <content type="html">&lt;p&gt;一直都是使用sublime在编写博客，用hexo发布,每次想写点什么的时候就用&lt;code&gt;hexo new draft xxx&lt;/code&gt; 新建一个草稿。这种方式既没有组织，也不方便查阅，经常写了点草稿然后后面自己就忘记了，不方便知识管理。我理想中的笔记软件能使用Markdown，能用Vim模式，能进行笔记管理以及云存储。之前使用的笔记软件要么不够漂亮，要么不支持vim模式，要么不支持markdown，直到遇到Quiver，这才是为程序员准备的笔记软件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7pun7p.com1.z0.glb.clouddn.com/quiver.png&quot; alt=&quot;Quiver截图&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Quiver快速入门&quot;&gt;Quiver快速入门&lt;/h1&gt;&lt;p&gt;Quiver在github上提供了详细的使用指南,你可以阅读&lt;a href=&quot;https://github.com/HappenApps/Quiver/wiki/Quiver快速入门&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Quiver快速入门&lt;/a&gt;,如果你懒得看可以看我下文我总结的简洁版的使用指南。&lt;/p&gt;
&lt;h1 id=&quot;亮点&quot;&gt;亮点&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Quiver的笔记是由单元格组成，五种单元格类型,文本,代码,Markdown,LaTeX,图表单元格。&lt;/li&gt;
&lt;li&gt;代码单元格支持120种以上的程序语言，以及自定义主题等&lt;/li&gt;
&lt;li&gt;支持Markdown,Vim模式&lt;/li&gt;
&lt;li&gt;可以复制或拖图片到Quiver中，Quiver会复制一份在库中，即使源文件被删除仍然可以访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;自定义配置&quot;&gt;自定义配置&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;设置同步: 在偏好设置 -&amp;gt; 同步 下可以设置云同步&lt;/li&gt;
&lt;li&gt;设置默认单元格: 在偏好设置 -&amp;gt; 常规 -&amp;gt; 默认单元格 为Markdown&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;开启vim模式&lt;/strong&gt; : 偏好设置 -&amp;gt; 单元格 -&amp;gt; Key Binding,可以为代码,Markdown和latex单元格内使用vim 模式&lt;/li&gt;
&lt;li&gt;设置主题: 偏好设置主题,题主使用的是SpaceGray,你可以在&lt;a href=&quot;https://github.com/HappenApps/Quiver/wiki/Themes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;第三方主题&lt;/a&gt;中找到适合自己的或者&lt;a href=&quot;https://github.com/HappenApps/Quiver/wiki/How-to-Design-a-Custom-Theme&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;自己定制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;设置字体大小: 偏好设置 -&amp;gt; 风格 -&amp;gt; 编辑器 ,将&lt;code&gt;font-size&lt;/code&gt;都改成16px(或者你喜欢的的）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;常用快捷键&quot;&gt;常用快捷键&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;新建笔记   “shift + 返回”(⇧⏎)&lt;/li&gt;
&lt;li&gt;合并单元格 退格键 只需将光标放在第二个单元格的开头，然后按回退键。请注意不同类型的单元格不能合并&lt;/li&gt;
&lt;li&gt;文本单元格 ⌥⌘1&lt;/li&gt;
&lt;li&gt;代码单元格 ⌥⌘2&lt;/li&gt;
&lt;li&gt;Markdown单元格 ⌥⌘3&lt;/li&gt;
&lt;li&gt;LaTeX 单元格 ⌥⌘4&lt;/li&gt;
&lt;li&gt;图表单元格 ⌥⌘5&lt;/li&gt;
&lt;li&gt;演示者模式 ⌘⌃⌥p&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;双指左右滑动有惊喜&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;一直都是使用sublime在编写博客，用hexo发布,每次想写点什么的时候就用&lt;code&gt;hexo new draft xxx&lt;/code&gt; 新建一个草稿。这种方式既没有组织，也不方便查阅，经常写了点草稿然后后面自己就忘记了，不方便知识管理。我理想中的笔记软件能使用Markdown，能用Vim模式，能进行笔记管理以及云存储。之前使用的笔记软件要么不够漂亮，要么不支持vim模式，要么不支持markdown，直到遇到Quiver，这才是为程序员准备的笔记软件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7pun7p.com1.z0.glb.clouddn.com/quiver.png&quot; alt=&quot;Quiver截图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>我的前后端学习之旅[起航]</title>
    <link href="http://www.mclspace.com/2016/04/02/my-front-end-learn-story-set-sail/"/>
    <id>http://www.mclspace.com/2016/04/02/my-front-end-learn-story-set-sail/</id>
    <published>2016-04-02T15:28:44.000Z</published>
    <updated>2016-05-11T07:03:02.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;&lt;p&gt;这段时间一直在找实习，博客也一直没有更新，一停下来就是一个半月,再拾起也不那么容易。去年6月份我写了一篇文章&lt;a href=&quot;http://mclspace.com/2015/06/26/my-front-end-learn-story-start/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的前后端学习之旅 — 开端&lt;/a&gt;，那是我第一次接触到前端开发,所谓初生牛犊不怕虎，再加上JavaScript上手很容易,又有丰富的库支持,看了几本HTML,CSS,JS的书就开始上手项目了。虽然遇到不少问题，但通过社区的帮助以及谷歌总归可以解决，自以为已经掌握前端开发了，然而在最近为实习准备面试的时候才发现要补的很多，参加&lt;a href=&quot;ife.baidu.com&quot;&gt;百度前端技术学院&lt;/a&gt;也让我有机会从基础开始了解和实践前端开发,弥补自己基础的薄弱。&lt;/p&gt;
&lt;p&gt;在学习的过程中，总会有不同的阶段，我想拿到阿里前端实习offer算是对我之前学习前端的努力的肯定，因此想把这个offer作为在前端学习路上的一个里程碑，代表我正式将大前端作为以后技术路线的方向，转职初级前端魔法师学徒。这次阿里面试一共5面,3轮技术，1轮交叉面，1轮HR面,具体的问题就不讲了，每个人都会不一样，总结一下的话，有以下几点:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一是平时的积累，很重要，面试官会看你对某个技术研究到什么程度，平时由于好奇所以研究的一些东西在面试的时候也许会派上大用场。&lt;/li&gt;
&lt;li&gt;二是博客，github要早早的准备，博客代表了你学习过程中的总结和体会，优质的博客会为你加不少分，github上不需要你有多么牛掰的项目，不过要有长期维护的项目,完善的文档，大片的绿色代表你平时在github上积累较多。我在面试的过程中有两面的面试官都问到了github和博客的内容(虽然github上也没啥货…)。&lt;/li&gt;
&lt;li&gt;三是对新知识的敏感程度和热情。前端目前的发展可以说是日新月异，Node,Angular,React,Vue,每隔几个月就有新的概念催生，优秀的前端不会视这些令人兴奋的项目而不见。例如面试的时候问到Grunt,Gulp,Webpack,平时没有积累的话很难回答。&lt;/li&gt;
&lt;li&gt;四是需要有一个靠谱的由你主导的前端项目，例如我之前写的项目&lt;a href=&quot;https://github.com/rdmclin2/fcws-backend&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;凤城卫士&lt;/a&gt;，由于几乎是由我完全主导的项目，因此面试官和我聊这个项目的时候我可以扯得很好，面试官也吃不准你的水平，可以用这个项目带面试官的节奏。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;前一段时间的学习过程&quot;&gt;前一段时间的学习过程&lt;/h1&gt;&lt;p&gt;该阶段学习过程比较粗犷，主要项目导向，边学边查，接触到广度有了，深度不够，不过也培养了对前端的兴趣，对自己应该学习什么有一定的认识.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;阅读《Javascript DOM编程艺术》&lt;/li&gt;
&lt;li&gt;阅读《Head First Html &amp;amp; Css 》&lt;/li&gt;
&lt;li&gt;阅读 &lt;a href=&quot;http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;廖雪峰的javascript教程js篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;阅读 &lt;a href=&quot;http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434499993118b8173572625b4afe93a8b19dd707ea1d000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;廖雪峰的javascript教程jquery篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;阅读 &lt;a href=&quot;https://nqdeng.github.io/7-days-nodejs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《7天学会Nodejs》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;阅读 &lt;a href=&quot;https://github.com/alsotang/node-lessons&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Nodejs包教不包会》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;阅读《Nodejs 开发指南》学习node，了解express框架，并重写其中的Microblog&lt;/li&gt;
&lt;li&gt;学习 gulpjs,学会使用gulp编写简单的项目构建任务&lt;/li&gt;
&lt;li&gt;阅读 &lt;a href=&quot;http://codeguide.bootcss.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;html&amp;amp;css 编码规范&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;学习使用 Ionic + Express+ Mongoose + Boostrap + Jquery等技术编写了一套端到端且具备后台数据管理功能的产品&lt;a href=&quot;https://github.com/rdmclin2/fcws-backend&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;凤城卫士&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;阅读 《深入浅出Node.js》&lt;/li&gt;
&lt;li&gt;学习 &lt;a href=&quot;http://vuejs.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vue&lt;/a&gt;,并着手使用Vue编写&lt;a href=&quot;https://github.com/jie-yuan/Vue-jieyuan&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;结缘&lt;/a&gt;的前端界面中…&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;下一阶段的学习计划&quot;&gt;下一阶段的学习计划&lt;/h1&gt;&lt;p&gt;前一段时间主要是项目导向，没有注重基础的学习，因此这一阶段的重点是打牢基础，多多实践(IFE和结缘)，并紧密关注前端的发展。在去阿里实习前着重学习和掌握以下知识和技能:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打牢HTML &amp;amp; CSS基础,盒模型,CSS布局,浏览器兼容,编码规范,快速H5构建&lt;/li&gt;
&lt;li&gt;打牢JavaScript基础&lt;/li&gt;
&lt;li&gt;使用原生JavaScript编写页面功能&lt;/li&gt;
&lt;li&gt;ES6&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;记录学习过程&quot;&gt;记录学习过程&lt;/h1&gt;&lt;p&gt;将上一阶段未完成的挪到该阶段.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;完成 &lt;a href=&quot;ife.baidu.com&quot;&gt;百度前端技术学院&lt;/a&gt;第一阶段,&lt;a href=&quot;https://htmlpreview.github.io/?https://github.com/rdmclin2/ife_baidu/blob/master/task1_1_6/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;代表作&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;完成 &lt;a href=&quot;ife.baidu.com&quot;&gt;百度前端技术学院&lt;/a&gt;第二阶段,&lt;a href=&quot;https://htmlpreview.github.io/?https://github.com/rdmclin2/ife_baidu/blob/master/task1_2_22/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;代表作&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;完成 &lt;a href=&quot;ife.baidu.com&quot;&gt;百度前端技术学院&lt;/a&gt;第三阶段,&lt;a href=&quot;http://mclspace.com/ife_baidu/task47/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;代表作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;进行 &lt;a href=&quot;ife.baidu.com&quot;&gt;百度前端技术学院&lt;/a&gt;第四阶段&lt;/li&gt;
&lt;li&gt;阅读 《JavaScript高级程序设计》中…&lt;/li&gt;
&lt;li&gt;阅读 《CSS设计指南》中…&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;待学习的库&quot;&gt;待学习的库&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mbostock/d3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;d3.js&lt;/a&gt;, &lt;a href=&quot;http://www.ourd3js.com/wordpress/?p=396&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ecomfe/echarts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Echarts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;待阅读列表&quot;&gt;待阅读列表&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://learn.shayhowe.com/html-css/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Learn to Code HTML &amp;amp; CSS&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;$ 非常不错的教程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;&lt;p&gt;这段时间一直在找实习，博客也一直没有更新，一停下来就是一个半月,再拾起也不那么容易。去年6月份我写了一篇文章&lt;a href=&quot;http://mclspace.com/2015/06/26/my-front-end-learn-story
    
    </summary>
    
      <category term="fe" scheme="http://www.mclspace.com/categories/fe/"/>
    
    
      <category term="fe" scheme="http://www.mclspace.com/tags/fe/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js入门教程</title>
    <link href="http://www.mclspace.com/2016/02/16/jieyuan-development-2/"/>
    <id>http://www.mclspace.com/2016/02/16/jieyuan-development-2/</id>
    <published>2016-02-15T17:35:21.000Z</published>
    <updated>2016-02-15T17:35:42.000Z</updated>
    
    <content type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;关于结缘的前端使用哪种框架，笔者之前有过Angular.js的开发经验，在React.js和Vue.js之间徘徊了一阵子最终选择了Vue，在我看来Vue和Angular有许多的共同点，在看Vue的文档的时候有很熟悉的味道，但和React类似只关注View这一块。Vue没有像React那样什么都放到js中，简洁方便的api设计以及组件式开发是我选择它的主要原因。&lt;br&gt;&lt;/blockquote&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;实现前端大抵有两种思路，一个是由后端拼接页面后返回完整的网页，然后由浏览器渲染。另一种是由后端返回json之类的数据，然后由前端拼接数据进行展示，当然也可以两者混搭。实现前后端分离是很多web开发人员的梦想，有兴趣的可以看看&lt;a href=&quot;http://www.cnblogs.com/zergcom/p/4439383.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web系统开发构架再思考-前后端的完全分离&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;结缘前端打算使用Vue.js做成SPA(Single Page Application)的形式，即一个入口页面，后续数据由后端Nodejs实现Restful风格的API调用，然后在前端呈现。使用Webpack作为前端工程解决方案解决资源管理，按需加载，实时更新等问题。本篇我们探索使用Vue.js实现结缘的登录界面。&lt;/p&gt;
&lt;h1 id=&quot;安装部署Vue开发环境&quot;&gt;安装部署Vue开发环境&lt;/h1&gt;&lt;p&gt;为了方便大型应用的开发，尤大大开发了&lt;a href=&quot;https://github.com/vuejs/vue-cli&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vue-cli&lt;/a&gt;脚手架，提供了一系列的工具和库，方便我们快速的进行开发，具体功能包括单文件 Vue 组件，热加载，保存时检查代码，单元测试等，本质上和Express的&lt;code&gt;express-generator&lt;/code&gt;是一样的。&lt;/p&gt;
&lt;p&gt;因为&lt;code&gt;vue-cli&lt;/code&gt;依赖webpack,所以首先安装webpack这个工具:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install -g webpack&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;关于webpack如果没了解过可以看&lt;a href=&quot;https://segmentfault.com/a/1190000003499526&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;基于webpack搭建前端工程解决方案探索&lt;/a&gt;,然后安装&lt;code&gt;vue-cli&lt;/code&gt;:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install -g vue-cli&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用方法如下:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ vue init webpack my-project&amp;#10;$ cd my-project&amp;#10;$ npm install&amp;#10;$ npm run dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;执行完成后在浏览器中&lt;code&gt;localhost:8080&lt;/code&gt;查看。&lt;/p&gt;
&lt;p&gt;尤大大目前提供了4套官方模板,如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;browserify - A full-featured Browserify + vueify setup with hot-reload, linting &amp;amp; unit testing.&lt;/li&gt;
&lt;li&gt;browserify-simple - A simple Browserify + vueify setup for quick prototyping.&lt;/li&gt;
&lt;li&gt;webpack - A full-featured Webpack + vue-loader setup with hot reload, linting, testing &amp;amp; css extraction.&lt;/li&gt;
&lt;li&gt;webpack-simple - A simple Webpack + vue-loader setup for quick prototyping.&lt;br&gt;可以根据需求选择即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在使用过程中遇到两个问题,如果你也遇到了，可以在issues中查看。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vuejs/vue-cli/issues/34&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;npm install -g vue-cli error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vuejs/vue-cli/issues/36&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The default port 8080 cannot work&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;学习ES6&quot;&gt;学习ES6&lt;/h1&gt;&lt;p&gt;由于vue-cli生成的文件中使用的是ES6的语法，而ES6是未来的趋势，所以ES6必须一学,目前浏览器和Nodejs对ES6的支持程度不断提高，不过要在所有的浏览器中使用es6代码目前还不可行，不过&lt;a href=&quot;https://babeljs.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;babel&lt;/a&gt;可以帮你提前体验新的语法而不需要等待浏览器支持。babel本质上是一个js的预编译器，可以把es6程序编译成es5，从而在支持ES5的环境中运行。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;特地查了一下ES6和ES2016,ES2015的区别，实际上ES6===ES2015 &amp;lt; ES2016,由于ECMA委员会决定将标准每年一更，因此新推出的ES6被改名为ES2015,后面的标准将实行年制命名，如ES2016,ES2017…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;学习ES6/ES2015可以参考如下资源&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://babeljs.io/docs/learn-es2015/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Learn ES2015 A detailed overview of ECMAScript 6 features.&lt;/a&gt; 对ES6语法的概览&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://es6.ruanyifeng.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ECMAScript 6入门&lt;/a&gt; 阮一峰老师的ES6入门&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;学习vue目前没有足够的教程可以帮我们快速了解如何构建我们的应用,所以只能一点点摸索，借鉴前人的经验,所幸尤大大有个使用Vue开发的&lt;a href=&quot;https://github.com/vuejs/vue-hackernews&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hacker News Clone&lt;/a&gt;,我们可以从这里吸收开发经验。另外Cnode社区也有个用Vue开发的客户端&lt;a href=&quot;https://github.com/shinygang/Vue-cnodejs/tree/master/src/views&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vue-cnodejs&lt;/a&gt;也很不错。&lt;/p&gt;
&lt;p&gt;这里首先简要介绍一些Hacker News 客户端中使用到的ES6特性:&lt;/p&gt;
&lt;h3 id=&quot;箭头函数_=&amp;gt;_和this&quot;&gt;箭头函数 =&amp;gt; 和this&lt;/h3&gt;&lt;p&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;是匿名函数的一种简写，即lamda表达式,格式为&lt;code&gt;( 形参列表 ) =&amp;gt; { 函数体 }&lt;/code&gt;,使用箭头函数，内部函数继承了外围作用域的this值，再也不用写&lt;code&gt;var that=this&lt;/code&gt;这种hack代码了。直接上代码看:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// Expression bodies&amp;#10;var odds = evens.map(v =&amp;#62; v + 1);&amp;#10;var nums = evens.map((v, i) =&amp;#62; v + i);&amp;#10;&amp;#10;// Statement bodies&amp;#10;nums.forEach(v =&amp;#62; &amp;#123;&amp;#10;  if (v % 5 === 0)&amp;#10;    fives.push(v);&amp;#10;&amp;#125;);&amp;#10;&amp;#10;// Lexical this&amp;#10;var bob = &amp;#123;&amp;#10;  _name: &amp;#34;Bob&amp;#34;,&amp;#10;  _friends: [],&amp;#10;  printFriends() &amp;#123;&amp;#10;    this._friends.forEach(f =&amp;#62;&amp;#10;      console.log(this._name + &amp;#34; knows &amp;#34; + f));&amp;#10;  &amp;#125;&amp;#10;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;模块定义&quot;&gt;模块定义&lt;/h3&gt;&lt;p&gt;在ES6之前js没有一个统一的模块定义方式，流行的定义方式有AMD,CommonJS等,而ES6从语言层面对定义模块的方式进行了统一。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// lib/math.js&amp;#10;export function sum(x, y) &amp;#123;&amp;#10;  return x + y;&amp;#10;&amp;#125;&amp;#10;export var pi = 3.141593;&amp;#10;&amp;#10;// app.js&amp;#10;import * as math from &amp;#34;lib/math&amp;#34;;&amp;#10;alert(&amp;#34;2&amp;#960; = &amp;#34; + math.sum(math.pi, math.pi));&amp;#10;&amp;#10;// otherApp.js&amp;#10;import &amp;#123;sum, pi&amp;#125; from &amp;#34;lib/math&amp;#34;;&amp;#10;alert(&amp;#34;2&amp;#960; = &amp;#34; + sum(pi, pi));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;export default&lt;/code&gt;(默认加载)和 &lt;code&gt;export *&lt;/code&gt;(整体加载）为:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// lib/mathplusplus.js&amp;#10;export * from &amp;#34;lib/math&amp;#34;;&amp;#10;export var e = 2.71828182846;&amp;#10;export default function(x) &amp;#123;&amp;#10;    return Math.exp(x);&amp;#10;&amp;#125;&amp;#10;&amp;#10;// app.js&amp;#10;import exp, &amp;#123;pi, e&amp;#125; from &amp;#34;lib/mathplusplus&amp;#34;;&amp;#10;alert(&amp;#34;2&amp;#960; = &amp;#34; + exp(pi, e));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;默认加载的好处是我们不需要知道模块所要加载的变量名或函数名,输出时指定任意名字，且不需要大括号。更详细的可以查看&lt;a href=&quot;http://es6.ruanyifeng.com/#docs/module&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阮一峰老师的module一节&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;const_和_let&quot;&gt;const 和 let&lt;/h3&gt;&lt;p&gt;&lt;code&gt;const&lt;/code&gt;即常量，一旦定义了即不可变。let是更好的var,由于js的设计缺陷，var变量的作用域是函数体的全部，还有变量提升等怪异特性，导致诡异的错误，极难定位bug。而let拥有块级作用域,声明的全局变量不是全局对象的属性,形如for (let x…)的循环在每次迭代时都为x创建新的绑定.能用let尽量不用var，具体请看&lt;a href=&quot;http://programmers.stackexchange.com/questions/274342/is-there-any-reason-to-use-the-var-keyword-in-es6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Is there any reason to use the “var” keyword in ES6?&lt;/a&gt;以及&lt;a href=&quot;http://www.infoq.com/cn/articles/es6-in-depth-let-and-const?utm_campaign=rightbar_v2&amp;amp;utm_source=infoq&amp;amp;utm_medium=articles_link&amp;amp;utm_content=link_text&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入浅出ES6（十四）：let和const&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function f() &amp;#123;&amp;#10;  &amp;#123;&amp;#10;    let x;&amp;#10;    &amp;#123;&amp;#10;      // okay, block scoped name&amp;#10;      const x = &amp;#34;sneaky&amp;#34;;&amp;#10;      // error, const&amp;#10;      x = &amp;#34;foo&amp;#34;;&amp;#10;    &amp;#125;&amp;#10;    // okay, declared with `let`&amp;#10;    x = &amp;#34;bar&amp;#34;;&amp;#10;    // error, already declared in block&amp;#10;    let x = &amp;#34;inner&amp;#34;;&amp;#10;  &amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;promise&quot;&gt;promise&lt;/h3&gt;&lt;p&gt;语言标准实现的异步编程解决方案:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function timeout(duration = 0) &amp;#123;&amp;#10;    return new Promise((resolve, reject) =&amp;#62; &amp;#123;&amp;#10;        setTimeout(resolve, duration);&amp;#10;    &amp;#125;)&amp;#10;&amp;#125;&amp;#10;&amp;#10;var p = timeout(1000).then(() =&amp;#62; &amp;#123;&amp;#10;    return timeout(2000);&amp;#10;&amp;#125;).then(() =&amp;#62; &amp;#123;&amp;#10;    throw new Error(&amp;#34;hmm&amp;#34;);&amp;#10;&amp;#125;).catch(err =&amp;#62; &amp;#123;&amp;#10;    return Promise.all([timeout(100), timeout(200)]);&amp;#10;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;关于Vue-cli的webpack模板的代码风格&quot;&gt;关于Vue-cli的webpack模板的代码风格&lt;/h1&gt;&lt;p&gt;Vue-cli本身是一套技术选型，本身有作者自己的设计偏好在里面，例如模板默认是ES6的语法，使用ESLint进行代码规范等。在我开始使用这个工具的过程中有两个纠结的地方，一个是缩进，一个分号。&lt;/p&gt;
&lt;h3 id=&quot;关于缩进&quot;&gt;关于缩进&lt;/h3&gt;&lt;p&gt;模板中默认代码使用的2个空格进行缩进，这没问题，问题是在ESLint的配置文件&lt;code&gt;.eslintrc.js&lt;/code&gt;中写死了indent的规则，于是各种缩进必须按照规范来，不然就会出现多处如下的错误&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;error  indent  Expected indentation of 4 space characters but found 6&amp;#10; /Users/Calvin/Develop/githubs/jieyuan/Vue-jieyuan/src/App.vue:35:7&amp;#10;       Hello,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;用java习惯了，格式糟糕的话format一下就好了啊,然后各种查资料是用2个空格还是4个空格,可以看看知乎的这个回答&lt;a href=&quot;https://www.zhihu.com/question/33702159&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;为什么JS的规范说要用两个空格来缩进?&lt;/a&gt;，恩，看来写js代码用2个空格更流行一些。如果你用sublime，那么可以打开你一个js文件然后Preference -&amp;gt; Settings More -&amp;gt; Syntax Specfic-User,然后写入以下选项 :&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#10;  &amp;#34;tab_size&amp;#34;: 2,&amp;#10;  &amp;#34;translate_tabs_to_spaces&amp;#34;: true&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同理对.vue也做一遍。不过萝卜青菜各有所爱，只要同意规范就好,如果还是希望使用4空格,可以编辑&lt;code&gt;.eslintrc.js&lt;/code&gt;的indet项。&lt;/p&gt;
&lt;h3 id=&quot;关于写不写分号&quot;&gt;关于写不写分号&lt;/h3&gt;&lt;p&gt;习惯了写分号，至今为止一直认为写分号会让代码清晰，不容易出错。不过在js这样不强制写分号的语言中需要另外考虑一番,可以看看知乎的这个问题:&lt;a href=&quot;https://www.zhihu.com/question/20298345&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript 语句后应该加分号么？&lt;/a&gt;,于是又被尤大的答案折服了，ok，咱也不写分号了。更多的还是建议看尤大给的链接&lt;a href=&quot;http://slides.com/evanyou/semicolons#/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;semicolons&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;单文件组件以及Vue-loader解惑&quot;&gt;单文件组件以及Vue-loader解惑&lt;/h1&gt;&lt;p&gt;看Vue-cli中的&lt;code&gt;src/componets&lt;/code&gt;文件夹有个&lt;code&gt;Hello.vue&lt;/code&gt;的文件,这个是默认生成的单文件组件。如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;template&amp;#62;&amp;#10;  &amp;#60;div class=&amp;#34;hello&amp;#34;&amp;#62;&amp;#10;    &amp;#60;h1&amp;#62;&amp;#123;&amp;#123; msg &amp;#125;&amp;#125;&amp;#60;/h1&amp;#62;&amp;#10;  &amp;#60;/div&amp;#62;&amp;#10;&amp;#60;/template&amp;#62;&amp;#10;&amp;#60;script&amp;#62;&amp;#10;export default &amp;#123;&amp;#10;  data () &amp;#123;&amp;#10;    return &amp;#123;&amp;#10;      // note: changing this line won&amp;#39;t causes changes&amp;#10;      // with hot-reload because the reloaded component&amp;#10;      // preserves its current state and we are modifying&amp;#10;      // its initial state.&amp;#10;      msg: &amp;#39;Hello World!&amp;#39;&amp;#10;    &amp;#125;&amp;#10;  &amp;#125;&amp;#10;&amp;#125;&amp;#10;&amp;#60;/script&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;咦？不对啊,这玩意是组件？Vue文档中不是说组件要用如下形式声明吗:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var MyComponent = Vue.extend(&amp;#123;&amp;#10;  // options...&amp;#10;&amp;#125;)&amp;#10;&amp;#10;// Globally register the component with tag: my-component&amp;#10;Vue.component(&amp;#39;my-component&amp;#39;, MyComponent)&amp;#10;&amp;#60;div id=&amp;#34;example&amp;#34;&amp;#62;&amp;#10;  &amp;#60;my-component&amp;#62;&amp;#60;/my-component&amp;#62;&amp;#10;&amp;#60;/div&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;好吧，在&lt;a href=&quot;http://vuejs.org/guide/application.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Building Large-Scale Apps&lt;/a&gt;中文档介绍了这种单文件的组件,它的特点是单文件组合HTML 模板，CSS和JS，并且可以使用自己想用的预处理器，并且css代码对于每个组件是隔离的,只能说&lt;code&gt;Vue,就决定是你了!&lt;/code&gt;,例如:&lt;img src=&quot;http://vuejs.org/images/vue-component-with-pre-processors.png&quot; alt=&quot;直接官网盗图&quot;&gt;，尤大创造了一个新的文件格式&lt;code&gt;.vue&lt;/code&gt;，那这种文件咋解析啊,有没有文件解析器?于是有了&lt;code&gt;vue-loader&lt;/code&gt;，它的官方介绍如下:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;vue-loader is a loader for Webpack that can transform Vue components written in the following format into a plain JavaScript module&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;恩,Vue-loader会自动帮你把这种单文件组件转成组件使用，我们就不用操心啦。当然尤大也不强制你把代码都放在一个文件里，可以拆开放:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;template src=&amp;#34;./template.html&amp;#34;&amp;#62;&amp;#60;/template&amp;#62;&amp;#10;&amp;#60;style src=&amp;#34;./style.css&amp;#34;&amp;#62;&amp;#60;/style&amp;#62;&amp;#10;&amp;#60;script src=&amp;#34;./script.js&amp;#34;&amp;#62;&amp;#60;/script&amp;#62;&amp;#10;&amp;#25110;&amp;#32773;&amp;#20174;npm&amp;#27169;&amp;#22359;&amp;#21152;&amp;#36733;:&amp;#10;&amp;#60;!-- import a file from the installed &amp;#34;todomvc-app-css&amp;#34; npm package --&amp;#62;&amp;#10;&amp;#60;style src=&amp;#34;todomvc-app-css/index.css&amp;#34;&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;更多内容可以看Vue-loader的&lt;a href=&quot;http://vuejs.github.io/vue-loader&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;,跟着做一遍可以加深印象，更了解webpack和vue的思想。&lt;/p&gt;
&lt;h1 id=&quot;开发Vue组件&quot;&gt;开发Vue组件&lt;/h1&gt;&lt;p&gt;好吧，说了那么多，我们来开发一个基本的Login组件吧。目前网页设计水平还跟不上，直接使用Bootstrap的css库,在index.html的&lt;code&gt;head&lt;/code&gt;标签中加入&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css&amp;#34;&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;compoents&lt;/code&gt;标签中添加&lt;code&gt;Login.vue&lt;/code&gt;文件,输入如下内容:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;template&amp;#62;&amp;#10;&amp;#60;!-- Stack the columns on mobile by making one full-width and the other half-width --&amp;#62;&amp;#10;    &amp;#60;div class=&amp;#34;container&amp;#34;&amp;#62;&amp;#10;      &amp;#60;form class=&amp;#34;form-signin&amp;#34;&amp;#62;&amp;#10;        &amp;#60;h2 class=&amp;#34;form-signin-heading&amp;#34;&amp;#62;&amp;#123;&amp;#123;title&amp;#125;&amp;#125;&amp;#60;/h2&amp;#62;&amp;#10;        &amp;#60;label for=&amp;#34;inputEmail&amp;#34; class=&amp;#34;sr-only&amp;#34;&amp;#62;&amp;#37038;&amp;#20214;&amp;#22320;&amp;#22336;&amp;#60;/label&amp;#62;&amp;#10;        &amp;#60;input type=&amp;#34;email&amp;#34; id=&amp;#34;inputEmail&amp;#34; class=&amp;#34;form-control&amp;#34; placeholder=&amp;#34;&amp;#37038;&amp;#20214;&amp;#22320;&amp;#22336;&amp;#34; required autofocus&amp;#62;&amp;#10;        &amp;#60;label for=&amp;#34;inputPassword&amp;#34; class=&amp;#34;sr-only&amp;#34;&amp;#62;&amp;#23494;&amp;#30721;&amp;#60;/label&amp;#62;&amp;#10;        &amp;#60;input type=&amp;#34;password&amp;#34; id=&amp;#34;inputPassword&amp;#34; class=&amp;#34;form-control&amp;#34; placeholder=&amp;#34;&amp;#23494;&amp;#30721;&amp;#34; required&amp;#62;&amp;#10;        &amp;#60;div class=&amp;#34;checkbox&amp;#34;&amp;#62;&amp;#10;          &amp;#60;label&amp;#62;&amp;#10;            &amp;#60;input type=&amp;#34;checkbox&amp;#34; value=&amp;#34;remember-me&amp;#34;&amp;#62; &amp;#35760;&amp;#20303;&amp;#25105;&amp;#10;          &amp;#60;/label&amp;#62;&amp;#10;        &amp;#60;/div&amp;#62;&amp;#10;        &amp;#60;button class=&amp;#34;btn btn-lg btn-primary btn-block&amp;#34; type=&amp;#34;submit&amp;#34;&amp;#62;&amp;#30331;&amp;#24405;&amp;#60;/button&amp;#62;&amp;#10;      &amp;#60;/form&amp;#62;&amp;#10;    &amp;#60;/div&amp;#62;&amp;#10;&amp;#10;&amp;#60;/template&amp;#62;&amp;#10;&amp;#10;&amp;#60;script&amp;#62;&amp;#10;export default &amp;#123;&amp;#10;  data () &amp;#123;&amp;#10;    return &amp;#123;&amp;#10;      // note: changing this line won&amp;#39;t causes changes&amp;#10;      // with hot-reload because the reloaded component&amp;#10;      // preserves its current state and we are modifying&amp;#10;      // its initial state.&amp;#10;      title: &amp;#39;&amp;#30331;&amp;#24405;&amp;#32467;&amp;#32536;&amp;#39;&amp;#10;    &amp;#125;&amp;#10;  &amp;#125;&amp;#10;&amp;#125;&amp;#10;&amp;#60;/script&amp;#62;&amp;#10;&amp;#10;&amp;#60;style &amp;#62;&amp;#10;  body &amp;#123;&amp;#10;  padding-top: 40px;&amp;#10;  padding-bottom: 40px;&amp;#10;  background-color: #eee;&amp;#10;&amp;#125;&amp;#10;&amp;#10;.form-signin &amp;#123;&amp;#10;  max-width: 330px;&amp;#10;  padding: 15px;&amp;#10;  margin: 0 auto;&amp;#10;&amp;#125;&amp;#10;.form-signin .form-signin-heading,&amp;#10;.form-signin .checkbox &amp;#123;&amp;#10;  margin-bottom: 10px;&amp;#10;&amp;#125;&amp;#10;.form-signin .checkbox &amp;#123;&amp;#10;  font-weight: normal;&amp;#10;&amp;#125;&amp;#10;.form-signin .form-control &amp;#123;&amp;#10;  position: relative;&amp;#10;  height: auto;&amp;#10;  -webkit-box-sizing: border-box;&amp;#10;     -moz-box-sizing: border-box;&amp;#10;          box-sizing: border-box;&amp;#10;  padding: 10px;&amp;#10;  font-size: 16px;&amp;#10;&amp;#125;&amp;#10;.form-signin .form-control:focus &amp;#123;&amp;#10;  z-index: 2;&amp;#10;&amp;#125;&amp;#10;.form-signin input[type=&amp;#34;email&amp;#34;] &amp;#123;&amp;#10;  margin-bottom: -1px;&amp;#10;  border-bottom-right-radius: 0;&amp;#10;  border-bottom-left-radius: 0;&amp;#10;&amp;#125;&amp;#10;.form-signin input[type=&amp;#34;password&amp;#34;] &amp;#123;&amp;#10;  margin-bottom: 10px;&amp;#10;  border-top-left-radius: 0;&amp;#10;  border-top-right-radius: 0;&amp;#10;&amp;#125;&amp;#10;&amp;#60;/style&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;将&lt;code&gt;App.vue&lt;/code&gt;中的Hello组件换成Login组件即可，最终效果如下:&lt;br&gt;&lt;img src=&quot;http://7pun7p.com1.z0.glb.clouddn.com/jieyuanjieyuan_login_example.png&quot; alt=&quot;&quot;&gt; &lt;/p&gt;
&lt;h1 id=&quot;代码&quot;&gt;代码&lt;/h1&gt;&lt;p&gt;代码放在结缘的前端工程中,&lt;strong&gt;&lt;a href=&quot;https://github.com/jie-yuan/Vue-jieyuan&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vue-jieyuan&lt;/a&gt;&lt;/strong&gt;,欢迎star,issue&lt;/p&gt;
&lt;!-- 


# 资源汇总
- [vue-loader文档](http://vuejs.github.io/vue-loader)


# 引入vue-strap
[vue-strap](https://github.com/yuche/vue-strap)是一个用vue编写，使用Bootstrap.css的组件库,它不依赖Bootstrap.js或者jquery，只需要引入vue和boostrap.css即可。

首先安装:
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install vue-strap&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后在需要用到组件的地方使用,如es6导入&lt;br&gt;```&lt;br&gt;import alert from ‘vue-strap/src/alert’&lt;br&gt;// or&lt;br&gt;import { alert } from ‘vue-strap’&lt;/p&gt;
&lt;p&gt;new Vue({&lt;br&gt;  components: {&lt;br&gt;    alert&lt;br&gt;  }&lt;br&gt;})&lt;br&gt;``` —&amp;gt;&lt;/p&gt;
--&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;关于结缘的前端使用哪种框架，笔者之前有过Angular.js的开发经验，在React.js和Vue.js之间徘徊了一阵子最终选择了Vue，在我看来Vue和Angular有许多的共同点，在看Vue的文档的时候有很熟悉的味道，但和React类似只关注View这一块。Vue没有像React那样什么都放到js中，简洁方便的api设计以及组件式开发是我选择它的主要原因。&lt;br&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="vue" scheme="http://www.mclspace.com/categories/vue/"/>
    
    
      <category term="jieyuan" scheme="http://www.mclspace.com/tags/jieyuan/"/>
    
      <category term="nodejs" scheme="http://www.mclspace.com/tags/nodejs/"/>
    
      <category term="vue" scheme="http://www.mclspace.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Node.js中使用Mongoose创建数据库模型</title>
    <link href="http://www.mclspace.com/2016/02/13/nodejs-tutorials-4/"/>
    <id>http://www.mclspace.com/2016/02/13/nodejs-tutorials-4/</id>
    <published>2016-02-12T16:33:35.000Z</published>
    <updated>2016-02-12T16:41:27.000Z</updated>
    
    <content type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;MongoDB object modeling designed to work in an asynchronous environment. &lt;a href=&quot;http://mongoosejs.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://mongoosejs.com&lt;/a&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;在&lt;a href=&quot;http://mclspace.com/2016/02/12/jieyuan-functions-initial/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;结缘的功能设想-初步&lt;/a&gt;中我们为&lt;a href=&quot;https://github.com/rdmclin2/jieyuan&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;结缘&lt;/a&gt;的用户字段进行了定义，在本篇中我们使用Mongoose为用户模型进行数据库建模。Mongoose是基于nodejs的mongodb ORM,类似java的Hibernate。&lt;/p&gt;
&lt;p&gt;PS: 本文假设您已经安装了mongodb环境.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可以查看&lt;a href=&quot;https://github.com/rdmclin2/jieyuan&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;结缘&lt;/a&gt;的代码加深理解&lt;/strong&gt;.&lt;/p&gt;
&lt;h1 id=&quot;连接数据库&quot;&gt;连接数据库&lt;/h1&gt;&lt;p&gt;首先安装&lt;code&gt;mongoose&lt;/code&gt;模块&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install mongoose&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;config&lt;/code&gt;文件夹下新建mongoose.js文件,写入:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var config = require(&amp;#39;./config&amp;#39;),&amp;#10;    mongoose = require(&amp;#39;mongoose&amp;#39;);&amp;#10;&amp;#10;module.exports = function()&amp;#123;&amp;#10;    var db = mongoose.connect(config.db,function(err) &amp;#123;&amp;#10;        if(err) &amp;#123;&amp;#10;            console.log(&amp;#39;connection error&amp;#39;, err);&amp;#10;        &amp;#125; else &amp;#123;&amp;#10;            console.log(&amp;#39;connection successful : &amp;#39; + config.db);&amp;#10;        &amp;#125;&amp;#10;    &amp;#125;);&amp;#10;    return db;&amp;#10;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;bin/www&lt;/code&gt;文件首部添加如下代码:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;process.env.NODE_ENV = process.env.NODE_ENV || &amp;#39;development&amp;#39;; //&amp;#35774;&amp;#32622;&amp;#40664;&amp;#35748;&amp;#29615;&amp;#22659;&amp;#20026;development&amp;#10;&amp;#10;var Mongoose = require(&amp;#39;../config/mongoose&amp;#39;);&amp;#10;var db =  Mongoose();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;安装&lt;code&gt;nodemon&lt;/code&gt;模块,该工具可以帮助我们在改变代码时自动重启应用，免去手动重启的麻烦.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install -g nodemon&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后我们验证代码有无错误,首先开启数据库&lt;code&gt;sudo mongod&lt;/code&gt;,然后使用&lt;code&gt;nodemon&lt;/code&gt;启动&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ nodemon&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;输出&lt;code&gt;connection successful&lt;/code&gt;字样即为配置正确。&lt;/p&gt;
&lt;h1 id=&quot;创建用户模型&quot;&gt;创建用户模型&lt;/h1&gt;&lt;p&gt;在&lt;code&gt;models&lt;/code&gt;文件夹下创建&lt;code&gt;model_user.js&lt;/code&gt;文件,根据我们在&lt;a href=&quot;http://mclspace.com/2016/02/12/jieyuan-functions-initial/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;结缘的功能设想-初步&lt;/a&gt;中对用户的建模,写入如下代码:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var mongoose = require(&amp;#39;mongoose&amp;#39;);&amp;#10;var Schema = mongoose.Schema;&amp;#10;&amp;#10;var UserSchema = new Schema(&amp;#123;&amp;#10;    name: String,&amp;#10;    username: &amp;#123;&amp;#10;        type: String,&amp;#10;        unique: true,&amp;#10;        trim: true,&amp;#10;        required: true,&amp;#10;        index: true&amp;#10;    &amp;#125;,&amp;#10;    email: &amp;#123;&amp;#10;        type: String,&amp;#10;        validate: &amp;#123;&amp;#10;            validator: function(email) &amp;#123;&amp;#10;                return /^[a-zA-Z0-9.!#$%&amp;#38;&amp;#8217;*+/=?^_`&amp;#123;|&amp;#125;~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/.test(email);&amp;#10;            &amp;#125;,&amp;#10;            message: &amp;#39;&amp;#123;VALUE&amp;#125; is not a valid email!&amp;#39;&amp;#10;        &amp;#125;&amp;#10;    &amp;#125;,&amp;#10;    password: &amp;#123;&amp;#10;        type: String,&amp;#10;        required: true&amp;#10;    &amp;#125;,&amp;#10;    state: &amp;#123;&amp;#10;        type: String,&amp;#10;        enum: [&amp;#34;single&amp;#34;, &amp;#34;inlove&amp;#34;]&amp;#10;    &amp;#125;,&amp;#10;    gender: &amp;#123;&amp;#10;        type: String,&amp;#10;        enum: [&amp;#34;male&amp;#34;, &amp;#34;female&amp;#34;, &amp;#34;unknown&amp;#34;],&amp;#10;        default: &amp;#34;unknown&amp;#34;&amp;#10;    &amp;#125;,&amp;#10;    phone_no: String,&amp;#10;    accessToken: String,&amp;#10;    avatar: String,&amp;#10;    location: String,&amp;#10;    url: String,&amp;#10;    signature: String,&amp;#10;    created_at: &amp;#123;&amp;#10;        type: Date,&amp;#10;        default: Date.now&amp;#10;    &amp;#125;,&amp;#10;    updated_at: Date&amp;#10;&amp;#125;);&amp;#10;&amp;#10;UserSchema.set(&amp;#39;autoIndex&amp;#39;, false);&amp;#10;&amp;#10;// on every save, add the date&amp;#10;userSchema.pre(&amp;#39;save&amp;#39;, function(next) &amp;#123;&amp;#10;  var currentDate = new Date();&amp;#10;  this.updated_at = currentDate;&amp;#10;  next();&amp;#10;&amp;#125;);&amp;#10;&amp;#10;module.exports = mongoose.model(&amp;#39;User&amp;#39;, UserSchema);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Schema&lt;/code&gt;定义了用户的数据结构，&lt;code&gt;model&lt;/code&gt;将其建模，这里我们取模型为&lt;code&gt;User&lt;/code&gt;,mongoose将为我们自动创建&lt;code&gt;users&lt;/code&gt;的&lt;code&gt;collection&lt;/code&gt;。这里后面会添加很多自定义方法，目前暂时是最基础的形式。&lt;/p&gt;
&lt;p&gt;Mongoose也为我们提供了很多方便的验证器，如&lt;code&gt;required&lt;/code&gt;,&lt;code&gt;unique&lt;/code&gt;,&lt;code&gt;enum&lt;/code&gt;等,同时也提供了自定义验证器&lt;code&gt;validate&lt;/code&gt;，详细请查阅文档&lt;a href=&quot;http://mongoosejs.com/docs/api.html#schematype_SchemaType-validate&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;validator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;index&lt;/code&gt;索引可以加快查询速度，但建立索引需要代价，应该给那些经常需要索引的列增加索引，另外应用启动的时候Mongoose会自动为每一个&lt;code&gt;schema&lt;/code&gt;发送一个&lt;code&gt;ensureIndex&lt;/code&gt;命令,开发环境用这个很好, 但是建议在生产环境不要使用这个,使用下面的方法禁用&lt;code&gt;ensureIndex&lt;/code&gt;:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;animalSchema.set(&amp;#39;autoIndex&amp;#39;, false);&amp;#10;//or&amp;#10;new Schema(&amp;#123;&amp;#125;, &amp;#123;autoIndex: false&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;MongoDB object modeling designed to work in an asynchronous environment. &lt;a href=&quot;http://mongoosejs.com&quot;&gt;http://mongoosejs.com&lt;/a&gt;&lt;br&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="nodejs" scheme="http://www.mclspace.com/categories/nodejs/"/>
    
    
      <category term="jieyuan" scheme="http://www.mclspace.com/tags/jieyuan/"/>
    
      <category term="nodejs" scheme="http://www.mclspace.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs 配置文件管理</title>
    <link href="http://www.mclspace.com/2016/02/12/nodejs-tutorials-3/"/>
    <id>http://www.mclspace.com/2016/02/12/nodejs-tutorials-3/</id>
    <published>2016-02-12T08:49:16.000Z</published>
    <updated>2016-02-14T04:42:36.000Z</updated>
    
    <content type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;本文使用的配置管理方案来自于&lt;a href=&quot;http://www.amazon.cn/MEAN-Web开发-哈维夫/dp/B012R5A30C/ref=sr_1_1?ie=UTF8&amp;amp;qid=1455266935&amp;amp;sr=8-1&amp;amp;keywords=MEAN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MEAN Web开发&lt;/a&gt;一书&lt;br&gt;&lt;/blockquote&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;我们开发的程序往往会运行在不同的环境中，例如开发，测试，生产等,比如开发时连接到的数据库里面的数据是模拟出来的，而生产环境要连接到实际的数据库上，测试的时候可能需要另一个数据库,因此我们需要让程序能根据不同的运行环境来载入不同的配置文件。&lt;/p&gt;
&lt;p&gt;另外，我们使用的第三方模块也很可能需要配置文件，将这些配置文件集中起来进行管理，这样在环境变化或模块配置变化的时候我们就不需要改动源代码，配置与使用分离。&lt;/p&gt;
&lt;p&gt;本文使用js文件作为配置文件格式，其他常见的格式还有json,yaml等,另外也可以使用&lt;a href=&quot;https://www.npmjs.com/package/config&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;config&lt;/a&gt;模块进行配置管理,详细的请查阅&lt;a href=&quot;https://cnodejs.org/topic/55fac7eced1da72438e33a7d&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js 项目的配置文件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用本文的配置管理方案后&lt;a href=&quot;https://github.com/rdmclin2/jieyuan&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;结缘&lt;/a&gt;的config文件结构类似如下所示:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ tree config&amp;#10;config&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; config.js&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; env&amp;#10;&amp;#9474;&amp;#160;&amp;#160; &amp;#9500;&amp;#9472;&amp;#9472; development.js&amp;#10;&amp;#9474;&amp;#160;&amp;#160; &amp;#9500;&amp;#9472;&amp;#9472; production.js&amp;#10;&amp;#9474;&amp;#160;&amp;#160; &amp;#9492;&amp;#9472;&amp;#9472; test.js&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; mongoose.js&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; passport.js&amp;#10;&amp;#9492;&amp;#9472;&amp;#9472; strategies&amp;#10;    &amp;#9500;&amp;#9472;&amp;#9472; bearer.js&amp;#10;    &amp;#9492;&amp;#9472;&amp;#9472; local.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;环境配置&quot;&gt;环境配置&lt;/h1&gt;&lt;p&gt;首先在config文件夹下创建&lt;code&gt;env&lt;/code&gt;文件夹以及&lt;code&gt;development.js&lt;/code&gt;，&lt;code&gt;test.js&lt;/code&gt;和&lt;code&gt;production.js&lt;/code&gt;，分别用于开发，测试，生产环境下.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ mkdir env &amp;#38;&amp;#38; cd $_ &amp;#38;&amp;#38; touch development.js test.js production.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;写入部分配置项，如&lt;code&gt;development.js&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;module.exports  = &amp;#123;&amp;#10;    sessionSecret : &amp;#39;developmentSessionSecret&amp;#39;,&amp;#10;    db: &amp;#39;mongodb://localhost/test&amp;#39;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在&lt;code&gt;test.js&lt;/code&gt;和&lt;code&gt;production.js&lt;/code&gt;中可以写入不同的db.然后创建&lt;code&gt;config.js&lt;/code&gt;文件,写入以下代码:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;module.exports = require(&amp;#39;./env/&amp;#39; + process.env.NODE_ENV + &amp;#39;.js&amp;#39;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这句代码会根据当前的&lt;code&gt;NODE_ENV&lt;/code&gt;加载合适的配置文件,node默认情况下为&lt;code&gt;development&lt;/code&gt;模式,我们可以设置NODE_ENV环境变量或在运行node前指定环境变量。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ NODE_ENV=test PORT=9807 node ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在需要用到环境设置的时候引入&lt;code&gt;config.js&lt;/code&gt;文件即可,如:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var config = require(&amp;#39;./config&amp;#39;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;模块配置&quot;&gt;模块配置&lt;/h1&gt;&lt;p&gt;可以将第三方模块的配置也放到&lt;code&gt;config&lt;/code&gt;中来统一管理，以&lt;code&gt;mongoose&lt;/code&gt;为例,在config文件夹下创建&lt;code&gt;mongoose.js&lt;/code&gt;文件,写入如下代码:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var config = require(&amp;#39;./config&amp;#39;),&amp;#10;    mongoose = require(&amp;#39;mongoose&amp;#39;);&amp;#10;&amp;#10;&amp;#10;module.exports = function()&amp;#123;&amp;#10;    var db = mongoose.connect(config.db,function(err) &amp;#123;&amp;#10;        if(err) &amp;#123;&amp;#10;            console.log(&amp;#39;connection error&amp;#39;, err);&amp;#10;        &amp;#125; else &amp;#123;&amp;#10;            console.log(&amp;#39;connection successful : &amp;#39; + config.db);&amp;#10;        &amp;#125;&amp;#10;    &amp;#125;);&amp;#10;    return db;&amp;#10;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;引入配置信息，读取db，然后使用mongoose连接,导出该函数,然后在需要链接数据库的时候使用:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var Mongoose = require(&amp;#39;../config/mongoose&amp;#39;);&amp;#10;var db =  Mongoose();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;进行数据库连接.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;本文使用的配置管理方案来自于&lt;a href=&quot;http://www.amazon.cn/MEAN-Web开发-哈维夫/dp/B012R5A30C/ref=sr_1_1?ie=UTF8&amp;amp;qid=1455266935&amp;amp;sr=8-1&amp;amp;keywords=MEAN&quot;&gt;MEAN Web开发&lt;/a&gt;一书&lt;br&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="nodejs" scheme="http://www.mclspace.com/categories/nodejs/"/>
    
    
      <category term="jieyuan" scheme="http://www.mclspace.com/tags/jieyuan/"/>
    
      <category term="nodejs" scheme="http://www.mclspace.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>结缘的功能设想-初步</title>
    <link href="http://www.mclspace.com/2016/02/12/jieyuan-development-1/"/>
    <id>http://www.mclspace.com/2016/02/12/jieyuan-development-1/</id>
    <published>2016-02-12T08:31:50.000Z</published>
    <updated>2016-02-12T08:37:02.000Z</updated>
    
    <content type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;恩，结缘的宗旨是帮助程序员们找到一个适合自己的好妹子，以及帮助想养猿的妹子找到一个靠谱的程序猿。&lt;br&gt;—  《结缘的宗旨yy版》&lt;br&gt;&lt;/blockquote&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;用户群体为程序猿，妹子。性别为男，女。设想的用户字段如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;name 姓名&lt;/li&gt;
&lt;li&gt;username 用户名&lt;/li&gt;
&lt;li&gt;email 邮箱&lt;/li&gt;
&lt;li&gt;gender 性别: {male,female}&lt;/li&gt;
&lt;li&gt;phoneno 电话号码&lt;/li&gt;
&lt;li&gt;location 所在地&lt;/li&gt;
&lt;li&gt;password 登录密码&lt;/li&gt;
&lt;li&gt;url 个人网站地址&lt;/li&gt;
&lt;li&gt;avatar 头像地址&lt;/li&gt;
&lt;li&gt;signature 个人签名&lt;/li&gt;
&lt;li&gt;create_at: 创建日期&lt;/li&gt;
&lt;li&gt;state: 状态: {single,inlove}&lt;/li&gt;
&lt;li&gt;accessToken: access token&lt;/li&gt;
&lt;li&gt;friends [] 好友列表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前设想的功能有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户登录/注册&lt;/li&gt;
&lt;li&gt;个人主页&lt;/li&gt;
&lt;li&gt;聊天功能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用的技术栈为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Node.js 后端&lt;/li&gt;
&lt;li&gt;MongoDB 数据库&lt;/li&gt;
&lt;li&gt;Vue.js 前端&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;恩，结缘的宗旨是帮助程序员们找到一个适合自己的好妹子，以及帮助想养猿的妹子找到一个靠谱的程序猿。&lt;br&gt;—  《结缘的宗旨yy版》&lt;br&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="nodejs" scheme="http://www.mclspace.com/categories/nodejs/"/>
    
    
      <category term="jieyuan" scheme="http://www.mclspace.com/tags/jieyuan/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs项目典型目录结构</title>
    <link href="http://www.mclspace.com/2016/01/24/nodejs-tutorials-2/"/>
    <id>http://www.mclspace.com/2016/01/24/nodejs-tutorials-2/</id>
    <published>2016-01-24T14:23:53.000Z</published>
    <updated>2016-02-12T09:22:49.000Z</updated>
    
    <content type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;项目的组织就犹如行军作战的阵法和章法，混乱而无目的的军队几乎不可能打胜仗，有其形，有其魂的组织的生命周期才会更长，其形态才更稳固。&lt;br&gt;—《深入浅出Nodejs》&lt;br&gt;&lt;/blockquote&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;这一篇我们来聊聊&lt;a href=&quot;https://github.com/rdmclin2/jieyuan&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;结缘&lt;/a&gt;的项目结构。由于&lt;a href=&quot;https://github.com/rdmclin2/jieyuan&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;结缘&lt;/a&gt;是web应用,我们以常见的MVC为主要框架，然后在这个基础上进行扩展。结合卜灵的《深入浅出Nodejs》产品化一章中的应用项目结构以及之前做的项目的一些经验,&lt;a href=&quot;https://github.com/rdmclin2/jieyuan&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;结缘&lt;/a&gt;的目录结构如下:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; CHANGELOG.md //&amp;#32593;&amp;#31449;&amp;#30340;&amp;#21464;&amp;#26356;&amp;#21382;&amp;#21490;&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; INSTALL.md // &amp;#23433;&amp;#35013;&amp;#35828;&amp;#26126;&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; LICENSE // &amp;#36981;&amp;#24490;&amp;#30340;&amp;#32593;&amp;#32476;&amp;#21327;&amp;#35758;&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; Makefile //Makefile &amp;#25991;&amp;#20214;&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; README.md&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; api //&amp;#25552;&amp;#20379;&amp;#32473;&amp;#31227;&amp;#21160;&amp;#31471;&amp;#35843;&amp;#29992;&amp;#30340;api&amp;#36923;&amp;#36753;&amp;#65292;&amp;#31867;&amp;#20284;web&amp;#31471;&amp;#30340;controllers&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; app.js &amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; benchmark //&amp;#22522;&amp;#20934;&amp;#27979;&amp;#35797;&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; bin //&amp;#21487;&amp;#25191;&amp;#34892;&amp;#25991;&amp;#20214;&amp;#30446;&amp;#24405;&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; config //&amp;#35774;&amp;#32622;&amp;#25991;&amp;#20214;&amp;#30446;&amp;#24405;&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; controllers //&amp;#25511;&amp;#21046;&amp;#22120;&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; dispatch.js //&amp;#22810;&amp;#36827;&amp;#31243;&amp;#31649;&amp;#29702;&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; libs //&amp;#27809;&amp;#26377;&amp;#27169;&amp;#22359;&amp;#21270;&amp;#24471;&amp;#25991;&amp;#20214;&amp;#30446;&amp;#24405;&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; logs //&amp;#23384;&amp;#25918;log&amp;#20449;&amp;#24687;&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; middlewares //&amp;#20013;&amp;#38388;&amp;#20214;&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; models //&amp;#25968;&amp;#25454;&amp;#24211;&amp;#27169;&amp;#22411;&amp;#25991;&amp;#20214;&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; node_modules // nodejs&amp;#24211;&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; npm-debug.log // &amp;#24573;&amp;#30053;,npm&amp;#30340;log&amp;#25991;&amp;#20214;&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; package.json //&amp;#25551;&amp;#36848;&amp;#25991;&amp;#20214;&amp;#65292;&amp;#20381;&amp;#36182;&amp;#37197;&amp;#32622;&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; proxy // &amp;#25968;&amp;#25454;&amp;#20195;&amp;#29702;&amp;#30446;&amp;#24405;&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; public //&amp;#38745;&amp;#24577;&amp;#25991;&amp;#20214;&amp;#30446;&amp;#24405;&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; routes //&amp;#36335;&amp;#30001;&amp;#22788;&amp;#29702;&amp;#30446;&amp;#24405;&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; routes.js // &amp;#36335;&amp;#30001;&amp;#27880;&amp;#20876;&amp;#25991;&amp;#20214;&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; test //&amp;#27979;&amp;#35797;&amp;#25991;&amp;#20214;&amp;#30446;&amp;#24405;&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; tools //&amp;#24037;&amp;#20855;&amp;#25991;&amp;#20214;&amp;#30446;&amp;#24405;&amp;#10;&amp;#9492;&amp;#9472;&amp;#9472; views // &amp;#35270;&amp;#22270;&amp;#30446;&amp;#24405;&amp;#10;&amp;#10;16 directories, 10 files&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里也没啥特别要注意的，这里的&lt;code&gt;Makefile&lt;/code&gt;作为构建工具后面可能被&lt;code&gt;gulp&lt;/code&gt;替代以实现更多定制和跨平台特性,&lt;code&gt;models&lt;/code&gt;文件和传统的模型概念上不同，是用来描述数据库的&lt;code&gt;Schema&lt;/code&gt;的,传统的模型和&lt;code&gt;proxy&lt;/code&gt;更加接近,&lt;code&gt;proxy&lt;/code&gt;提供对数据库数据的代理方法。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;项目的组织就犹如行军作战的阵法和章法，混乱而无目的的军队几乎不可能打胜仗，有其形，有其魂的组织的生命周期才会更长，其形态才更稳固。&lt;br&gt;—《深入浅出Nodejs》&lt;br&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="nodejs" scheme="http://www.mclspace.com/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://www.mclspace.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Java使用ProcessBuilder类编写shell工具类</title>
    <link href="http://www.mclspace.com/2016/01/20/java-shell-toolkit-using-processBuilder/"/>
    <id>http://www.mclspace.com/2016/01/20/java-shell-toolkit-using-processBuilder/</id>
    <published>2016-01-20T09:34:20.000Z</published>
    <updated>2016-01-21T09:18:40.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;&lt;p&gt;最近使用Java编写用于测试平台的工具类，有个需求是在java中调用命令行语句并获取输出，在Java中有两种方式可以完成这个任务。一个是&lt;code&gt;Runtime.getRuntime().exec()&lt;/code&gt;（java1.5之前），java1.5之后提供了&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/lang/ProcessBuilder.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ProcessBuilder&lt;/a&gt;类来构建进程。由于Runtime的方法不够灵活，而且我们项目不需要兼容老版本java，这里用ProcessBuilder来构建这个工具类。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;PS: 代码中写了一些方便的adb和adbshell方法，完全可以定制自己的快捷方法。为防止线程阻塞,我们用了另一个线程读取线程的输出流。&lt;/p&gt;
&lt;h1 id=&quot;代码&quot;&gt;代码&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package com.nata;&amp;#10;&amp;#10;import java.io.IOException;&amp;#10;import java.io.InputStream;&amp;#10;import java.io.InputStreamReader;&amp;#10;import java.util.ArrayList;&amp;#10;import java.util.List;&amp;#10;import java.util.Scanner;&amp;#10;&amp;#10;/**&amp;#10; * Author: Calvin Meng&amp;#10; * Blog: mclspace.com  Email: rdmclin2@gamil.com&amp;#10; * Update: 2016-01-20 14:23&amp;#10; */&amp;#10;public class ShellKit &amp;#123;&amp;#10;    /**&amp;#10;     * Run shell command starting with &amp;#39;adb&amp;#39;&amp;#10;     *&amp;#10;     * @param cmd command list to execute&amp;#10;     * @return  Any Output&amp;#10;     */&amp;#10;    public static String adb(List&amp;#60;String&amp;#62; cmd) &amp;#123;&amp;#10;        cmd.add(0, &amp;#34;adb&amp;#34;);&amp;#10;        return command(cmd);&amp;#10;    &amp;#125;&amp;#10;&amp;#10;    /**&amp;#10;     * Run shell command starting with &amp;#39;adb&amp;#39;&amp;#10;     *&amp;#10;     * @param cmd command to execute ,tokenize with whitespace&amp;#10;     * @return  Any Output&amp;#10;     */&amp;#10;    public static String adb(String cmd) &amp;#123;&amp;#10;        String[] splits = cmd.split(&amp;#34; &amp;#34;);&amp;#10;        return adb(splits);&amp;#10;    &amp;#125;&amp;#10;&amp;#10;    /**&amp;#10;     * Run shell command starting with &amp;#39;adb&amp;#39;&amp;#10;     *&amp;#10;     * @param cmd command string array to execute&amp;#10;     * @return  Any Output&amp;#10;     */&amp;#10;    public static String adb(String... cmd) &amp;#123;&amp;#10;        ArrayList&amp;#60;String&amp;#62; cmds = new ArrayList&amp;#60;&amp;#62;();&amp;#10;        cmds.add(&amp;#34;adb&amp;#34;);&amp;#10;        for (String part:cmd&amp;#10;                ) &amp;#123;&amp;#10;            cmds.add(part) ;&amp;#10;        &amp;#125;&amp;#10;        return command(cmds);&amp;#10;    &amp;#125;&amp;#10;&amp;#10;    /**&amp;#10;     * Run shell command starting with &amp;#39;adb shell&amp;#39;&amp;#10;     *&amp;#10;     * @param cmd command list to execute&amp;#10;     * @return running Any Output&amp;#10;     */&amp;#10;    public static String adbShell(List&amp;#60;String&amp;#62; cmd) &amp;#123;&amp;#10;        cmd.add(0, &amp;#34;shell&amp;#34;);&amp;#10;        cmd.add(0, &amp;#34;adb&amp;#34;);&amp;#10;        return command(cmd);&amp;#10;    &amp;#125;&amp;#10;&amp;#10;    /**&amp;#10;     * Run shell command starting with &amp;#39;adb shell&amp;#39;&amp;#10;     *&amp;#10;     * @param cmd command to execute ,tokenize with whitespace&amp;#10;     * @return  Any Output&amp;#10;     */&amp;#10;&amp;#10;    public static String adbShell(String cmd) &amp;#123;&amp;#10;        String[] splits = cmd.split(&amp;#34; &amp;#34;);&amp;#10;        return adbShell(splits);&amp;#10;    &amp;#125;&amp;#10;&amp;#10;    /**&amp;#10;     * Run shell command starting with &amp;#39;adb shell&amp;#39;&amp;#10;     *&amp;#10;     * @param cmd command string array to execute&amp;#10;     * @return  Any Output&amp;#10;     */&amp;#10;    public static String adbShell(String... cmd) &amp;#123;&amp;#10;        ArrayList&amp;#60;String&amp;#62; cmds = new ArrayList&amp;#60;&amp;#62;();&amp;#10;        cmds.add(&amp;#34;adb&amp;#34;);&amp;#10;        cmds.add(&amp;#34;shell&amp;#34;);&amp;#10;        for (String part:cmd&amp;#10;                ) &amp;#123;&amp;#10;            cmds.add(part) ;&amp;#10;        &amp;#125;&amp;#10;        return command(cmds);&amp;#10;    &amp;#125;&amp;#10;&amp;#10;    /**&amp;#10;     * Execute a shell command and return its output&amp;#10;     *&amp;#10;     * @param command command to execute&amp;#10;     * @return process executed&amp;#10;     */&amp;#10;    public static String command(List&amp;#60;String&amp;#62; command) &amp;#123;&amp;#10;        //set redirectErrorStream to be true to cross output streams&amp;#10;        ProcessBuilder pb = new ProcessBuilder(command).redirectErrorStream(true);&amp;#10;        String output = &amp;#34;&amp;#34;;&amp;#10;&amp;#10;        try &amp;#123;&amp;#10;            Process process = pb.start();&amp;#10;&amp;#10;            IOThreadHandler outputHandler = new IOThreadHandler(&amp;#10;                    process.getInputStream());&amp;#10;&amp;#10;            outputHandler.start();&amp;#10;&amp;#10;            //wait for the process to stop&amp;#10;            process.waitFor();&amp;#10;&amp;#10;            //in case the process stopped before the thread&amp;#10;            outputHandler.join();&amp;#10;&amp;#10;            output = outputHandler.getOutput();&amp;#10;&amp;#10;        &amp;#125; catch (InterruptedException | IOException e) &amp;#123;&amp;#10;            e.printStackTrace();&amp;#10;        &amp;#125;&amp;#10;        return output;&amp;#10;&amp;#10;    &amp;#125;&amp;#10;&amp;#10;    /**&amp;#10;     * Thread to drain the output of cmd running&amp;#10;     */&amp;#10;    private static class IOThreadHandler extends Thread &amp;#123;&amp;#10;        private InputStream inputStream;&amp;#10;        private StringBuilder output = new StringBuilder();&amp;#10;&amp;#10;        IOThreadHandler(InputStream inputStream) &amp;#123;&amp;#10;            this.inputStream = inputStream;&amp;#10;        &amp;#125;&amp;#10;&amp;#10;        public void run() &amp;#123;&amp;#10;            try (Scanner br = new Scanner(new InputStreamReader(inputStream))) &amp;#123;&amp;#10;                String line = null;&amp;#10;                while (br.hasNextLine()) &amp;#123;&amp;#10;                    line = br.nextLine();&amp;#10;                    output.append(line).append(System.getProperty(&amp;#34;line.separator&amp;#34;));&amp;#10;                &amp;#125;&amp;#10;            &amp;#125;&amp;#10;        &amp;#125;&amp;#10;&amp;#10;        public String getOutput() &amp;#123;&amp;#10;            return output.toString();&amp;#10;        &amp;#125;&amp;#10;    &amp;#125;&amp;#10;&amp;#10;&amp;#10;    //mininal unit test&amp;#10;    public static void main(String[] args) &amp;#123;&amp;#10;        ArrayList&amp;#60;String&amp;#62; cmds = new ArrayList&amp;#60;&amp;#62;();&amp;#10;        cmds.add(&amp;#34;devices&amp;#34;);&amp;#10;        System.out.println(ShellKit.adb(cmds));&amp;#10;&amp;#10;        cmds.clear();&amp;#10;        cmds.add(&amp;#34;getprop&amp;#34;);&amp;#10;        cmds.add(&amp;#34;ro.boot.serialno&amp;#34;);&amp;#10;&amp;#10;        System.out.println(ShellKit.adbShell(cmds));&amp;#10;    &amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;参考资料&quot;&gt;参考资料&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.javaworld.com/article/2071275/core-java/when-runtime-exec---won-t.html?page=3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;When Runtime.exec() won’t&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这篇文章很不错,建议一看，只是发布时间有点晚了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/6856028/difference-between-processbuilder-and-runtime-exec&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;runtime.exec 和 processbuilder的区别&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;&lt;p&gt;最近使用Java编写用于测试平台的工具类，有个需求是在java中调用命令行语句并获取输出，在Java中有两种方式可以完成这个任务。一个是&lt;code&gt;Runtime.getRuntime().exec()&lt;/code&gt;（java1.5之前），java1.5之后提供了&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/lang/ProcessBuilder.html&quot;&gt;ProcessBuilder&lt;/a&gt;类来构建进程。由于Runtime的方法不够灵活，而且我们项目不需要兼容老版本java，这里用ProcessBuilder来构建这个工具类。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.mclspace.com/categories/java/"/>
    
    
      <category term="concurrency" scheme="http://www.mclspace.com/tags/concurrency/"/>
    
      <category term="java" scheme="http://www.mclspace.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>使用Express快速创建web项目</title>
    <link href="http://www.mclspace.com/2016/01/18/nodejs-tutorials-1/"/>
    <id>http://www.mclspace.com/2016/01/18/nodejs-tutorials-1/</id>
    <published>2016-01-18T14:32:44.000Z</published>
    <updated>2016-01-24T14:30:42.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;&lt;p&gt;从很早开始就想通过Nodejs编写一个属于自己的网站，同时也想分享一些Nodejs开发过程中的一些感悟和经验，不过一直没有实施，再拖下去估计没有下文了=。=。准备从本篇开始，使用Nodejs的Express框架,配合Mongoose数据库构建一个网站,探索基于Nodejs的web应用的快速构建方法,并记录开发过程。目前有如下两个想法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;类似知乎的网站（特点为限制答题字数，并且启用markdown回答题目),取名简言&lt;/li&gt;
&lt;li&gt;身边很多优秀的程序员居然还木有妹子！不能忍，决定了，写一个帮助程序员把妹的网站，不不不，是帮助妹子领养萌萌的小猿的网站，取名结缘（猿）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;网站文件放在&lt;a href=&quot;https://github.com/rdmclin2/NodeTurtorials&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;上，欢迎拍砖点赞 :)&lt;/p&gt;
&lt;p&gt;PS: 本篇内容相关源码可以通过tag:v0.0.1进行查看&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;hr&gt;
&lt;h3 id=&quot;创建过程&quot;&gt;创建过程&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://expressjs.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Express&lt;/a&gt;是基于&lt;a href=&quot;https://nodejs.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nodejs&lt;/a&gt;的一个快速web开发框架,它提供了一个&lt;code&gt;Express application generator&lt;/code&gt;可以帮助我们快速创建应用的骨架。&lt;/p&gt;
&lt;p&gt;使用如下命令安装generator:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install express-generator -g&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;安装完成后用以下命令生成骨架,&lt;code&gt;-e&lt;/code&gt;选项代表使用EJS模板引擎:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ express -e myapp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;生成后的应用文件结构如下:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; LICENSE&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; README.md&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; app.js&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; bin&amp;#10;&amp;#9474;&amp;#160;&amp;#160; &amp;#9492;&amp;#9472;&amp;#9472; www&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; package.json&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; public&amp;#10;&amp;#9474;&amp;#160;&amp;#160; &amp;#9500;&amp;#9472;&amp;#9472; images&amp;#10;&amp;#9474;&amp;#160;&amp;#160; &amp;#9500;&amp;#9472;&amp;#9472; javascripts&amp;#10;&amp;#9474;&amp;#160;&amp;#160; &amp;#9492;&amp;#9472;&amp;#9472; stylesheets&amp;#10;&amp;#9474;&amp;#160;&amp;#160;     &amp;#9492;&amp;#9472;&amp;#9472; style.css&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; routes&amp;#10;&amp;#9474;&amp;#160;&amp;#160; &amp;#9500;&amp;#9472;&amp;#9472; index.js&amp;#10;&amp;#9474;&amp;#160;&amp;#160; &amp;#9492;&amp;#9472;&amp;#9472; users.js&amp;#10;&amp;#9492;&amp;#9472;&amp;#9472; views&amp;#10;    &amp;#9500;&amp;#9472;&amp;#9472; error.ejs&amp;#10;    &amp;#9492;&amp;#9472;&amp;#9472; index.ejs&amp;#10;&amp;#10;7 directories, 10 files&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;app.js&lt;/code&gt;是express的设置文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bin/www&lt;/code&gt;是express执行文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package.json&lt;/code&gt;是nodejs项目的配置文件，用于保存应用信息与依赖管理&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public&lt;/code&gt;文件夹为web应用的资源文件夹&lt;/li&gt;
&lt;li&gt;&lt;code&gt;routes&lt;/code&gt;保存路由文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;views&lt;/code&gt;保存网站的ejs视图代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后执行&lt;code&gt;$ npm install&lt;/code&gt;安装项目依赖,该命令根据&lt;code&gt;package.json&lt;/code&gt;文件中描述的&lt;code&gt;dependencies&lt;/code&gt;安装依赖，默认安装到&lt;code&gt;node_modules&lt;/code&gt;文件夹下。例如自动生成的&lt;code&gt;package.json&lt;/code&gt;文件如下:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#10;  &amp;#34;name&amp;#34;: &amp;#34;NodeTurtorials&amp;#34;,&amp;#10;  &amp;#34;version&amp;#34;: &amp;#34;0.0.0&amp;#34;,&amp;#10;  &amp;#34;private&amp;#34;: true,&amp;#10;  &amp;#34;scripts&amp;#34;: &amp;#123;&amp;#10;    &amp;#34;start&amp;#34;: &amp;#34;node ./bin/www&amp;#34;&amp;#10;  &amp;#125;,&amp;#10;  &amp;#34;dependencies&amp;#34;: &amp;#123;&amp;#10;    &amp;#34;body-parser&amp;#34;: &amp;#34;~1.13.2&amp;#34;,&amp;#10;    &amp;#34;cookie-parser&amp;#34;: &amp;#34;~1.3.5&amp;#34;,&amp;#10;    &amp;#34;debug&amp;#34;: &amp;#34;~2.2.0&amp;#34;,&amp;#10;    &amp;#34;ejs&amp;#34;: &amp;#34;~2.3.3&amp;#34;,&amp;#10;    &amp;#34;express&amp;#34;: &amp;#34;~4.13.1&amp;#34;,&amp;#10;    &amp;#34;morgan&amp;#34;: &amp;#34;~1.6.1&amp;#34;,&amp;#10;    &amp;#34;serve-favicon&amp;#34;: &amp;#34;~2.3.0&amp;#34;&amp;#10;  &amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;$ npm start&lt;/code&gt; 或者直接&lt;code&gt;$ node ./bin/www&lt;/code&gt;启动项目。&lt;/p&gt;
&lt;p&gt;打开浏览器输入&lt;code&gt;localhost:3000&lt;/code&gt;查看效果。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;&lt;p&gt;从很早开始就想通过Nodejs编写一个属于自己的网站，同时也想分享一些Nodejs开发过程中的一些感悟和经验，不过一直没有实施，再拖下去估计没有下文了=。=。准备从本篇开始，使用Nodejs的Express框架,配合Mongoose数据库构建一个网站,探索基于Nodejs的web应用的快速构建方法,并记录开发过程。目前有如下两个想法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;类似知乎的网站（特点为限制答题字数，并且启用markdown回答题目),取名简言&lt;/li&gt;
&lt;li&gt;身边很多优秀的程序员居然还木有妹子！不能忍，决定了，写一个帮助程序员把妹的网站，不不不，是帮助妹子领养萌萌的小猿的网站，取名结缘（猿）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;网站文件放在&lt;a href=&quot;https://github.com/rdmclin2/NodeTurtorials&quot;&gt;github&lt;/a&gt;上，欢迎拍砖点赞 :)&lt;/p&gt;
&lt;p&gt;PS: 本篇内容相关源码可以通过tag:v0.0.1进行查看&lt;/p&gt;
    
    </summary>
    
      <category term="nodejs" scheme="http://www.mclspace.com/categories/nodejs/"/>
    
    
      <category term="express" scheme="http://www.mclspace.com/tags/express/"/>
    
      <category term="nodejs" scheme="http://www.mclspace.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Ionic 常见问题及解决方案</title>
    <link href="http://www.mclspace.com/2016/01/16/ionic-problems-and-solutions/"/>
    <id>http://www.mclspace.com/2016/01/16/ionic-problems-and-solutions/</id>
    <published>2016-01-16T07:08:49.000Z</published>
    <updated>2016-02-23T09:37:49.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;&lt;p&gt;Ionic是目前较为流行的Hybird App解决方案,在Ionic开发过程中会遇到很多常见的开发问题，本文尝试对这些问题给出解决方案。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;         
&lt;hr&gt;
&lt;h1 id=&quot;一些常识与技巧&quot;&gt;一些常识与技巧&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;list&lt;/code&gt; 有延迟，可以在&lt;code&gt;ion-content&lt;/code&gt;处使用 &lt;code&gt;overflow-scroll=&amp;quot;true&amp;quot;&lt;/code&gt;尝试&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt;上用&lt;code&gt;ng-click&lt;/code&gt;上是没效果的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt;标签内的事件会在整个&lt;code&gt;label&lt;/code&gt;内被触发，点哪都触发&lt;/li&gt;
&lt;li&gt;快捷修改背景色&lt;code&gt;style=&amp;quot;background-color: #212326;&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;能用&lt;code&gt;ng-if&lt;/code&gt;就用&lt;code&gt;ng-if&lt;/code&gt;,&lt;code&gt;ng-if&lt;/code&gt;的效率比&lt;code&gt;ng-show&lt;/code&gt;和&lt;code&gt;ng-hide&lt;/code&gt;高&lt;/li&gt;
&lt;li&gt;直接在&lt;code&gt;ion-list&lt;/code&gt;中的&lt;code&gt;ion-item&lt;/code&gt;中并不能触发&lt;code&gt;ng-click&lt;/code&gt;事件，可以在item中的元素上再套一层div&lt;/li&gt;
&lt;li&gt;可以用&lt;code&gt;ng-class=&amp;quot;{&amp;#39;important&amp;#39;: post.important}&amp;quot;&lt;/code&gt;配合css 根据列表元素显示不同的效果&lt;/li&gt;
&lt;li&gt;获取日期用&lt;code&gt;$filter&lt;/code&gt;，&lt;code&gt;var postdate = $filter(&amp;#39;date&amp;#39;)(date, &amp;#39;yyyy-MM-dd HH:mm:ss&amp;#39;);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;列表中的元素不能写成 &lt;code&gt;id : 4&lt;/code&gt;，应写成 &lt;code&gt;id : &amp;quot;4&amp;quot;&lt;/code&gt;,注意在创建id变量的时候也需要转成string,如&lt;code&gt;var id = InfoListService.getListLength()+1+&amp;quot;&amp;quot;;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;$log&lt;/code&gt;进行log输出,为什么用&lt;code&gt;$log&lt;/code&gt;而不是console.log呢？可以看看&lt;a href=&quot;https://stackoverflow.com/questions/24185847/why-use-angulars-log-instead-of-console-log&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在安卓上的体验比较差，动画有延迟？可以试试&lt;a href=&quot;http://blog.ionic.io/crosswalk-comes-to-ionic/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ionic集成的crosswalk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;controllers&lt;/code&gt;和&lt;code&gt;services&lt;/code&gt; 的文件名可能会重合，但是他们意义差不多，可以将&lt;code&gt;controllers&lt;/code&gt;中的文件名小写，对应的&lt;code&gt;services&lt;/code&gt;中的文件名大写进行区分,或者加后缀&lt;code&gt;xxxControler&lt;/code&gt;,&lt;code&gt;xxxService&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;安装cordova插件的时候用&lt;code&gt;ionic plugin add ...&lt;/code&gt;的方式添加，这样会在&lt;code&gt;package.json&lt;/code&gt;中添加这个插件的条目，如果有人clone了你的项目想在本地运行，可以用&lt;code&gt;ionic state restore&lt;/code&gt;它会根据&lt;code&gt;cordovaPlugins&lt;/code&gt;条目安装对应的插件。如果直接用&lt;code&gt;cordova plugin add&lt;/code&gt; 安装则不会更新&lt;code&gt;package.json&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;上传base64编码的时候如果提示413错误，是因为文件过大导致的，可以在nodejs中设置bodyparser的文件限制:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var bodyParser = require(&amp;#39;body-parser&amp;#39;);&amp;#10;app.use(bodyParser.json(&amp;#123;limit: &amp;#39;50mb&amp;#39;&amp;#125;));&amp;#10;app.use(bodyParser.urlencoded(&amp;#123;limit: &amp;#39;50mb&amp;#39;, extended: true&amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;img 中 base64编码的图片无法显示？在源码中发现angular添加了unsafe标签？需要在白名单中添加&lt;code&gt;data:image&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$compileProvider.imgSrcSanitizationWhitelist(/^\s*(https?|ftp|mailto|content|file|assets-library):|data:image\//);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有时候pm2运行有问题，重启一下即可&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;在ios设备上运行&lt;code&gt;ionic run ios --device&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&quot;问题列表&quot;&gt;问题列表&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#如何在某个界面中去掉导航栏?&quot;&gt;如何在某个界面中去掉导航栏?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#如何在ionic中加载本地图片?&quot;&gt;如何在ionic中加载本地图片?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#如何在ionic中嵌入网页代码?&quot;&gt;如何在ionic中嵌入网页代码?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#如何将template加载到某个tab或某个sidemenu项目下?&quot;&gt;如何将template加载到某个tab或某个sidemenu项目下?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#运行serve命令时ionic报错?&quot;&gt;运行serve命令时ionic报错?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#用docker跑ionic的时候，不能把地址绑定到0-0-0-0怎么处理?&quot;&gt;用docker跑ionic的时候，不能把地址绑定到0.0.0.0怎么处理?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#加载页面的时候会看到双括号一闪而过？&quot;&gt;加载页面的时候会看到双括号一闪而过？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#更新了数据，如何让界面更新呢？&quot;&gt;更新了数据，如何让界面更新呢？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#如何实现IonicView中card上面有一列分割线的效果?&quot;&gt;如何实现IonicView中card上面有一列分割线的效果?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#controller-js和service-js文件越来越大怎么办?&quot;&gt;controller.js和service.js文件越来越大怎么办?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#如何寻找优秀的范例代码?&quot;&gt;如何寻找优秀的范例代码?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#如何显示相对时间？&quot;&gt;如何显示相对时间？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#发布应用的时候如果遇到翻译错误即MissingTranslation怎么办?&quot;&gt;发布应用的时候如果遇到翻译错误即MissingTranslation怎么办?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#如何在列表右下方添加时间等信息?&quot;&gt;如何在列表右下方添加时间等信息?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#如何回到上一页面?&quot;&gt;如何回到上一页面?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#如何关闭应用?&quot;&gt;如何关闭应用?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#在安卓设备上如何让title居中?&quot;&gt;在安卓设备上如何让title居中?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#如何让在sidemenu中的headerbar能够显示头像等其他信息?&quot;&gt;如何让在sidemenu中的headerbar能够显示头像等其他信息?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ionic的subheader挡住了内容区域怎么办?&quot;&gt;ionic的subheader挡住了内容区域怎么办?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#对于需要添加数据的list，在添加数据后页面不能及时刷新造成卡顿怎么办?&quot;&gt;对于需要添加数据的list，在添加数据后页面不能及时刷新造成卡顿怎么办?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ionic如何处理回退按钮？例如询问用户是否真的要退出应用&quot;&gt;ionic如何处理回退按钮？例如询问用户是否真的要退出应用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ionic如何实现对每个请求都添加认证信息或认证失败自动重新登录?&quot;&gt;ionic如何实现对每个请求都添加认证信息或认证失败自动重新登录?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ionic如何实现搜索框内的全部清除按钮?&quot;&gt;ionic如何实现搜索框内的全部清除按钮?&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;如何在某个界面中去掉导航栏?&quot;&gt;如何在某个界面中去掉导航栏?&lt;/h4&gt;&lt;p&gt;如果某个界面上不想要导航栏，可以简单地在最顶端的标签中添加&lt;code&gt;hide-nav-bar=&amp;quot;true&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;如何在ionic中加载本地图片?&quot;&gt;如何在ionic中加载本地图片?&lt;/h4&gt;&lt;p&gt;对于css文件夹中的样式文件中如果要调用本地的图片的话,从该css文件所在的文件夹开始算,例如&lt;code&gt;www/css/style.css&lt;/code&gt;要加&lt;code&gt;../&lt;/code&gt;,否则在浏览器中可以正常显示，在设备上不行，结构如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.login-page &amp;#123;&amp;#10;  background:url(../img/signup_bg.png);&amp;#10;  background-size: cover;&amp;#10;  background-repeat: no-repeat;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是对于在页面中定义的图片路径，从&lt;code&gt;www&lt;/code&gt;路径开始算,否则浏览器中可显示，但设备上不行,img文件夹和index.html在一级,如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;img src=&amp;#34;img/commander.jpg&amp;#34;&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;如何在ionic中嵌入网页代码?&quot;&gt;如何在ionic中嵌入网页代码?&lt;/h4&gt;&lt;p&gt;使用&lt;code&gt;ng-bind-html&lt;/code&gt;这个类,不过它会过滤原始html的标签，我们可以引入&lt;code&gt;$sce&lt;/code&gt;模块，用&lt;code&gt;$sce.trustAsHtml()&lt;/code&gt;方法信任我们获取的网页&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;如何将template加载到某个tab或某个sidemenu项目下?&quot;&gt;如何将template加载到某个tab或某个sidemenu项目下?&lt;/h4&gt;&lt;p&gt;&lt;code&gt;&amp;lt;ion-nav-view name=&amp;quot;menuContent&amp;quot;&amp;gt;&lt;/code&gt;  可以指定&lt;code&gt;name&lt;/code&gt;，然后在子状态中使用该&lt;code&gt;name&lt;/code&gt;，ionic就知道该把该状态的template渲染到哪边了。例如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; // signup page&amp;#10; .state(&amp;#39;auth.signup&amp;#39;, &amp;#123;&amp;#10;   url: &amp;#39;/signup&amp;#39;,&amp;#10;   views: &amp;#123;&amp;#10;       &amp;#39;auth-signup&amp;#39;: &amp;#123;&amp;#10;           templateUrl: &amp;#39;templates/auth-signup.html&amp;#39;,&amp;#10;           controller: &amp;#39;SignUpCtrl&amp;#39;&amp;#10;       &amp;#125;&amp;#10;   &amp;#125;&amp;#10; &amp;#125;)&amp;#10;&amp;#10; &amp;#21478;&amp;#26377;&amp;#19968;&amp;#20010;tabs&amp;#20013;&amp;#22768;&amp;#26126;&amp;#35813;auth-signup:&amp;#10; &amp;#60;ion-tab title=&amp;#34;Sign Up&amp;#34; icon-on=&amp;#34;ion-ios-personadd&amp;#34;&amp;#10;   icon-off=&amp;#34;ion-ios-personadd-outline&amp;#34; href=&amp;#34;#/auth/signup&amp;#34;&amp;#62;&amp;#10;   &amp;#60;ion-nav-view name=&amp;#34;auth-signup&amp;#34;&amp;#62;&amp;#60;/ion-nav-view&amp;#62;&amp;#10;&amp;#60;/ion-tab&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h4 id=&quot;运行serve命令时ionic报错?&quot;&gt;运行serve命令时ionic报错?&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ionic $ An uncaught exception occured and has been reported to Ionic&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看看你是不还有一个终端在运行着serve呢？&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;用docker跑ionic的时候，不能把地址绑定到0-0-0-0怎么处理?&quot;&gt;用docker跑ionic的时候，不能把地址绑定到0.0.0.0怎么处理?&lt;/h4&gt;&lt;p&gt;可以用&lt;code&gt;ionic serve -all&lt;/code&gt;的方法解决&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;加载页面的时候会看到双括号一闪而过？&quot;&gt;加载页面的时候会看到双括号一闪而过？&lt;/h4&gt;&lt;p&gt;&lt;code&gt;angularjs&lt;/code&gt; 在使用双括号的时候，第一个加载的页面，也就是应用中的&lt;code&gt;index.html&lt;/code&gt;,其未被渲染好的模版可能会被用户看到。用&lt;code&gt;ng-bind&lt;/code&gt;就不会遇到这个问题。造成这种现象的原因是，浏览器需要首先加载HTML页面，渲染它，然后&lt;code&gt;Angular&lt;/code&gt;才有机会把它解释成你期望看到的内容。不过好消息是，在大多数的模版中你依然可以使用双括号.但是对于index.html页面中的数据绑定操作，建议使用&lt;code&gt;ng-bind&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ng-bind&lt;/code&gt;使用方式如下: &lt;code&gt;&amp;lt;p ng-bind=&amp;quot;greeting&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;更新了数据，如何让界面更新呢？&quot;&gt;更新了数据，如何让界面更新呢？&lt;/h4&gt;&lt;p&gt;可以用广播，注意&lt;a href=&quot;https://stackoverflow.com/questions/26752030/rootscope-broadcast-vs-scope-emit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;$broadcast 和 $emit的区别&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;如何实现IonicView中card上面有一列分割线的效果?&quot;&gt;如何实现IonicView中card上面有一列分割线的效果?&lt;/h4&gt;&lt;p&gt;在css里定义&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#info-up &amp;#123;&amp;#10;  border-top: 4px solid #f06336;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;controller-js和service-js文件越来越大怎么办?&quot;&gt;controller.js和service.js文件越来越大怎么办?&lt;/h4&gt;&lt;p&gt;所有的控制器不必都放在controllers.js这一个文件中，可以新建controllers文件夹，&lt;br&gt;然后把每个controller都建一个&lt;controller&gt;.js文件，同理services和utils等都是.但注意要在index.html中head部分声明.但是为了避免他们相互覆盖，第一个加载的js中模块中要加[…],其他都不需要。如：&lt;/controller&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// File : /js/directives/mainDirective.js&amp;#10;angular.module(&amp;#39;app.directives&amp;#39;,[]);&amp;#10;&amp;#10;// File : /js/directives/myGreatDirective.js&amp;#10;angular.module(&amp;#39;app.directives&amp;#39;)  &amp;#10;    .directive(&amp;#39;myGreatDirective&amp;#39;, function()&amp;#123;&amp;#10;        return &amp;#123;&amp;#10;            //...&amp;#10;        &amp;#125;&amp;#10;    &amp;#125;);&amp;#10;&amp;#10;// File : /js/directives/myBetterDirective.js&amp;#10;angular.module(&amp;#39;app.directives&amp;#39;)  &amp;#10;    .directive(&amp;#39;myBetterDirective&amp;#39;, function()&amp;#123;&amp;#10;        return &amp;#123;&amp;#10;            //...&amp;#10;        &amp;#125;&amp;#10;    &amp;#125;);&amp;#10;&amp;#10;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看&lt;a href=&quot;https://calendee.com/2013/12/29/angularjs-code-organization/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;angularjs-code-organization&lt;/a&gt;了解更多,嗯这篇文章写的还不是best practice，因为你还得记着自己把[]写到那个模块里了，统一地写在app.js中即可，在app.js最下面加上类似：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;angular.module(&amp;#39;fcws.controllers&amp;#39;,[&amp;#39;ionic&amp;#39;, &amp;#39;fcws.services&amp;#39;]);&amp;#10;angular.module(&amp;#39;fcws.services&amp;#39;, []);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以达到和上面一样的效果，而且可以统一管理.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;如何寻找优秀的范例代码?&quot;&gt;如何寻找优秀的范例代码?&lt;/h4&gt;&lt;p&gt;目前有些ionic 的app没有进行代码混淆，至少ionic官方的ionic view没有进行代码混淆，下载他们的app，文件名改成zip，解压，所有的 www文件都在assets文件夹中，相当于开源了有木有，看看那些最优秀的practice。看中哪些优秀的app，下下来,如何在googleplay上下载？把googleplay应用的地址贴到&lt;a href=&quot;https://apps.evozi.com/apk-downloader/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;apps.evozi&lt;/a&gt;中。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;如何显示相对时间？&quot;&gt;如何显示相对时间？&lt;/h4&gt;&lt;p&gt;如几分钟前，几天前等,&lt;a href=&quot;https://github.com/moment/moment/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;可以用momentjs&lt;/a&gt;，看&lt;a href=&quot;https://scotch.io/tutorials/display-time-relatively-in-angular&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇教程&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;发布应用的时候如果遇到翻译错误即MissingTranslation怎么办?&quot;&gt;发布应用的时候如果遇到翻译错误即MissingTranslation怎么办?&lt;/h4&gt;&lt;p&gt;暂时的解决方法是，不进行翻译校正, 在 /platforms/android/build.gradle 中的android {}节中加入:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;lintOptions &amp;#123;&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#9;&amp;#9;&amp;#9; disable &amp;#39;MissingTranslation&amp;#39;&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#9;&amp;#9;&amp;#9;&amp;#9;disable &amp;#39;ExtraTranslation&amp;#39;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;如何在列表右下方添加时间等信息?&quot;&gt;如何在列表右下方添加时间等信息?&lt;/h4&gt;&lt;p&gt;&lt;code&gt;span&lt;/code&gt; 可以用来将时间之类的附加信息显示到列表右边,如下面会将创建时间显示在name的右边:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;ion-item class=&amp;#34;item item-avatar-left &amp;#34; ng-repeat=&amp;#34;message in messages&amp;#34;&amp;#62;&amp;#10;&amp;#9;&amp;#60;img src=&amp;#34;../../img/commander.jpg&amp;#34;&amp;#62;&amp;#10;&amp;#9;&amp;#60;span class=&amp;#34;item-note&amp;#34;&amp;#62;&amp;#123;&amp;#123;message.create_at&amp;#125;&amp;#125;&amp;#60;/span&amp;#62;&amp;#10;&amp;#9;&amp;#60;h2 &amp;#62;&amp;#123;&amp;#123;message.name&amp;#125;&amp;#125;&amp;#60;/h2&amp;#62;&amp;#10;&amp;#9;&amp;#60;p &amp;#62;  &amp;#123;&amp;#123;message.content&amp;#125;&amp;#125;&amp;#60;/p&amp;#62;&amp;#10;&amp;#60;/ion-item &amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;如何回到上一页面?&quot;&gt;如何回到上一页面?&lt;/h4&gt;&lt;p&gt;用&lt;code&gt;$ionicHistory&lt;/code&gt;这个模块,引入该模块后使用&lt;code&gt;goBack([backCount])&lt;/code&gt;，backCount指定回去多少个页面（-1代表回去一个页面），默认为-1&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;如何关闭应用?&quot;&gt;如何关闭应用?&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ionic.Platform.exitApp();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h4 id=&quot;在安卓设备上如何让title居中?&quot;&gt;在安卓设备上如何让title居中?&lt;/h4&gt;&lt;p&gt;在headerbar中添加&lt;code&gt;align-title=&amp;quot;center&amp;quot;&lt;/code&gt;,如:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;ion-header-bar class=&amp;#34;bar-positive&amp;#34; align-title=&amp;#34;center&amp;#34;&amp;#62;&amp;#10;&amp;#9; &amp;#60;h1 class=&amp;#34;title&amp;#34;&amp;#62;&amp;#123;&amp;#123;username&amp;#125;&amp;#125;&amp;#60;/h1&amp;#62;&amp;#10;&amp;#60;/ion-header-bar&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不过这个设置对ion-view无效，亲测，如果要统一让所有navbar上的title居中(包括上面的headerbar)，可以在config里设置,如:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.config(function($stateProvider, $urlRouterProvider,$ionicConfigProvider) &amp;#123;&amp;#10;  $ionicConfigProvider.navBar.alignTitle(&amp;#39;center&amp;#39;);&amp;#10;  ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果要让某一个view title居中，可以用&lt;code&gt;$ionicNavBarDelegate&lt;/code&gt;，参考&lt;a href=&quot;http://ionicframework.com/docs/api/service/%24ionicNavBarDelegate/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ionic官方文档&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;如何让在sidemenu中的headerbar能够显示头像等其他信息?&quot;&gt;如何让在sidemenu中的headerbar能够显示头像等其他信息?&lt;/h4&gt;&lt;p&gt;解决方案是去掉headerbar,添加一个avatar到sidemenu content中，如:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;ion-side-menu side=&amp;#34;left&amp;#34;&amp;#62;&amp;#10;&amp;#9;&amp;#60;ion-content class=&amp;#34;bar-positive&amp;#34;&amp;#62;&amp;#10;&amp;#9;&amp;#9;&amp;#60;ion-list&amp;#62;&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#60;ion-item class=&amp;#34;item item-avatar item-positive&amp;#34; href=&amp;#34;#&amp;#34;&amp;#62;&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#9;&amp;#60;img src=&amp;#34;img/commander.jpg&amp;#34;&amp;#62;&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#9;&amp;#60;h2 class=&amp;#34; light&amp;#34;&amp;#62;&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#9;&amp;#9;&amp;#60;i class=&amp;#34;icon ion-ios-star&amp;#34;&amp;#62;&amp;#60;/i&amp;#62;&amp;#123;&amp;#123;title&amp;#125;&amp;#125;&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#9;&amp;#60;/h2&amp;#62;&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#9;&amp;#60;a&amp;#62;&amp;#123;&amp;#123;username&amp;#125;&amp;#125;&amp;#60;/a&amp;#62;&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#60;/ion-item&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;ionic的subheader挡住了内容区域怎么办?&quot;&gt;ionic的subheader挡住了内容区域怎么办?&lt;/h4&gt;&lt;p&gt;解决方案是给&lt;code&gt;&amp;lt;ion-content&amp;gt;&lt;/code&gt;加类&lt;code&gt;has-subheader&lt;/code&gt;,同理也可以加&lt;code&gt;has-header&lt;/code&gt;。如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;ion-content class=&amp;#34;has-header has-subheader&amp;#34;&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h4 id=&quot;对于需要添加数据的list，在添加数据后页面不能及时刷新造成卡顿怎么办?&quot;&gt;对于需要添加数据的list，在添加数据后页面不能及时刷新造成卡顿怎么办?&lt;/h4&gt;&lt;p&gt;可以使用&lt;code&gt;$ionicScrollDelegate.resize();&lt;/code&gt;在添加数据后手动进行重新刷新,记得添加依赖&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;ionic如何处理回退按钮？例如询问用户是否真的要退出应用&quot;&gt;ionic如何处理回退按钮？例如询问用户是否真的要退出应用&lt;/h4&gt;&lt;p&gt;可以在app.js的.run方法中增加对硬件回退按钮的注册处理,这里我在大部分页面都想注册该事件，除去有二级历史页面的我单独判断了下，注意增加依赖。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ionicPlatform.registerBackButtonAction(function(e) &amp;#123;&amp;#10;    var current_state_name = $state.current.name;&amp;#10;    if(current_state_name !== &amp;#39;sidemenu.post&amp;#39;&amp;#10;     &amp;#38;&amp;#38; current_state_name !== &amp;#39;sidemenu.contact_town&amp;#39; &amp;#38;&amp;#38;&amp;#10;    current_state_name !== &amp;#39;sidemenu.contact_people&amp;#39;)&amp;#123;&amp;#10;        $ionicPopup.confirm(&amp;#123;&amp;#10;            title: &amp;#39;&amp;#36864;&amp;#20986;&amp;#24212;&amp;#29992;&amp;#39;,&amp;#10;            template: &amp;#39;&amp;#24744;&amp;#30830;&amp;#23450;&amp;#35201;&amp;#36864;&amp;#20986;xxxx&amp;#21527;?&amp;#39;&amp;#10;        &amp;#125;).then(function (res) &amp;#123;&amp;#10;            if (res) &amp;#123;&amp;#10;                //ionic.Platform.exitApp();&amp;#10;                navigator.app.exitApp();&amp;#10;            &amp;#125; else &amp;#123;&amp;#10;                console.log(&amp;#39;You are not sure&amp;#39;);&amp;#10;            &amp;#125;&amp;#10;        &amp;#125;);&amp;#10;        e.preventDefault();&amp;#10;        return false;&amp;#10;    &amp;#125;else&amp;#123;&amp;#10;        navigator.app.backHistory();&amp;#10;    &amp;#125;&amp;#10;&amp;#125;,100);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;ionic如何实现对每个请求都添加认证信息或认证失败自动重新登录?&quot;&gt;ionic如何实现对每个请求都添加认证信息或认证失败自动重新登录?&lt;/h4&gt;&lt;p&gt;在应用的注册或者登录部分，不记名&lt;code&gt;token&lt;/code&gt;响应了这个请求并且这个&lt;code&gt;token&lt;/code&gt;被存储到本地存储中。当你向后端请求一个服务时，你需要把这个&lt;code&gt;token&lt;/code&gt;放在头部中。你可以在&lt;code&gt;app.js&lt;/code&gt;的&lt;code&gt;.config&lt;/code&gt;方法中使用&lt;code&gt;AngularJS&lt;/code&gt;的拦截器实现这个。每次请求都会被拦截并且会把认证头部和值放到头部中,同理如果服务器端响应&lt;code&gt;401&lt;/code&gt;或&lt;code&gt;403&lt;/code&gt;，跳转到重新登录页面.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$httpProvider.interceptors.push(function ($q, $location, User, $rootScope) &amp;#123;&amp;#10;    return &amp;#123;&amp;#10;        &amp;#39;request&amp;#39;: function (config) &amp;#123;&amp;#10;            config.headers = config.headers || &amp;#123;&amp;#125;;&amp;#10;            if (User.getToken()) &amp;#123;&amp;#10;                config.headers.Authorization = &amp;#39;Bearer &amp;#39; + User.getToken();&amp;#10;            &amp;#125;&amp;#10;            return config;&amp;#10;        &amp;#125;,&amp;#10;        &amp;#39;responseError&amp;#39;: function (response) &amp;#123;&amp;#10;            if (response.status === 401 || response.status === 403) &amp;#123;&amp;#10;                //&amp;#22914;&amp;#26524;&amp;#20043;&amp;#21069;&amp;#30331;&amp;#38470;&amp;#36807;&amp;#10;                if (User.getToken()) &amp;#123;&amp;#10;                    $rootScope.$broadcast(&amp;#39;unAuthenticed&amp;#39;);&amp;#10;                &amp;#125;&amp;#10;            &amp;#125;&amp;#10;            return $q.reject(response);&amp;#10;        &amp;#125;&amp;#10;    &amp;#125;;&amp;#10;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;ionic如何实现搜索框内的全部清除按钮?&quot;&gt;ionic如何实现搜索框内的全部清除按钮?&lt;/h4&gt;&lt;p&gt;在label中的input不能嵌入按钮，因为ionic对于label中的tap事件会进行重定向到input上。解决方案是将label替换成span或div。如下面的搜索框，注意ng-model需要是一个对象才能置空,变量不行:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;span class=&amp;#34;item-input-wrapper&amp;#34;&amp;#62;&amp;#10;     &amp;#60;i class=&amp;#34;icon ion-ios-search placeholder-icon&amp;#34;&amp;#62;&amp;#60;/i&amp;#62;&amp;#10;     &amp;#60;input type=&amp;#34;search&amp;#34; placeholder=&amp;#34;&amp;#35831;&amp;#36755;&amp;#20837;&amp;#22995;&amp;#21517;&amp;#21069;&amp;#32512;&amp;#34; ng-model=&amp;#34;search.key&amp;#34;&amp;#62;&amp;#10;         &amp;#60;i class=&amp;#34;icon ion-close-circled placeholder-icon&amp;#34; style=&amp;#34;vertical-align: middle;&amp;#34;&amp;#10;            on-tap=&amp;#34;clearSearch()&amp;#34; ng-if=&amp;#34;search.key.length&amp;#34;&amp;#62;&amp;#60;/i&amp;#62;&amp;#10; &amp;#60;/span&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;&lt;p&gt;Ionic是目前较为流行的Hybird App解决方案,在Ionic开发过程中会遇到很多常见的开发问题，本文尝试对这些问题给出解决方案。&lt;/p&gt;
    
    </summary>
    
      <category term="ionic" scheme="http://www.mclspace.com/categories/ionic/"/>
    
    
      <category term="ionic" scheme="http://www.mclspace.com/tags/ionic/"/>
    
  </entry>
  
  <entry>
    <title>《恋恋风尘》 by 陈壁</title>
    <link href="http://www.mclspace.com/2015/12/28/llfc-by-chenbi/"/>
    <id>http://www.mclspace.com/2015/12/28/llfc-by-chenbi/</id>
    <published>2015-12-28T08:11:26.000Z</published>
    <updated>2015-12-28T08:25:22.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;人生不只眼前的苟且，还有音乐和远方。  —高晓松&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;embed src=&quot;http://www.xiami.com/widget/95324254_1774062304/singlePlayer.swf&quot; type=&quot;application/x-shockwave-flash&quot; width=&quot;257&quot; height=&quot;33&quot; wmode=&quot;transparent&quot;&gt;

&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#24651;&amp;#24651;&amp;#39118;&amp;#23576;&amp;#10;&amp;#37027;&amp;#22825;&amp;#40644;&amp;#26127;&amp;#10;&amp;#24320;&amp;#22987;&amp;#39128;&amp;#36215;&amp;#20102;&amp;#30333;&amp;#38634;&amp;#10;&amp;#24551;&amp;#20260;&amp;#24320;&amp;#28385;&amp;#23665;&amp;#20872;&amp;#10;&amp;#31561;&amp;#38738;&amp;#26149;&amp;#25955;&amp;#22330;&amp;#10;&amp;#21320;&amp;#22812;&amp;#30340;&amp;#30005;&amp;#24433;&amp;#10;&amp;#20889;&amp;#28385;&amp;#21476;&amp;#32769;&amp;#30340;&amp;#24651;&amp;#24773;&amp;#10;&amp;#22312;&amp;#40657;&amp;#26263;&amp;#20013;&amp;#20026;&amp;#24180;&amp;#36731;&amp;#27468;&amp;#21809;&amp;#10;&amp;#36208;&amp;#21543;&amp;#22899;&amp;#23401;&amp;#10;&amp;#21435;&amp;#30475;&amp;#32418;&amp;#33394;&amp;#30340;&amp;#26397;&amp;#38686;&amp;#10;&amp;#24102;&amp;#19978;&amp;#25105;&amp;#30340;&amp;#24651;&amp;#27468;&amp;#10;&amp;#20320;&amp;#36814;&amp;#39118;&amp;#21535;&amp;#21809;&amp;#10;&amp;#38706;&amp;#27700;&amp;#25346;&amp;#22312;&amp;#21457;&amp;#26786;&amp;#10;&amp;#32467;&amp;#28385;&amp;#36879;&amp;#26126;&amp;#30340;&amp;#24774;&amp;#24581;&amp;#10;&amp;#26159;&amp;#25105;&amp;#19968;&amp;#29983;&amp;#26368;&amp;#21021;&amp;#30340;&amp;#36855;&amp;#24792;&amp;#10;&amp;#24403;&amp;#23681;&amp;#26376;&amp;#21644;&amp;#32654;&amp;#20029;&amp;#24050;&amp;#25104;&amp;#39118;&amp;#23576;&amp;#20013;&amp;#30340;&amp;#21497;&amp;#24687;&amp;#10;&amp;#20320;&amp;#24863;&amp;#20260;&amp;#30340;&amp;#30524;&amp;#37324;&amp;#26377;&amp;#26087;&amp;#26102;&amp;#27882;&amp;#28404;&amp;#10;&amp;#30456;&amp;#20449;&amp;#29233;&amp;#30340;&amp;#24180;&amp;#32426;&amp;#10;&amp;#27809;&amp;#33021;&amp;#21809;&amp;#32473;&amp;#20320;&amp;#30340;&amp;#27468;&amp;#26354;&amp;#10;&amp;#35753;&amp;#25105;&amp;#19968;&amp;#29983;&amp;#24120;&amp;#24120;&amp;#36861;&amp;#24518;&amp;#10;&amp;#30456;&amp;#20449;&amp;#29233;&amp;#30340;&amp;#24180;&amp;#32426;&amp;#10;&amp;#27809;&amp;#33021;&amp;#21809;&amp;#32473;&amp;#20320;&amp;#30340;&amp;#27468;&amp;#26354;&amp;#10;&amp;#35753;&amp;#25105;&amp;#19968;&amp;#29983;&amp;#24120;&amp;#24120;&amp;#36861;&amp;#24518;&amp;#10;&amp;#21862;&amp;#8230;&amp;#8230;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;!-- 
http://www.iqiyi.com/v_19rro04pmg.html?share_sTime=0-share_eTime=259-src=sharemodclk131212

&lt;video id=&quot;video&quot; controls=&quot;&quot; preload=&quot;none&quot; poster=&quot;http://media.w3.org/2010/05/sintel/poster.png&quot;&gt;
      &lt;source id=&quot;mp4&quot; src=&quot;http://media.w3.org/2010/05/sintel/trailer.mp4&quot; type=&quot;video/mp4&quot;&gt;
      &lt;source id=&quot;webm&quot; src=&quot;http://media.w3.org/2010/05/sintel/trailer.webm&quot; type=&quot;video/webm&quot;&gt;
      &lt;source id=&quot;ogv&quot; src=&quot;http://media.w3.org/2010/05/sintel/trailer.ogv&quot; type=&quot;video/ogg&quot;&gt;
      &lt;p&gt;Your user agent does not support the HTML5 Video element.&lt;/p&gt;
    &lt;/video&gt; --&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;人生不只眼前的苟且，还有音乐和远方。  —高晓松&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随感" scheme="http://www.mclspace.com/categories/%E9%9A%8F%E6%84%9F/"/>
    
    
      <category term="随感" scheme="http://www.mclspace.com/tags/%E9%9A%8F%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs微信公众平台服务器接入指南</title>
    <link href="http://www.mclspace.com/2015/12/11/nodejs-weixin-server/"/>
    <id>http://www.mclspace.com/2015/12/11/nodejs-weixin-server/</id>
    <published>2015-12-10T17:09:41.000Z</published>
    <updated>2015-12-11T06:44:08.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;最近申请了一个阿里云服务器,尝试着在上面用Nodejs搞个微信公众号机器人玩玩，申请了个人公众账号【技术栈】，你可以加关注然后尝试机器人的效果,虽然它现在还只会回“你来我家接我吧”,而且你看到的时候也不知道这服务器还在不在=。=.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;搭建环境&quot;&gt;搭建环境&lt;/h1&gt;&lt;p&gt;首先在阿里云服务器上搭建Nodejs开发环境，参考&lt;a href=&quot;http://mclspace.com/2015/12/09/aliyun-build-nodejs-environment/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在阿里云上搭建Nodejs开发环境&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;接入过程&quot;&gt;接入过程&lt;/h1&gt;&lt;p&gt;首先如果你没有&lt;a href=&quot;https://mp.weixin.qq.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;微信公众平台&lt;/a&gt;账号，先去注册一个。&lt;/p&gt;
&lt;p&gt;然后进入开发 -&amp;gt; 基本配置,这里会显示你的应用ID和应用密钥,记下这里你的AppID。&lt;/p&gt;
&lt;p&gt;在服务器配置一栏中有3个参数:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;URL&amp;#26159;&amp;#20320;&amp;#30340;&amp;#26381;&amp;#21153;&amp;#22120;&amp;#30340;&amp;#21709;&amp;#24212;&amp;#24494;&amp;#20449;&amp;#35831;&amp;#27714;&amp;#30340;&amp;#22320;&amp;#22336;&amp;#10;Token&amp;#26159;&amp;#20320;&amp;#21644;&amp;#24494;&amp;#20449;&amp;#36890;&amp;#20449;&amp;#30340;&amp;#20973;&amp;#35777;&amp;#65292;&amp;#21487;&amp;#20197;&amp;#20219;&amp;#24847;&amp;#35774;&amp;#32622;(3-32&amp;#23383;&amp;#31526;),&amp;#20363;&amp;#22914;&amp;#35774;&amp;#32622;&amp;#20026;123456&amp;#10;EncodingAESKey &amp;#29992;&amp;#20110;&amp;#28040;&amp;#24687;&amp;#21152;&amp;#23494;&amp;#30340;&amp;#23494;&amp;#38053;,&amp;#25105;&amp;#20204;&amp;#28857;&amp;#20987;&amp;#21518;&amp;#38754;&amp;#30340;&amp;#38543;&amp;#26426;&amp;#29983;&amp;#25104;&amp;#28982;&amp;#21518;&amp;#35760;&amp;#19979;&amp;#26469;&amp;#23601;&amp;#22909;&amp;#12290;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Ok,现在我们有3个参数:AppID,Token和EncodingAESKey，然后我们在本地新建Nodejs服务器。&lt;/p&gt;
&lt;p&gt;我们使用Express-generator快捷地生成一个可用的服务器,nodemon用来启动服务器:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ express -e weixin_server&amp;#10;$ cd weixin_server &amp;#38;&amp;#38; npm install&amp;#10;$ npm install --save nodemon&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在weixin_server中新建文件Makefile和config.js,分别用来自动化构建服务器以及配置服务器:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ touch Makefile config.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;建好的工程的目录如下:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; app.js&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; bin&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; config.js&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; makefile&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; node_modules&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; package.json&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; public&amp;#10;&amp;#9500;&amp;#9472;&amp;#9472; routes&amp;#10;&amp;#9492;&amp;#9472;&amp;#9472; views&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在config.js中写入刚刚我们获得的3个参数:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var config = &amp;#123;&amp;#10;    token: &amp;#39;xxxxxxx&amp;#39;,&amp;#10;    appid: &amp;#39;xxxxxxxxxxx&amp;#39;,&amp;#10;    encodingAESKey: &amp;#39;xxxxxxxxxxxxxxxxxxxxxxxx&amp;#39;&amp;#10;&amp;#125;;&amp;#10;module.exports = config;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在Makefile中写入运行命令,这里我们设置运行端口为80，目前微信只支持80:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;run :&amp;#10;&amp;#9;@PORT=80 ./node_modules/.bin/nodemon ./bin/www&amp;#10;.PHONY: run&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在routes文件夹中新建我们用来处理微信消息的路由wechat.js&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ cd routes &amp;#38;&amp;#38; touch wechat.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在app.js中的routes和users变量下添加我们处理微信消息的路由wechat,并配置使用该路由&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var routes = require(&amp;#39;./routes/index&amp;#39;);&amp;#10;var users = require(&amp;#39;./routes/users&amp;#39;);&amp;#10;var wechat = require(&amp;#39;./routes/wechat&amp;#39;);&amp;#10;&amp;#10;...&amp;#10;&amp;#10;app.use(&amp;#39;/&amp;#39;, routes);&amp;#10;app.use(&amp;#39;/users&amp;#39;, users);&amp;#10;app.use(&amp;#39;/wechat&amp;#39;,wechat);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;下面我们安装wechat模块，这是卜灵大叔写的用于和微信服务器进行通信的Nodejs模块&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install --save wechat&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后在我们的wechat.js中填入以下代码:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var express = require(&amp;#39;express&amp;#39;);&amp;#10;var router = express.Router();&amp;#10;&amp;#10;var wechat = require(&amp;#39;wechat&amp;#39;);&amp;#10;var config = require(&amp;#39;../config.js&amp;#39;);&amp;#10;&amp;#10;router.use(&amp;#39;/&amp;#39;, wechat(config, function (req, res, next) &amp;#123;&amp;#10;    // &amp;#24494;&amp;#20449;&amp;#36755;&amp;#20837;&amp;#20449;&amp;#24687;&amp;#37117;&amp;#22312;req.weixin&amp;#19978;&amp;#10;    var message = req.weixin;&amp;#10;    if (message.FromUserName === &amp;#39;diaosi&amp;#39;) &amp;#123;&amp;#10;        // &amp;#22238;&amp;#22797;&amp;#23628;&amp;#19997;(&amp;#26222;&amp;#36890;&amp;#22238;&amp;#22797;)&amp;#10;        res.reply(&amp;#39;hehe&amp;#39;);&amp;#10;    &amp;#125; else if (message.FromUserName === &amp;#39;text&amp;#39;) &amp;#123;&amp;#10;        //&amp;#20320;&amp;#20063;&amp;#21487;&amp;#20197;&amp;#36825;&amp;#26679;&amp;#22238;&amp;#22797;text&amp;#31867;&amp;#22411;&amp;#30340;&amp;#20449;&amp;#24687;&amp;#10;        res.reply(&amp;#123;&amp;#10;            content: &amp;#39;text object&amp;#39;,&amp;#10;            type: &amp;#39;text&amp;#39;&amp;#10;        &amp;#125;);&amp;#10;    &amp;#125; else if (message.FromUserName === &amp;#39;hehe&amp;#39;) &amp;#123;&amp;#10;        // &amp;#22238;&amp;#22797;&amp;#19968;&amp;#27573;&amp;#38899;&amp;#20048;&amp;#10;        res.reply(&amp;#123;&amp;#10;            type: &amp;#34;music&amp;#34;,&amp;#10;            content: &amp;#123;&amp;#10;                title: &amp;#34;&amp;#26469;&amp;#27573;&amp;#38899;&amp;#20048;&amp;#21543;&amp;#34;,&amp;#10;                description: &amp;#34;&amp;#19968;&amp;#26080;&amp;#25152;&amp;#26377;&amp;#34;,&amp;#10;                musicUrl: &amp;#34;http://mp3.com/xx.mp3&amp;#34;,&amp;#10;                hqMusicUrl: &amp;#34;http://mp3.com/xx.mp3&amp;#34;,&amp;#10;                thumbMediaId: &amp;#34;thisThumbMediaId&amp;#34;&amp;#10;            &amp;#125;&amp;#10;        &amp;#125;);&amp;#10;    &amp;#125; else &amp;#123;&amp;#10;        // &amp;#22238;&amp;#22797;&amp;#39640;&amp;#23500;&amp;#24069;(&amp;#22270;&amp;#25991;&amp;#22238;&amp;#22797;)&amp;#10;        res.reply([&amp;#10;            &amp;#123;&amp;#10;                title: &amp;#39;&amp;#20320;&amp;#26469;&amp;#25105;&amp;#23478;&amp;#25509;&amp;#25105;&amp;#21543;&amp;#39;,&amp;#10;                description: &amp;#39;&amp;#36825;&amp;#26159;&amp;#22899;&amp;#31070;&amp;#19982;&amp;#39640;&amp;#23500;&amp;#24069;&amp;#20043;&amp;#38388;&amp;#30340;&amp;#23545;&amp;#35805;&amp;#39;,&amp;#10;                picurl: &amp;#39;http://nodeapi.cloudfoundry.com/qrcode.jpg&amp;#39;,&amp;#10;                url: &amp;#39;http://nodeapi.cloudfoundry.com/&amp;#39;&amp;#10;            &amp;#125;&amp;#10;        ]);&amp;#10;    &amp;#125;&amp;#10;&amp;#125;));&amp;#10;&amp;#10;module.exports = router;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这是wechat模块给的示例代码，我们暂时先用着，下面我们部署服务器,首先将该服务器上传到github或者任何能够从远程部署代码的代码托管服务商上。以github为例新增.gitignore防止将node_modules和.DS_Store上传到服务器:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;node_modules&amp;#10;example&amp;#10;.DS_Store&amp;#10;coverage&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后在github新建工程上传，不赘述。&lt;/p&gt;
&lt;p&gt;在阿里云上clone我们刚刚上传的工程, 然后用make命令运行&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git clone git@github.com:rdmclin2/weixin_server.git&amp;#10;$ cd wexin_server &amp;#38;&amp;#38; npm install&amp;#10;$ make run&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;ok,我们继续到微信公众平台 -&amp;gt; 开发 -&amp;gt; 基本配置,填入&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;URL : &amp;#60;your ip&amp;#62;/wechat&amp;#10;Token : &amp;#60;your token&amp;#62;&amp;#10;EncodingAESKey: &amp;#60;your EncodingAESKey&amp;#62;&amp;#10;&amp;#28040;&amp;#24687;&amp;#21152;&amp;#35299;&amp;#23494;&amp;#26041;&amp;#24335; : &amp;#23433;&amp;#20840;&amp;#27169;&amp;#24335;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;点击提交,完成接入。&lt;/p&gt;
&lt;h1 id=&quot;github&quot;&gt;github&lt;/h1&gt;&lt;p&gt;本篇示例代码已经上传到github&lt;a href=&quot;https://github.com/rdmclin2/weixin_server&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;weixin_server&lt;/a&gt;，欢迎各种拍砖提issue。&lt;/p&gt;
&lt;h1 id=&quot;本地调试&quot;&gt;本地调试&lt;/h1&gt;&lt;p&gt;微信消息不能发到内网ip上，这给本地调试带来了很多困难，要在本地接受微信服务器的消息需要用拥有公网IP的主机转发来实现内网穿透。现在很多方案总的来说就是使用ngrok，不过这玩意不幸被墙，不过它是开源的，提供了1.0的源码。&lt;/p&gt;
&lt;p&gt;一种方案就是自己在vps配置上配置ngrok,适合喜欢折腾的人,可以参考&lt;a href=&quot;https://imququ.com/post/self-hosted-ngrokd.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;搭建 ngrok 服务实现内网穿透&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;另一种方案就是别人在自己的vps上已经配置好了，用的时候它给你分配一个子域名给你使用。国内有&lt;a href=&quot;http://natapp.cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;natapp&lt;/a&gt;,更接腾讯地气的是用QQ浏览器的微信本地调试插件详见&lt;a href=&quot;http://blog.qqbrowser.cc/wei-xin-gong-zhong-hao-ben-di-diao-shi/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.qqbrowser.cc/wei-xin-gong-zhong-hao-ben-di-diao-shi/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近申请了一个阿里云服务器,尝试着在上面用Nodejs搞个微信公众号机器人玩玩，申请了个人公众账号【技术栈】，你可以加关注然后尝试机器人的效果,虽然它现在还只会回“你来我家接我吧”,而且你看到的时候也不知道这服务器还在不在=。=.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="nodejs" scheme="http://www.mclspace.com/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://www.mclspace.com/tags/nodejs/"/>
    
      <category term="weixin" scheme="http://www.mclspace.com/tags/weixin/"/>
    
  </entry>
  
  <entry>
    <title>在阿里云上搭建Nodejs开发环境</title>
    <link href="http://www.mclspace.com/2015/12/09/nodejs-aliyun-build-environment/"/>
    <id>http://www.mclspace.com/2015/12/09/nodejs-aliyun-build-environment/</id>
    <published>2015-12-08T17:12:39.000Z</published>
    <updated>2015-12-09T03:25:22.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本机环境为ubuntu 14.04,搭建过程包括安装Nvm &amp;amp; Nodejs，安装Mongodb，配置git以及导入工程并启动服务器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;安装Nvm_&amp;amp;_Nodejs&quot;&gt;安装Nvm &amp;amp; Nodejs&lt;/h1&gt;&lt;p&gt;首先更新阿里云的apt-get库&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ apt-get update&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后安装curl工具&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ apt-get insrall curl&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;安装&lt;a href=&quot;https://github.com/creationix/nvm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nvm&lt;/a&gt;包管理工具&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.29.0/install.sh | bash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;退出该终端重新进入让环境变量起作用,或者使用source命令&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ source .bashrc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;安装4.2(LTS)版本的Nodejs&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ nvm install 4.2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用4.2版本&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ nvm use 4.2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;设置默认node版本为4.2&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$nvm alias default 4.2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;安装nodejs的时候会自动将npm安装好，设置npm源为国内淘宝源,国外源太慢&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm config set registry https://registry.npm.taobao.org&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;安装pm2，pm2可以监控我们的服务器在后台运行，并让我们的服务器在crash掉的时候重启。（非最佳方案，后续修改）&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install pm2 -g&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;到这里nodejs环境就搭好了。&lt;br&gt;附&lt;a href=&quot;http://pm2.keymetrics.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pm2使用命令&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 start ./bin/www &amp;#21551;&amp;#21160;&amp;#10;$ pm2 monit &amp;#30417;&amp;#25511;&amp;#10;$ pm2 stop &amp;#20851;&amp;#38381;&amp;#10;$ pm2 restart &amp;#37325;&amp;#21551;&amp;#10;$ pm2 delete &amp;#21024;&amp;#38500;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;安装Mongodb&quot;&gt;&lt;a href=&quot;https://docs.mongodb.org/manual/tutorial/install-mongodb-on-ubuntu/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;安装Mongodb&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;导入mongodb公钥&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;生成mongodb列表&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;echo &amp;#34;deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.0 multiverse&amp;#34; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.0.list&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;更新包&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get update&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;安装最新稳定版&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install -y mongodb-org&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;安装完成.&lt;/p&gt;
&lt;p&gt;附启动关闭命令&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo service mongod start&amp;#10;$ sudo service mongod stop&amp;#10;$ cat /var/log/mongodb/mongod.log&amp;#10;$ sudo service mongod restart&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;附卸载步骤&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo service mongod stop&amp;#10;$ sudo apt-get purge mongodb-org*&amp;#10;$ sudo rm -r /var/log/mongodb&amp;#10;$ sudo rm -r /var/lib/mongodb&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;配置git&quot;&gt;配置git&lt;/h1&gt;&lt;p&gt;安装git&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ apt-get install git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;产生&lt;code&gt;.ssh&lt;/code&gt;文件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ssh-keygen&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;将.ssh文件夹中的id_rsa.pub中的公钥放到你的github或gitlab的key列表中。&lt;/p&gt;
&lt;p&gt;如果有gitlab配置文件参考以下步骤:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ vim config&amp;#10;# &amp;#20889;&amp;#20837;&amp;#22914;&amp;#19979;&amp;#20449;&amp;#24687;,&amp;#20855;&amp;#20307;&amp;#24773;&amp;#20917;&amp;#32780;&amp;#23450;&amp;#10;host lab.artemisprojects.org&amp;#10;hostname lab.artemisprojects.org&amp;#10;port 2222&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;导入工程并启动服务器&quot;&gt;导入工程并启动服务器&lt;/h1&gt;&lt;p&gt;从github或gitlab中导入工程，并切换到server目录下&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git clone xxxx@xxx.git&amp;#10;$ cd server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;安装node_modules生产环境依赖&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install --production&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用pm2启动服务器&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 start ./bin/www&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;完成。&lt;/p&gt;
&lt;!--运行初始化脚本
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ node ./bin/init_users.js&amp;#10;$ node ./bin/init_contacts.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;—&amp;gt;&lt;/p&gt;
--&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本机环境为ubuntu 14.04,搭建过程包括安装Nvm &amp;amp; Nodejs，安装Mongodb，配置git以及导入工程并启动服务器。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="nodejs" scheme="http://www.mclspace.com/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://www.mclspace.com/tags/nodejs/"/>
    
      <category term="vps" scheme="http://www.mclspace.com/tags/vps/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs中connect-flash的使用</title>
    <link href="http://www.mclspace.com/2015/12/03/nodejs-flash-note/"/>
    <id>http://www.mclspace.com/2015/12/03/nodejs-flash-note/</id>
    <published>2015-12-03T06:41:10.000Z</published>
    <updated>2016-01-16T15:55:16.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;connect-flash&lt;/code&gt;是Nodejs的一个模块，简单来说，flash是一个暂存器，而且暂存器里面的值使用过一次即被清空，这样的特性很方面用来做网站的提示信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;connect-flash简介&quot;&gt;connect-flash简介&lt;/h1&gt;&lt;p&gt;&lt;code&gt;connect-flash&lt;/code&gt;是Nodejs的一个模块，简单来说，flash是一个暂存器，而且暂存器里面的值使用过一次即被清空，这样的特性很方面用来做网站的提示信息。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The flash is a special area of the session used for storing messages. Messages are written to the flash and cleared after being displayed to the user. The flash is typically used in combination with redirects, ensuring that the message is available to the next page that is to be rendered.&lt;/p&gt;
&lt;p&gt;注意flash要配合session使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;如何使用&quot;&gt;如何使用&lt;/h1&gt;&lt;p&gt;首先安装&lt;code&gt;connect-flash&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install --save connect-flash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后在app.js中引入:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;flash = require(&amp;#39;connect-flash&amp;#39;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在app中使用该中间件&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;app.use(flash());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将flash中存入的变量存入res.locals变量中,例如我要在网站中使用flash中存的error和success变量，就可以把它们存入到locals变量中，这样所有的模板都可以拿到这个变量。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;app.use(function (req,res,next) &amp;#123;&amp;#10;    console.log(&amp;#34;app.usr local&amp;#34;);&amp;#10;    res.locals.user = req.session.user;&amp;#10;&amp;#10;    var err = req.flash(&amp;#39;error&amp;#39;);&amp;#10;    res.locals.error = err.length ? err: null;&amp;#10;&amp;#10;    var success = req.flash(&amp;#39;success&amp;#39;);&amp;#10;    res.locals.success = success.length ? success : null;&amp;#10;&amp;#10;    next();&amp;#10;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;应用程序本地变量会附加给所有的在这个应用程序内渲染的模板。 这是一个非常有用的模板函数，就像应用程序级数据一样。app.locals 对象是一个JavaScript Function, 执行的时候它会把属性合并到它自身，提供了一种简单展示已有对象作为本地变量的方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后在页面中加入根据success和error是否存在给用户相应的提示,例如这里我们在main标签下判断success和error，如果有值，给出相应的提示:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;main&amp;#62;&amp;#10;    &amp;#60;% if (success) &amp;#123; %&amp;#62;&amp;#10;    &amp;#60;div class=&amp;#34;alert alert-success&amp;#34;&amp;#62;&amp;#10;        &amp;#60;%= success %&amp;#62;&amp;#10;    &amp;#60;/div&amp;#62;&amp;#10;    &amp;#60;% &amp;#125; %&amp;#62;&amp;#10;    &amp;#60;% if (error) &amp;#123; %&amp;#62;&amp;#10;    &amp;#60;div class=&amp;#34;alert alert-error&amp;#34;&amp;#62;&amp;#10;        &amp;#60;%= error %&amp;#62;&amp;#10;    &amp;#60;/div&amp;#62;&amp;#10;&amp;#60;% &amp;#125; %&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在页面跳转之前给success和error赋值，就可以让它们获得相应的变量，显示给用户之后，这些变量会被清空。例如:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;router.post(&amp;#39;/login&amp;#39;,function(req,res,next)&amp;#123;&amp;#10;    var name = req.body.username;&amp;#10;    var password = req.body.password;&amp;#10;    if(name === config.admin.username &amp;#38;&amp;#38; password === config.admin.password) &amp;#123;&amp;#10;        req.flash(&amp;#39;success&amp;#39;,&amp;#34;&amp;#30331;&amp;#24405;&amp;#25104;&amp;#21151;!&amp;#34;);&amp;#10;        res.render(&amp;#39;index&amp;#39;, &amp;#123;title: &amp;#34;&amp;#21518;&amp;#21488;&amp;#31649;&amp;#29702;&amp;#31243;&amp;#24207;&amp;#34;&amp;#125;);&amp;#10;    &amp;#125;else&amp;#123;&amp;#10;        req.flash(&amp;#39;error&amp;#39;,&amp;#34;&amp;#29992;&amp;#25143;&amp;#21517;&amp;#25110;&amp;#23494;&amp;#30721;&amp;#38169;&amp;#35823;&amp;#34;);&amp;#10;        res.redirect(&amp;#39;/login&amp;#39;);&amp;#10;    &amp;#125;&amp;#10;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;connect-flash&lt;/code&gt;是Nodejs的一个模块，简单来说，flash是一个暂存器，而且暂存器里面的值使用过一次即被清空，这样的特性很方面用来做网站的提示信息。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="nodejs" scheme="http://www.mclspace.com/categories/nodejs/"/>
    
    
      <category term="express" scheme="http://www.mclspace.com/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>凤城卫士Ionic客户端实现</title>
    <link href="http://www.mclspace.com/2015/11/28/fcws-ionic-implementation/"/>
    <id>http://www.mclspace.com/2015/11/28/fcws-ionic-implementation/</id>
    <published>2015-11-28T06:09:10.000Z</published>
    <updated>2016-02-16T17:01:48.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本篇为Ionic App 系列教程的客户端实现部分,我们使用Ionic框架进行客户端实现，Ionic本身依赖Ionic和AngularJS。&lt;/p&gt;
&lt;p&gt;我已经把项目文件整理起来放到github仓库&lt;a href=&quot;git@github.com:rdmclin2/fcws-ionic.git&quot;&gt;fcws-ionic&lt;/a&gt;上了，供大家参考。&lt;br&gt;本文的后端实现为Nodejs+Mongoose+Express,放在github仓库&lt;a href=&quot;git@github.com:rdmclin2/fcws-backend.git&quot;&gt;fcws-backend&lt;/a&gt;中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;工程文件结构&quot;&gt;工程文件结构&lt;/h1&gt;&lt;p&gt;首先我们来讲解客户端的代码结构，代码结构如下所示:&lt;br&gt;&lt;img src=&quot;http://7pun7p.com1.z0.glb.clouddn.com/hexo/client.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图中工程结构部分大部分为ionic框架自动生成的部分，我们编写代码主要是在www文件夹中，因此下面我们解析www的文件结构，如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;css 该文件夹存放css文件，css文件可以用来修改页面显示的效果&lt;/li&gt;
&lt;li&gt;img 该文件夹存放图片文件，工程中所有引用的图片都放在这个文件夹中&lt;/li&gt;
&lt;li&gt;js 该文件夹主要存放工程的逻辑代码&lt;/li&gt;
&lt;li&gt;controllers js的子文件夹，该文件夹存放每个页面的控制逻辑&lt;/li&gt;
&lt;li&gt;services js的子文件夹，该文件夹存放工程共有的任务，我们称为服务。&lt;/li&gt;
&lt;li&gt;utils js的子文件夹，该文件夹存放工具类.&lt;/li&gt;
&lt;li&gt;app.js js的子文件夹，该文件是angularjs的入口文件，配置了工程相关属性，如路由控制等&lt;/li&gt;
&lt;li&gt;templates 该文件夹存放所有的UI界面，均为html文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;创建项目&quot;&gt;创建项目&lt;/h1&gt;&lt;p&gt;使用ionic的start命令初始化工程&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ionic start express_client sidemenu&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该命令会帮你初始化一个工程，添加ionic的项目组件，并用sidemenu项目初始化。sidemenu是一个示例文件，帮助开发者开速地开始工程构建，默认添加侧边栏效果。ionic给我们提供了很多方便的命令，如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ ionic setup sass&lt;/code&gt; 添加sass支持&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ ionic serve&lt;/code&gt; 在浏览器中实时查看&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ ionic platform add ios [android]&lt;/code&gt; 添加相关平台&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ ionic build &amp;lt;PLATFORM&amp;gt;&lt;/code&gt; 编译具体的某个平台&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ ionic emulate &amp;lt;PLATFORM&amp;gt;&lt;/code&gt; 在模拟器中运行程序&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ ionic run &amp;lt;PLATFORM&amp;gt;&lt;/code&gt; 在真机上运行程序&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;创建工具类&quot;&gt;创建工具类&lt;/h1&gt;&lt;p&gt;在我们的utils文件夹中有一个storage.js的类，这个类用来提供我们应用的本地存储，本地存储是区别于数据库的持久化存储的一种存储方式，我们将数据存储在本地，即使没有网络，在下次打开应用的时候，仍然能够读取到之前浏览的数据.其代码如下所示:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;angular.module(&amp;#39;fcws.utils&amp;#39;, [])&amp;#10;&amp;#10;.factory(&amp;#39;$localstorage&amp;#39;, [&amp;#39;$window&amp;#39;, function($window) &amp;#123;&amp;#10;  return &amp;#123;&amp;#10;    set: function(key, value) &amp;#123;&amp;#10;      $window.localStorage[key] = JSON.stringify(value);&amp;#10;    &amp;#125;,&amp;#10;    get: function(key) &amp;#123;&amp;#10;      return JSON.parse($window.localStorage[key] || &amp;#39;&amp;#123;&amp;#125;&amp;#39;);&amp;#10;    &amp;#125;,&amp;#10;    remove: function(key) &amp;#123;&amp;#10;      return window.localStorage.removeItem(key);&amp;#10;    &amp;#125;&amp;#10;  &amp;#125;;&amp;#10;&amp;#125;]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们创建了一个$localStorage的工厂类,并添加了set,get,remove的方法分别为设置，获取，移除本地存储的键值对。&lt;/p&gt;
&lt;h1 id=&quot;入口页面&quot;&gt;入口页面&lt;/h1&gt;&lt;p&gt;www文件夹下的index.html是我们的默认入口页面，在创建工程时默认会创建，在该页面中我们可以加载自己的脚本。要使用angular和ionic我们需要加载ionic库:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;!-- ionic/angularjs js    --&amp;#62;&amp;#10;&amp;#60;script src=&amp;#34;lib/ionic/js/ionic.bundle.js&amp;#34;&amp;#62;&amp;#60;/script&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ionic库中包含angular的脚本，因此这里我们不需要重复加载angular。然后加载cordova.js库:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;!-- cordova script (this will be a 404 during development) --&amp;#62;&amp;#10;&amp;#60;script src=&amp;#34;cordova.js&amp;#34;&amp;#62;&amp;#60;/script&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;cordova库给予了js以访问设备底层api的能力，使hybird app的概念称为可能。然后加载css资源:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;link href=&amp;#34;lib/ionic/css/ionic.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34;&amp;#62;&amp;#10;&amp;#60;link href=&amp;#34;css/style.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34;&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里我们用到了ionic提供的ionic.css文件，我们自己的样式css定义在style.css文件中。然后加载我们的app.js:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;!-- your app&amp;#39;s js --&amp;#62;&amp;#10;&amp;#60;script src=&amp;#34;js/app.js&amp;#34;&amp;#62;&amp;#60;/script&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这是我们应用的入口文件，这里定义了和应用有关的各个部分。最后所有的我们用到的控制器和服务等都在这里进行加载,由于数量过多，例举如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;!-- services: --&amp;#62;&amp;#10;&amp;#60;script src=&amp;#34;js/services/API.js&amp;#34;&amp;#62;&amp;#60;/script&amp;#62;&amp;#10;&amp;#60;script src=&amp;#34;js/services/Camera.js&amp;#34;&amp;#62;&amp;#60;/script&amp;#62;&amp;#10;&amp;#60;script src=&amp;#34;js/services/Docs.js&amp;#34;&amp;#62;&amp;#60;/script&amp;#62;&amp;#10;...&amp;#10;&amp;#60;!-- controllers --&amp;#62;&amp;#10;&amp;#60;script src=&amp;#34;js/controllers/auth/auth.js&amp;#34;&amp;#62;&amp;#60;/script&amp;#62;&amp;#10;&amp;#60;script src=&amp;#34;js/controllers/auth/login.js&amp;#34;&amp;#62;&amp;#60;/script&amp;#62;&amp;#10;&amp;#60;script src=&amp;#34;js/controllers/auth/signup.js&amp;#34;&amp;#62;&amp;#60;/script&amp;#62;&amp;#10;...&amp;#10;&amp;#60;!-- utils --&amp;#62;&amp;#10;&amp;#60;script src=&amp;#34;js/utils/storage.js&amp;#34;&amp;#62;&amp;#60;/script&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;之后我们需要用ng-app指令来定义angular应用的边界:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;body ng-app=&amp;#34;fcws&amp;#34;&amp;#62;&amp;#10;&amp;#60;ion-nav-view &amp;#62;&amp;#60;/ion-nav-view&amp;#62;&amp;#10;&amp;#60;/body&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里我们应用的边界为body,用名为fcws的app进行管理。&lt;/p&gt;
&lt;h1 id=&quot;app-js&quot;&gt;app.js&lt;/h1&gt;&lt;p&gt;app.js是应用的配置文件，在这里我们定义app的名字，加载对应的服务，进行相应的设置，设定页面的路由，配置服务器常量。下面分部分具体描述。&lt;/p&gt;
&lt;h2 id=&quot;定义app顶层模块&quot;&gt;定义app顶层模块&lt;/h2&gt;&lt;p&gt;下面的代码使用angular.module声明了一个名为fcws的模块，该模块即我们上文中ng-app使用的app的名称，app名称后面的类是该模块依赖的其他模块，这种方式叫依赖注入。ionic模块是ionic提供的模块,以fcws开头的是我们为该app编写的控制器，服务器，工具模块，其他模块为导入的库模块。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;angular.module(&amp;#39;fcws&amp;#39;, [&amp;#10;  &amp;#39;ionic&amp;#39;,&amp;#10;  &amp;#39;fcws.controllers&amp;#39;,&amp;#10;  &amp;#39;fcws.services&amp;#39;,&amp;#10;  &amp;#39;fcws.utils&amp;#39;,&amp;#10;  &amp;#39;angularMoment&amp;#39;,&amp;#10;  &amp;#39;ngCordova&amp;#39;&amp;#10;])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;运行配置&quot;&gt;运行配置&lt;/h2&gt;&lt;p&gt;下面代码中的run是ionic用来配置app运行设置的函数，一些配置项可以在应用启动前进行配置，例如&lt;code&gt;amMoment.changeLocale(&amp;#39;zh-cn&amp;#39;);&lt;/code&gt;这句代码配置amMoment模块的时区为zh-cn即中国。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.run(function($ionicPlatform,amMoment) &amp;#123;&amp;#10;  // change language to zh-cn&amp;#10;  amMoment.changeLocale(&amp;#39;zh-cn&amp;#39;);&amp;#10;&amp;#10;  $ionicPlatform.ready(function() &amp;#123;&amp;#10;&amp;#10;    // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard&amp;#10;    // for form inputs)&amp;#10;    if (window.cordova &amp;#38;&amp;#38; window.cordova.plugins.Keyboard) &amp;#123;&amp;#10;      cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);&amp;#10;    &amp;#125;&amp;#10;    if (window.StatusBar) &amp;#123;&amp;#10;      StatusBar.styleDefault();&amp;#10;    &amp;#125;&amp;#10;  &amp;#125;);&amp;#10;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;路由&quot;&gt;路由&lt;/h2&gt;&lt;p&gt;各个页面的路由也在app.js中的config函数中配置,我们使用angular提供的$stateProvider, $urlRouterProvider进行状态路由配置，一个状态由它的状态名，对应的url，对应的页面文件的url和一个用于控制的控制器组成。一些状态可能不止一个UI界面区域，需要用views{}进行组合。该函数是整个app的胶水，将控制器，界面和url绑定在了一起。$ionicConfigProvider是ionic提供的ionic界面的控制器,这里我们使用该模块将界面中的标题全部居中，默认情况下安卓偏左，ios居中，我们使用该代码获得一致的体验。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.config(function($stateProvider, $urlRouterProvider,$ionicConfigProvider) &amp;#123;&amp;#10;&amp;#10;  $ionicConfigProvider.navBar.alignTitle(&amp;#39;center&amp;#39;);&amp;#10;&amp;#10;  $stateProvider&amp;#10;  // login page&amp;#10;  .state(&amp;#39;signin&amp;#39;, &amp;#123;&amp;#10;    url: &amp;#34;/signin&amp;#34;,&amp;#10;    templateUrl: &amp;#39;templates/auth/signin.html&amp;#39;,&amp;#10;    controller: &amp;#39;LogInCtrl&amp;#39;&amp;#10;  &amp;#125;)&amp;#10;&amp;#10;  .state(&amp;#39;sidemenu.changepw&amp;#39;, &amp;#123;&amp;#10;    url: &amp;#34;/changepw&amp;#34;,&amp;#10;    views: &amp;#123;&amp;#10;      &amp;#39;menuContent&amp;#39;: &amp;#123;&amp;#10;        templateUrl: &amp;#39;templates/auth/changepw.html&amp;#39;,&amp;#10;        controller: &amp;#39;ChangepwCtrl&amp;#39;&amp;#10;        &amp;#125;&amp;#10;      &amp;#125;&amp;#10;    &amp;#125;)&amp;#10;  ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;服务器常量配置&quot;&gt;服务器常量配置&lt;/h2&gt;&lt;p&gt;app.js中可以用.constant定义常量,这里我们定义了SERVER常量,配置我们后面要用到的和服务器相关的常量，如api,docs等，在本地服务器和远程服务器之间进行切换。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.constant(&amp;#39;SERVER&amp;#39;, &amp;#123;&amp;#10;  // if using local server&amp;#10;   api: &amp;#39;http://localhost:9804/api/v1&amp;#39;,&amp;#10;   docs:&amp;#39;http://localhost:9804/docs&amp;#39;&amp;#10;&amp;#10;  // if using our public heroku server&amp;#10; // api: &amp;#39;http://nemoworks.info:9804/api/v1&amp;#39;,&amp;#10; // docs:&amp;#39;http://nemoworks.info:9804/docs&amp;#39;,&amp;#10;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;用户登录&quot;&gt;用户登录&lt;/h1&gt;&lt;p&gt;要实现用户登录功能,我们首先编写用户登录的页面，用户页面使用HTML编写，由于Angular的管理，我们可以在页面中插入模型和数据，将界面和后台的数据结合起来，另外ionic提供了一些区别于HTML标记的新标记，让我们可以通过Ionic渲染界面，具体的用户界面如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;ion-view&amp;#62;&amp;#10;  &amp;#60;ion-header-bar class=&amp;#34;bar-positive&amp;#34; align-title=&amp;#34;center&amp;#34;&amp;#62;&amp;#10;    &amp;#60;h1 class=&amp;#34;title&amp;#34;&amp;#62;&amp;#30331;&amp;#24405;&amp;#60;/h1&amp;#62;&amp;#10;  &amp;#60;/ion-header-bar&amp;#62;&amp;#10;&amp;#10;  &amp;#60;ion-content class=&amp;#34;signup-page&amp;#34; scroll=&amp;#34;false&amp;#34;&amp;#62;&amp;#10;    &amp;#60;label class=&amp;#34;item item-input username&amp;#34;&amp;#62;&amp;#10;      &amp;#60;i class=&amp;#34;icon ion-ios-person-outline positive&amp;#34;&amp;#62;&amp;#60;/i&amp;#62;&amp;#10;      &amp;#60;input type=&amp;#34;text&amp;#34; placeholder=&amp;#34;&amp;#32534;&amp;#21495;&amp;#34; ng-model=&amp;#34;user.id&amp;#34;&amp;#62;&amp;#10;    &amp;#60;/label&amp;#62;&amp;#10;    &amp;#60;br&amp;#62;&amp;#10;    &amp;#10;    &amp;#60;label class=&amp;#34;item item-input lock&amp;#34;&amp;#62;&amp;#10;      &amp;#60;i class=&amp;#34;icon ion-ios-locked-outline balanced&amp;#34;&amp;#62;&amp;#60;/i&amp;#62;&amp;#10;      &amp;#60;input type=&amp;#34;password&amp;#34; placeholder=&amp;#34;&amp;#23494;&amp;#30721;&amp;#34; ng-model=&amp;#34;user.password&amp;#34;&amp;#62;&amp;#10;    &amp;#60;/label&amp;#62;&amp;#10;      &amp;#10;    &amp;#60;button class=&amp;#34;button button-block button-positive&amp;#34; ng-click=&amp;#34;validateUser()&amp;#34;&amp;#62;&amp;#10;      &amp;#30331;&amp;#24405;&amp;#10;    &amp;#60;/button&amp;#62;&amp;#10;&amp;#10;  &amp;#60;/ion-content&amp;#62;&amp;#10;&amp;#60;/ion-view&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的代码中我们使用&lt;ion-view&gt;定义了一个ionic类型的视图,&lt;ion-header-bar&gt;定义了一个顶部栏,&lt;ion-content&gt;定义了内容区域，另外class中的item,item-input,button-block等类型也是ionic特定的类型，添加这些类型之后可以获得我们想要的效果。另外注意到ng-model这个标记，这个标记将页面上的input的数据和后台的数据联系起来了，在后台改变该数据，页面也会刷新，在页面上改变该数据，后台也会刷新该数据，这种特性称为双向绑定。还有button标签中的ng-click，该指令允许你点击该button之后触发validateUser方法，我们用该方法来验证表单，触发登陆操作。&lt;br&gt;另外我们在该页面中还使用了css为我们的页面添加效果，如下:&lt;/ion-content&gt;&lt;/ion-header-bar&gt;&lt;/ion-view&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.signup-page &amp;#123;&amp;#10;  text-align: center;&amp;#10;  background-size: cover;&amp;#10;  background-repeat: no-repeat;&amp;#10;  background-position: center;&amp;#10;&amp;#125;&amp;#10;&amp;#10;.signup-page &amp;#123;&amp;#10;  width: 88%;&amp;#10;  margin: 20% auto 30px auto;&amp;#10;&amp;#125;&amp;#10;&amp;#10;.signup-page label.username&amp;#123;&amp;#10;    border-top: 0;&amp;#10;    border-bottom: 1px solid rgb(81,122,245);&amp;#10;&amp;#125;&amp;#10;&amp;#10;.signup-page label.lock&amp;#123;&amp;#10;    border-top: 0;&amp;#10;    border-bottom: 1px solid rgb(131,209,118);&amp;#10;&amp;#125;&amp;#10;&amp;#10;.signup-page  label.username i,.signup-page label.lock i&amp;#123;&amp;#10;  margin-right: 15px;&amp;#10;  font-size: 25px;&amp;#10;&amp;#125;&amp;#10;&amp;#10;.signup-page .button &amp;#123;&amp;#10;  margin: 20px auto;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了在载入应用之后首先进入登陆页面，我们在app.js中的.config函数中增加如下语句:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$urlRouterProvider.otherwise(&amp;#39;/signin&amp;#39;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这句代码表示在没有指定url的情况下，默认进入signin状态,下面我们定义signin状态:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.state(&amp;#39;signin&amp;#39;, &amp;#123;&amp;#10;  url: &amp;#34;/signin&amp;#34;,&amp;#10;  templateUrl: &amp;#39;templates/auth/signin.html&amp;#39;,&amp;#10;  controller: &amp;#39;LogInCtrl&amp;#39;&amp;#10;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这段代码定义了一个称为signin的状态，这个状态对应的url为&lt;ip signin=&quot;&quot;&gt;,该url对应的页面的地址为templates/auth/signin.html,该状态对应的控制器为LogInCtrl。下面我们定义LogInCtrl,代码如下:&lt;/ip&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;angular.module(&amp;#39;fcws.controllers&amp;#39;)&amp;#10;/*&amp;#10;Controller for the User page&amp;#10;*/&amp;#10;.controller(&amp;#39;LogInCtrl&amp;#39;, function($rootScope, $scope, $window,User,API) &amp;#123;&amp;#10;    // if the user is already logged in, take him to his dashboard&amp;#10;    if (User.isAuthenticated()) &amp;#123;&amp;#10;      $window.location.href = (&amp;#39;#/sidemenu/dashboard&amp;#39;);&amp;#10;    &amp;#125;&amp;#10;        &amp;#10;    $scope.user = &amp;#123;&amp;#10;      id : &amp;#34;&amp;#34;,&amp;#10;      password : &amp;#34;&amp;#10;    &amp;#34;&amp;#10;    &amp;#125;;&amp;#10;  $scope.validateUser = function() &amp;#123;&amp;#10;    var id = this.user.id;&amp;#10;    var password = this.user.password;&amp;#10;    if (!id || !password) &amp;#123;&amp;#10;      $rootScope.notify(&amp;#34;&amp;#35831;&amp;#36755;&amp;#20837;&amp;#23436;&amp;#25972;&amp;#20449;&amp;#24687;&amp;#34;);&amp;#10;      return &amp;#10;      false;&amp;#10;    &amp;#125;&amp;#10;    $rootScope.show(&amp;#39;&amp;#30331;&amp;#24405;&amp;#20013;...&amp;#35831;&amp;#31245;&amp;#20505;&amp;#39;);&amp;#10;    User.signin(&amp;#123;&amp;#10;      id: id,&amp;#10;      password: password&amp;#10;    &amp;#125;).success(function(data) &amp;#123;&amp;#10;      User.loginUser(data._id,data.id,data.name,data.title,data.belong,data.isLeader);&amp;#10;      $rootScope.hide();&amp;#10;      $window.location.href = (&amp;#39;#/sidemenu/dashboard&amp;#39;);&amp;#10;    &amp;#125;).error(function(error) &amp;#123;&amp;#10;      $rootScope.hide();&amp;#10;      $rootScope.notify(&amp;#34;&amp;#26080;&amp;#25928;&amp;#30340;&amp;#29992;&amp;#25143;&amp;#21517;&amp;#25110;&amp;#23494;&amp;#30721;&amp;#34;);&amp;#10;    &amp;#125;);&amp;#10;   &amp;#125;;&amp;#10;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;.controller(&amp;#39;LogInCtrl&amp;#39;, function($rootScope, $scope, $window,User,API) {&lt;/code&gt;这句代码表示我们定义了一个LogInCtrl控制器,该控制器包含$rootScope,$scope等依赖部件，类似于java中的import。在该控制器中我们首先判断用户是否已经授权登陆了，如果已经登陆则直接跳转到dashboard界面。$scope是目标界面的作用域，我们将数据绑定在这个对象上就能在页面中进行访问，例如这里的$scope.user,我们就可以在界面中ng-model中定义user.id访问该数据。validateUser函数用于验证用户的信息是否正确，如果没有问题则通过User服务向服务器发送登录验证，如果成功则存储用户信息，并且跳转到dashboard,如果失败，则提示用户”无效的用户名或密码”。这里用到了User服务，User是我们定义的用来存储用户信息，验证用户权限，提供和用户有关的函数的服务类。代码如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;angular.module(&amp;#39;fcws.services&amp;#39;)&amp;#10;  .factory(&amp;#39;User&amp;#39;, function($q,$localstorage,$log,$rootScope,SERVER,$http) &amp;#123;&amp;#10;    var userKey = &amp;#39;user&amp;#39;;&amp;#10;    var isAuthenticatedKey = &amp;#39;isAuthenticated&amp;#39;;&amp;#10;    var user = $localstorage.get(userKey);&amp;#10;    return &amp;#123;&amp;#10;      signin: function (form) &amp;#123;&amp;#10;          var url = SERVER.api+&amp;#39;/auth/login&amp;#39;;&amp;#10;          console.log(url);&amp;#10;          return $http.post(url, form);&amp;#10;      &amp;#125;,&amp;#10;      signup: function (form) &amp;#123;&amp;#10;          var url = SERVER.api+&amp;#39;/auth/register&amp;#39;;&amp;#10;          console.log(url);&amp;#10;          return $http.post(url, form);&amp;#10;      &amp;#125;,&amp;#10;      //confirm that the inputed password is same as the user&amp;#39;s passwod&amp;#10;      confirmPassword: function (form) &amp;#123;&amp;#10;        var url = SERVER.api+&amp;#39;/auth/confirmpw&amp;#39;;&amp;#10;        console.log(url);&amp;#10;        return $http.post(url, form);&amp;#10;      &amp;#125;,&amp;#10;      //change the password&amp;#10;      changePassword: function (form) &amp;#123;&amp;#10;        var url = SERVER.api+&amp;#39;/auth/changepw&amp;#39;;&amp;#10;        console.log(url);&amp;#10;        return $http.post(url, form);&amp;#10;      &amp;#125;,&amp;#10;      getDetail : function () &amp;#123;&amp;#10;        var token = this.getToken();&amp;#10;        var id = this.getUserId();&amp;#10;        return $http.get(SERVER.api+ &amp;#39;/user/&amp;#39; + id, &amp;#123;&amp;#10;          method: &amp;#39;GET&amp;#39;,&amp;#10;          params: &amp;#123;&amp;#10;              token: token&amp;#10;          &amp;#125;&amp;#10;        &amp;#125;);&amp;#10;      &amp;#125;,&amp;#10;      loginUser: function (_id,id,name,title,belong,isLeader) &amp;#123;&amp;#10;          $log.log(_id + &amp;#34; &amp;#34; + id + &amp;#34; &amp;#34; + name + &amp;#34; &amp;#34; + title+&amp;#34; &amp;#34;+ belong+ &amp;#34; &amp;#34;+ isLeader);&amp;#10;          $localstorage.set(userKey,&amp;#123;_id:_id,id:id,name:name,title:title,belong:belong,isLeader:isLeader&amp;#125;);&amp;#10;          $localstorage.set(isAuthenticatedKey,true);&amp;#10;          user = $localstorage.get(userKey);&amp;#10;          $rootScope.$broadcast(&amp;#39;login&amp;#39;);&amp;#10;      &amp;#125;,&amp;#10;      logoutUser: function () &amp;#123;&amp;#10;        $localstorage.remove(userKey);&amp;#10;        $localstorage.set(isAuthenticatedKey,false);&amp;#10;      &amp;#125;,&amp;#10;      isAuthenticated: function () &amp;#123;&amp;#10;          return $localstorage.get(isAuthenticatedKey);&amp;#10;      &amp;#125;,&amp;#10;      getId : function () &amp;#123;&amp;#10;          return user._id+&amp;#34;&amp;#34;;&amp;#10;      &amp;#125;,&amp;#10;      getUserId : function () &amp;#123;&amp;#10;          return user.id+&amp;#34;&amp;#34;;&amp;#10;      &amp;#125;,&amp;#10;      getUserTitle : function () &amp;#123;&amp;#10;        return user.title || &amp;#34;&amp;#34;;&amp;#10;      &amp;#125;,&amp;#10;      getUserName: function()&amp;#123;&amp;#10;          return user.name || &amp;#34;&amp;#27426;&amp;#36814;&amp;#34;;&amp;#10;      &amp;#125;,&amp;#10;      getBelong : function () &amp;#123;&amp;#10;          return user.belong;&amp;#10;      &amp;#125;,&amp;#10;      isLeader: function () &amp;#123;&amp;#10;          return user.isLeader;&amp;#10;      &amp;#125;,&amp;#10;      getToken: function () &amp;#123;&amp;#10;        //set email as token temperarily&amp;#10;          return user.id;&amp;#10;      &amp;#125;&amp;#10;    &amp;#125;;&amp;#10;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Service的定义方式和Controller很像，区别是Service会暴露出函数供其他部件使用.注意到我们定义了signup,signin，confirmPassword，changePassword，getDetail等方法，这些方法的共性是他们都需要和远程服务器进行通信，我们通过$http模块来发送http请求，该模块封装了一些基本的http方法，如get,post,delete,update等，例如post,首先我们用SERVER中的api地址构造url，和form数据一起传给$http.post方法，这样我们就向url对应的服务器地址发送了一个post请求，并且将form打包发送。服务器收到该请求后会解析该url，传送给相应的函数进行处理，并返回成功或失败。$http的方法会返回一个promise对象，通过该对象我们可以用.success方法和.error方法判断该请求是成功，还是失败，并进行相应的后续操作。&lt;br&gt;另外User中的loginUser和logoutUser是我们将用户数据进行本地存储的函数，当用户登录时，我们将用户数据存在本地，当用户登出时，我们销毁本地数据，注意这里用到了我们在utils文件夹中定义的$localstorage工具类。这个类用来提供我们应用的本地存储，本地存储是区别于数据库的持久化存储的一种存储方式，我们将数据存储在本地，即使没有网络，在下次打开应用的时候，仍然能够读取到之前浏览的数据.到这里，一个用户登录的过程就基本结束了。&lt;/p&gt;
&lt;h1 id=&quot;情报消息&quot;&gt;情报消息&lt;/h1&gt;&lt;p&gt;情报信息是本app中的重中之重，它包含了发布情报，展示情报，详细情报，情报评论，删除情报等功能。首先我们在app.js中定义和情报有关的状态:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.state(&amp;#39;sidemenu.posts&amp;#39;, &amp;#123;&amp;#10;  url: &amp;#39;/posts&amp;#39;,&amp;#10;  views: &amp;#123;&amp;#10;    &amp;#39;menuContent&amp;#39;: &amp;#123;&amp;#10;      templateUrl: &amp;#39;templates/post/list.html&amp;#39;,&amp;#10;      controller: &amp;#39;PostsCtrl&amp;#39;&amp;#10;    &amp;#125;&amp;#10;  &amp;#125;&amp;#10;&amp;#125;)&amp;#10;&amp;#10;.state(&amp;#39;sidemenu.post&amp;#39;, &amp;#123;&amp;#10;  url: &amp;#39;/posts/:post_id&amp;#39;,&amp;#10;  views: &amp;#123;&amp;#10;    &amp;#39;menuContent&amp;#39;: &amp;#123;&amp;#10;      templateUrl: &amp;#34;templates/post/detail.html&amp;#34;,&amp;#10;      controller: &amp;#39;PostCtrl&amp;#39;,&amp;#10;    &amp;#125;&amp;#10;  &amp;#125;&amp;#10;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里我们定义了两个状态，一个是sidemenu.posts,该状态的页面存放在menuContent中，对应的展示页面为list.html,相应的控制器为PostsCtrl. 另一个状态是sidemenu.post,该状态的url中有一个post_id的参数，点击具体的某个情报的列表项时，将把相应的id传给该状态，该页面向服务器请求该情报的具体信息进行展示，对应的展示页面为detail.html,控制器为PostCtrl。&lt;/p&gt;
&lt;h2 id=&quot;情报列表&quot;&gt;情报列表&lt;/h2&gt;&lt;p&gt;首先我们定义情报信息的展示界面,这里我们省略用于展示效果的css:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;ion-view view-title=&amp;#34;&amp;#24773;&amp;#25253;&amp;#20449;&amp;#24687;&amp;#34; class=&amp;#34;posts&amp;#34; &amp;#62;&amp;#10;  &amp;#60;ion-nav-buttons side=&amp;#34;left&amp;#34;&amp;#62;&amp;#10;    &amp;#60;button menu-toggle=&amp;#34;left&amp;#34; class=&amp;#34;button button-icon icon ion-navicon&amp;#34;&amp;#62;&amp;#60;/button&amp;#62;&amp;#10;  &amp;#60;/ion-nav-buttons&amp;#62;&amp;#10;  &amp;#60;ion-nav-buttons side=&amp;#34;right&amp;#34;&amp;#62;&amp;#10;    &amp;#60;a class=&amp;#34;button button-clear&amp;#34; ng-click=&amp;#34;showNewPostModal()&amp;#34;&amp;#62;&amp;#10;      &amp;#60;i class=&amp;#34;icon ion-ios-compose-outline&amp;#34;&amp;#62;&amp;#60;/i&amp;#62;&amp;#10;    &amp;#60;/a&amp;#62;&amp;#10;  &amp;#60;/ion-nav-buttons&amp;#62;&amp;#10;  &amp;#60;ion-content class=&amp;#34;content&amp;#34;&amp;#62;&amp;#10;    &amp;#60;ion-refresher  on-refresh=&amp;#34;doRefresh()&amp;#34;&amp;#62;&amp;#60;/ion-refresher&amp;#62;&amp;#10;    &amp;#60;div class=&amp;#34;card&amp;#34; ng-show=&amp;#34;noData&amp;#34;&amp;#62;&amp;#10;        &amp;#60;div class=&amp;#34;item item-text-wrap&amp;#34; &amp;#62;&amp;#10;           &amp;#60;span&amp;#62;&amp;#10;             &amp;#30446;&amp;#21069;&amp;#27809;&amp;#26377;&amp;#20219;&amp;#20309;&amp;#26032;&amp;#30340;&amp;#24773;&amp;#25253;&amp;#65292;&amp;#28857;&amp;#20987;&amp;#21491;&amp;#19978;&amp;#35282;&amp;#30340;&amp;#25353;&amp;#38062;&amp;#21457;&amp;#24067;&amp;#26032;&amp;#30340;&amp;#24773;&amp;#25253;&amp;#10;           &amp;#60;/span&amp;#62;&amp;#10;        &amp;#60;/div&amp;#62;&amp;#10;     &amp;#60;/div&amp;#62;&amp;#10;    &amp;#60;ion-list can-swipe=&amp;#34;true&amp;#34;&amp;#62;&amp;#10;      &amp;#60;div ng-repeat=&amp;#34;post in posts&amp;#34;&amp;#62;&amp;#10;        &amp;#60;a class=&amp;#34;item item-avatar-left&amp;#34; ng-class=&amp;#34;&amp;#123;&amp;#39;important&amp;#39;: post.important&amp;#125;&amp;#34;&amp;#10;        ui-sref=&amp;#39;sidemenu.post(&amp;#123;post_id: post._id&amp;#125;)&amp;#39;&amp;#62;&amp;#10;          &amp;#60;img ng-src=&amp;#34;img/avatar.jpg&amp;#34;&amp;#62;&amp;#10;          &amp;#60;h2&amp;#62;&amp;#10;            &amp;#60;button class= &amp;#34;button button-outline button-assertive button-small&amp;#34;&amp;#10;            ng-if=&amp;#34;post.important&amp;#34;&amp;#62;&amp;#10;            &amp;#32039;&amp;#24613;&amp;#10;            &amp;#60;/button&amp;#62;&amp;#10;            &amp;#60;button class= &amp;#34;button button-outline button-positive button-small&amp;#34;&amp;#10;            ng-if=&amp;#34;!post.important&amp;#34; &amp;#62;&amp;#26085;&amp;#24120;&amp;#60;/button&amp;#62;&amp;#10;            &amp;#123;&amp;#123;post.content | limitTo:lengthLimit&amp;#125;&amp;#125;&amp;#123;&amp;#123;post.content.length &amp;#62; lengthLimit?&amp;#34;...&amp;#34;:&amp;#34;&amp;#34;&amp;#125;&amp;#125;&amp;#10;            &amp;#60;span &amp;#62;&amp;#10;              &amp;#60;i class=&amp;#34;icon ion-ios-heart item-note &amp;#34;&amp;#62;&amp;#10;                &amp;#123;&amp;#123;post.likesCount &amp;#62;0?post.likesCount:0&amp;#125;&amp;#125;&amp;#10;              &amp;#60;/i&amp;#62;&amp;#10;              &amp;#60;i class=&amp;#34;icon ion-chatboxes  item-note&amp;#34;&amp;#62;&amp;#10;                 &amp;#123;&amp;#123;post.replyCount &amp;#62;0?post.replyCount:0&amp;#125;&amp;#125;&amp;#38;nbsp;&amp;#10;               &amp;#60;/i&amp;#62;&amp;#10;            &amp;#60;/span&amp;#62;&amp;#10;          &amp;#60;/h2&amp;#62;&amp;#10;          &amp;#60;p &amp;#62;&amp;#10;            &amp;#60;i class=&amp;#34;icon ion-ios-person-outline positive&amp;#34;&amp;#62;&amp;#60;/i&amp;#62;&amp;#10;            &amp;#123;&amp;#123;post.userName&amp;#125;&amp;#125;&amp;#10;            &amp;#60;span am-time-ago=&amp;#34;post.createDate&amp;#34; class=&amp;#34;item-note&amp;#34;&amp;#62;&amp;#10;            &amp;#60;/span&amp;#62;&amp;#10;          &amp;#60;/p&amp;#62;&amp;#10;        &amp;#60;/a&amp;#62;&amp;#10;      &amp;#60;/div&amp;#62;&amp;#10;    &amp;#60;/ion-list&amp;#62;&amp;#10;    &amp;#60;ion-infinite-scroll on-infinite=&amp;#34;loadMore()&amp;#34; icon=&amp;#34;ion-loading-c&amp;#34;&amp;#10;    ng-if=&amp;#34;hasNextPage &amp;#38;&amp;#38; !loadError&amp;#34;&amp;#62;&amp;#10;    &amp;#60;/ion-infinite-scroll&amp;#62;&amp;#10;  &amp;#60;/ion-content&amp;#62;&amp;#10;&amp;#60;/ion-view&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该页面包括一个侧边栏的导航按钮，一个添加新的情报的添加按钮，以及一个展示情报的列表。&lt;code&gt;ui-sref=&amp;#39;sidemenu.post({post_id: post._id})&amp;#39;&lt;/code&gt;该句让我们在点击该情报的时候跳转到情报详情界面，并传入该情报对应的id号，注意到我们在显示时间的时候使用了am-time-ago标签，该标签由moment库提供，能够显示相对时间，要使用此库，只需要在index.html中加载该库所需要的文件:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;script src=&amp;#34;lib/moment/min/moment-with-locales.js&amp;#34;&amp;#62;&amp;#60;/script&amp;#62;&amp;#10;&amp;#60;script src=&amp;#34;lib/angular-moment/angular-moment.js&amp;#34;&amp;#62;&amp;#60;/script&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后在fcws的模块中加入angularMoment的依赖:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;angular.module(&amp;#39;fcws&amp;#39;, [&amp;#10;  &amp;#39;ionic&amp;#39;,&amp;#10;  &amp;#39;fcws.controllers&amp;#39;,&amp;#10;  &amp;#39;fcws.services&amp;#39;,&amp;#10;  &amp;#39;fcws.utils&amp;#39;,&amp;#10;  &amp;#39;angularMoment&amp;#39;,&amp;#10;  &amp;#39;ngCordova&amp;#39;&amp;#10;])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后在app.js中的run函数中设置我们要显示的时区即可使用该标签即可:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.run(function($ionicPlatform,amMoment) &amp;#123;&amp;#10;  // change language to zh-cn&amp;#10;  amMoment.changeLocale(&amp;#39;zh-cn&amp;#39;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;分页&quot;&gt;分页&lt;/h2&gt;&lt;p&gt;对于列表项的显示我们不能向服务器一下子请求所有的情报，这样会导致请求的数据过大，不仅占用大量带宽，而且对服务器和客户端都是不小的压力，因此我们需要进行分页，当用户需要浏览更多情报的时候再去服务器加载更多。ionic框架向我们提供了ion-infinite-scroll标签，该标签在用户滑动到页面底部的时候触发loadMore函数，loadmore函数如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$scope.loadMore = function()&amp;#123;&amp;#10;    Posts.pagination()&amp;#10;    .success(function(response)&amp;#123;&amp;#10;      $scope.loadError = false;&amp;#10;      $scope.hasNextPage = false;&amp;#10;      $timeout(function() &amp;#123;&amp;#10;        $scope.hasNextPage = Posts.hasNextPage();&amp;#10;        $log.debug(&amp;#39;has next page ? &amp;#39;, $scope.hasNextPage);&amp;#10;     &amp;#125;, 100);&amp;#10;     $scope.posts = $scope.posts.concat(response.data);&amp;#10;    &amp;#125;)&amp;#10;    .error(function()&amp;#123;&amp;#10;      $scope.loadError = true;&amp;#10;      $rootScope.notify(&amp;#34;&amp;#20986;&amp;#38169;&amp;#20102;!!&amp;#35831;&amp;#26816;&amp;#26597;&amp;#32593;&amp;#32476;&amp;#21518;&amp;#37325;&amp;#35797;&amp;#34;);&amp;#10;    &amp;#125;);&amp;#10;    $scope.$broadcast(&amp;#39;scroll.infiniteScrollComplete&amp;#39;);&amp;#10;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该函数使用使用Posts服务中的pagination函数,在收到请求的数据后加入到已有列表中并显示,如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pagination: function() &amp;#123;&amp;#10;        console.log(&amp;#34;pagination&amp;#34;);&amp;#10;        var promise = $http.get(SERVER.api + &amp;#39;/posts&amp;#39;,&amp;#123;&amp;#10;          params:&amp;#123;&amp;#10;            page: nextPage,&amp;#10;            limit : limit&amp;#10;          &amp;#125;&amp;#10;        &amp;#125;);&amp;#10;        promise.success(function(response)&amp;#123;&amp;#10;          if(response.data.length &amp;#60; limit)&amp;#123;&amp;#10;            console.log(&amp;#39;posts length: &amp;#39; + response.data.length);&amp;#10;            hasNextPage = false;&amp;#10;          &amp;#125;&amp;#10;          nextPage ++;&amp;#10;          posts = posts.concat(response.data);&amp;#10;        &amp;#125;);&amp;#10;        return promise;&amp;#10;      &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们在Posts服务中维护了page变量用于标示目前的分页页数和hasNextPage的布尔值用于标示是否还有下一页,在收到新一页的数据时，我们将它和已有的情报保存在一起。&lt;/p&gt;
&lt;h2 id=&quot;下拉刷新&quot;&gt;下拉刷新&lt;/h2&gt;&lt;p&gt;注意到在ion-content标签下有一个ion-refresher的标签，即&lt;code&gt;&amp;lt;ion-refresher  on-refresh=&amp;quot;doRefresh()&amp;quot;&amp;gt;&amp;lt;/ion-refresher&amp;gt;&lt;/code&gt;,该标签为下拉刷新标签，用户在该界面下拉时会触发doRefresh函数，该函数会向服务器重新请求数据并进行刷新。doRefresh函数定义在PostsCtrl中，如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$scope.doRefresh = function() &amp;#123;&amp;#10;  Posts.refresh()&amp;#10;  .success(function(response)&amp;#123;&amp;#10;&amp;#10;      $scope.posts = response.data;&amp;#10;&amp;#10;      if ($scope.posts.length === 0) &amp;#123;&amp;#10;        $scope.noData = true;&amp;#10;      &amp;#125; else &amp;#123;&amp;#10;        $scope.noData = false;&amp;#10;      &amp;#125;&amp;#10;&amp;#10;      $scope.loadError = false;&amp;#10;      $scope.hasNextPage = true;&amp;#10;  &amp;#125;)&amp;#10;  .error(function(data,status,headers,config)&amp;#123;&amp;#10;      $scope.loadError = true;&amp;#10;      $rootScope.notify(&amp;#34;&amp;#20986;&amp;#38169;&amp;#20102;!!&amp;#35831;&amp;#26816;&amp;#26597;&amp;#32593;&amp;#32476;&amp;#21518;&amp;#37325;&amp;#35797;&amp;#34;);&amp;#10;  &amp;#125;);&amp;#10;  $rootScope.$broadcast(&amp;#39;scroll.refreshComplete&amp;#39;);&amp;#10;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意在显示结束后需要广播&lt;code&gt;scroll.refreshComplete&lt;/code&gt;消息，页面中的下拉刷新在接受到该广播后停止下拉刷新的加载动画。该操作用到Posts服务中的refresh函数，如下:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;refresh: function() &amp;#123;&amp;#10;  console.log(&amp;#34;refresh&amp;#34;);&amp;#10;  var promise = $http.get(SERVER.api + &amp;#39;/posts&amp;#39;,&amp;#123;&amp;#10;    params:&amp;#123;&amp;#10;      page: 1,&amp;#10;      limit : limit&amp;#10;    &amp;#125;&amp;#10;  &amp;#125;);&amp;#10;&amp;#10;  promise.success(function(response)&amp;#123;&amp;#10;    hasNextPage = true;&amp;#10;    nextPage = 2;&amp;#10;    posts = response.data;&amp;#10;  &amp;#125;);&amp;#10;&amp;#10;  return promise;&amp;#10;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;refresh操作会将分页的页数重新置为1，并在请求成功后设置为2.&lt;/p&gt;
&lt;h2 id=&quot;发布情报&quot;&gt;发布情报&lt;/h2&gt;&lt;p&gt;点击发布情报按钮，会显示发布情报界面，该界面我们使用ionicModal来编写，ionicModal并没有创造一个新的页面状态，而是将页面附在当前页面上面，由用户输入信息，进行操作，完成后隐藏界面，非常方便，该model界面如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;div class=&amp;#34;modal&amp;#34; &amp;#62;&amp;#10;  &amp;#60;ion-header-bar class=&amp;#34;bar-positive&amp;#34; &amp;#62;&amp;#10;      &amp;#60;h1 class=&amp;#34;title&amp;#34;&amp;#62;&amp;#21457;&amp;#24067;&amp;#24773;&amp;#25253;&amp;#60;/h1&amp;#62;&amp;#10;  &amp;#60;/ion-header-bar&amp;#62;&amp;#10;  &amp;#60;ion-content class=&amp;#34;padding&amp;#34;&amp;#62;&amp;#10;    &amp;#60;ion-list ng-if=&amp;#34;newPost.images.length != 0&amp;#34; class=&amp;#34;card&amp;#34;&amp;#62;&amp;#10;      &amp;#60;div class=&amp;#34;item item-divider item-positive&amp;#34;&amp;#62;&amp;#10;        &amp;#22270;&amp;#29255;&amp;#10;      &amp;#60;/div&amp;#62;&amp;#10;      &amp;#60;div ng-repeat=&amp;#34;image in newPost.images&amp;#34; class=&amp;#34;item item-thumbnail-left item-icon-right&amp;#34;&amp;#62;&amp;#10;        &amp;#60;img ng-src=&amp;#123;&amp;#123;image.url&amp;#125;&amp;#125; ng-click=&amp;#34;showImageModal(image.url)&amp;#34;&amp;#62;&amp;#10;        &amp;#60;h2&amp;#62;&amp;#123;&amp;#123;image.url&amp;#125;&amp;#125;&amp;#60;/h2&amp;#62;&amp;#10;        &amp;#60;i class=&amp;#34;button button-clear icon ion-close-round&amp;#34; ng-click =&amp;#34;removePhoto(image)&amp;#34;&amp;#62;&amp;#60;/i&amp;#62;&amp;#10;      &amp;#60;/div&amp;#62;&amp;#10;    &amp;#60;/ion-list&amp;#62;&amp;#10;    &amp;#60;div class=&amp;#34;card&amp;#34;&amp;#62;&amp;#10;      &amp;#60;div class=&amp;#34;item item-divider item-icon-right item-positive&amp;#34;&amp;#62;&amp;#10;        &amp;#28040;&amp;#24687;&amp;#20869;&amp;#23481;&amp;#10;        &amp;#60;i class=&amp;#34;icon ion-link&amp;#34; ng-click=&amp;#34;showActions()&amp;#34;&amp;#62;&amp;#60;/i&amp;#62;&amp;#10;      &amp;#60;/div&amp;#62;&amp;#10;      &amp;#60;div class=&amp;#34;item item-input&amp;#34;&amp;#62;&amp;#10;        &amp;#60;textarea style=&amp;#34;height:200px;&amp;#34; placeholder=&amp;#34;&amp;#35831;&amp;#36755;&amp;#20837;&amp;#28040;&amp;#24687;&amp;#20869;&amp;#23481;&amp;#34; ng-model=&amp;#34;newPost.content&amp;#34;&amp;#62;&amp;#60;/textarea&amp;#62;&amp;#10;      &amp;#60;/div&amp;#62;&amp;#10;      &amp;#60;div class=&amp;#34;col&amp;#34;&amp;#62;&amp;#10;        &amp;#60;div class=&amp;#34;item item-checkbox&amp;#34;&amp;#62;&amp;#10;          &amp;#60;label class=&amp;#34;checkbox&amp;#34;&amp;#62;&amp;#10;            &amp;#60;input type=&amp;#34;checkbox&amp;#34; ng-model=&amp;#34;newPost.important&amp;#34;&amp;#62;&amp;#10;          &amp;#60;/label&amp;#62;&amp;#10;          &amp;#60;p&amp;#62;&amp;#32039;&amp;#24613;&amp;#19978;&amp;#25253;&amp;#60;/p&amp;#62;&amp;#10;        &amp;#60;/div&amp;#62;&amp;#10;      &amp;#60;/div&amp;#62;&amp;#10;    &amp;#60;/div&amp;#62;&amp;#10;    &amp;#60;button class=&amp;#34;button button-block button-balanced&amp;#34;&amp;#10;    ng-disabled=&amp;#34;newPost.content === &amp;#39;&amp;#39;&amp;#34; ng-click=&amp;#34;createNewPost()&amp;#34;&amp;#62;&amp;#10;      &amp;#21457;&amp;#36865;&amp;#10;    &amp;#60;/button&amp;#62;&amp;#10;    &amp;#60;button class=&amp;#34;button button-block button-assertive&amp;#34; ng-click=&amp;#34;closeNewPostModal()&amp;#34;&amp;#62;&amp;#10;      &amp;#21462;&amp;#28040;&amp;#10;    &amp;#60;/button&amp;#62;&amp;#10;    &amp;#60;/div&amp;#62;&amp;#10;  &amp;#60;/ion-content&amp;#62;&amp;#10;&amp;#60;/div&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;包括图片列表，消息内容，以及发送和取消按钮，用于控制该model的代码如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// Create the new  post modal&amp;#10;    $ionicModal.fromTemplateUrl(&amp;#39;templates/post/newModal.html&amp;#39;, &amp;#123;&amp;#10;      animation: &amp;#39;slide-in-up&amp;#39;,&amp;#10;      scope: $scope&amp;#10;    &amp;#125;).then(function(modal) &amp;#123;&amp;#10;      $scope.newPostModal = modal;&amp;#10;    &amp;#125;);&amp;#10;    // show new topic modal&amp;#10;    $scope.showNewPostModal = function() &amp;#123;&amp;#10;      $scope.newPost.content = &amp;#34;&amp;#34;;&amp;#10;      $scope.newPost.important = false;&amp;#10;      $scope.newPost.images = [];&amp;#10;      $scope.newPostModal.show();&amp;#10;    &amp;#125;;&amp;#10;    $scope.closeNewPostModal = function() &amp;#123;&amp;#10;      $scope.newPostModal.hide();&amp;#10;      $scope.newPost.content = &amp;#34;&amp;#34;;&amp;#10;      $scope.newPost.important = false;&amp;#10;      $scope.newPost.images = [];&amp;#10;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该部分代码指定了model显示的方式，其上下文为本页面的上下文，并且设置了显示和隐藏该model的函数。发布情报时要求可以加入图片，加入图片主要由两种途径，一个是打开摄像头进行拍照，另一个是在手机的图片库中进行查找，我们用ionic提供的$ionicActionSheet提供这两个选项，点击添加图片按钮后调用showActions函数,如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$scope.showActions = function () &amp;#123;&amp;#10;   // Show the action sheet&amp;#10;      $ionicActionSheet.show(&amp;#123;&amp;#10;       buttons: [&amp;#10;         &amp;#123; text: &amp;#34;&amp;#25293;&amp;#29031;&amp;#34; &amp;#125;,&amp;#10;         &amp;#123; text: &amp;#34;&amp;#22270;&amp;#29255;&amp;#24211;&amp;#34;&amp;#125;&amp;#10;       ],&amp;#10;       titleText: &amp;#34;&amp;#28155;&amp;#21152;&amp;#22270;&amp;#29255;&amp;#34;,&amp;#10;       cancelText: &amp;#39;&amp;#21462;&amp;#28040;&amp;#39;,&amp;#10;       cancel: function() &amp;#123;&amp;#10;       &amp;#125;,&amp;#10;       buttonClicked: function(index) &amp;#123;&amp;#10;         if(index === 0)&amp;#123;&amp;#10;            $scope.takePhoto();&amp;#10;         &amp;#125;else if (index === 1)&amp;#123;&amp;#10;            $scope.pickImage();&amp;#10;         &amp;#125;&amp;#10;         return true;&amp;#10;       &amp;#125;&amp;#10;     &amp;#125;);&amp;#10;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里我们的图片库操作在某些手机上测试会导致应用崩溃，因此这里略去。如果是拍照服务,我们需要使用cordova的插件org.apache.cordova.camera,该插件允许我们访问设备底层的照相机服务,我们添加Camera服务如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;angular.module(&amp;#39;fcws.services&amp;#39;)&amp;#10;.factory(&amp;#39;Camera&amp;#39;, [&amp;#39;$q&amp;#39;, function($q) &amp;#123;&amp;#10;  return &amp;#123;&amp;#10;    getPicture: function(options) &amp;#123;&amp;#10;      var q = $q.defer();&amp;#10;      navigator.camera.getPicture(function(result) &amp;#123;&amp;#10;        // Do any magic you need&amp;#10;        q.resolve(result);&amp;#10;      &amp;#125;, function(err) &amp;#123;&amp;#10;        q.reject(err);&amp;#10;      &amp;#125;, options);&amp;#10;      return q.promise;&amp;#10;    &amp;#125;&amp;#10;  &amp;#125;;&amp;#10;&amp;#125;]);&amp;#10;angular.module(&amp;#39;fcws.services&amp;#39;).config(function($compileProvider)&amp;#123;&amp;#10;  $compileProvider.imgSrcSanitizationWhitelist(/^\s*(https?|ftp|mailto|file|tel):/);&amp;#10;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们使用该服务的getPicture函数就能打开设备的摄像头实现拍照,具体的调用函数为:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// take photo with camera&amp;#10;$scope.takePhoto = function() &amp;#123;&amp;#10;  if($scope.images.length &amp;#62;=3)&amp;#123;&amp;#10;    alert(&amp;#34;&amp;#26368;&amp;#22810;&amp;#19978;&amp;#20256;&amp;#19977;&amp;#24352;&amp;#22270;&amp;#29255;&amp;#34;);&amp;#10;    return ;&amp;#10;  &amp;#125;&amp;#10;  Camera.getPicture().then(function(imageURI) &amp;#123;&amp;#10;    console.log(imageURI);&amp;#10;    $scope.newPost.images.push(&amp;#123;url:imageURI&amp;#125;);&amp;#10;  &amp;#125;, function(err) &amp;#123;&amp;#10;    console.err(err);&amp;#10;    $rootScope.notify(&amp;#34;&amp;#20986;&amp;#38169;&amp;#20102;&amp;#65292;&amp;#37325;&amp;#35797;&amp;#19968;&amp;#19979;&amp;#34;);&amp;#10;  &amp;#125;);&amp;#10;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了限制上传的带宽流量，我们限制最多上传3脏图片。当然用户可以随时删除自己拍摄的照片:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$scope.removePhoto = function(image) &amp;#123;&amp;#10;    $log.log(&amp;#34;removePhoto&amp;#34;);&amp;#10;    var indexImage = $scope.newPost.images.indexOf(image);&amp;#10;    if (indexImage &amp;#62; -1) &amp;#123;&amp;#10;      $scope.newPost.images.splice(indexImage, 1);&amp;#10;    &amp;#125;&amp;#10;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在所有信息填写完毕后，点击发布按钮将触发createNewPost函数,该函数如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$scope.createNewPost = function() &amp;#123;&amp;#10;  var content = $scope.newPost.content;&amp;#10;  var important = false;&amp;#10;  if (!content) &amp;#123;&amp;#10;    $rootScope.notify(&amp;#34;&amp;#35831;&amp;#36755;&amp;#20837;&amp;#24773;&amp;#25253;&amp;#20869;&amp;#23481;&amp;#34;);&amp;#10;    return false;&amp;#10;  &amp;#125;&amp;#10;  if (this.newPost.important)&amp;#10;    important = true;&amp;#10;  var date = new Date();&amp;#10;  var createDate = $filter(&amp;#39;date&amp;#39;)(date, &amp;#39;yyyy-MM-dd HH:mm:ss&amp;#39;);&amp;#10;  var form = &amp;#123;&amp;#10;    userName: User.getUserName(),&amp;#10;    userId: User.getUserId(),&amp;#10;    content: content,&amp;#10;    important: important,&amp;#10;    createDate: createDate,&amp;#10;    likes: [],&amp;#10;    replyCount: 0&amp;#10;  &amp;#125;;&amp;#10;  Posts.saveItem(form, User.getToken())&amp;#10;    .success(function(data, status, headers, config) &amp;#123;&amp;#10;      $rootScope.$broadcast(&amp;#39;fetchAll&amp;#39;);&amp;#10;      $scope.newPostModal.hide();&amp;#10;    &amp;#125;)&amp;#10;    .error(function(data, status, headers, config) &amp;#123;&amp;#10;      $rootScope.notify(&amp;#34;&amp;#32593;&amp;#32476;&amp;#36830;&amp;#25509;&amp;#20986;&amp;#38169;&amp;#34;);&amp;#10;    &amp;#125;);&amp;#10;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该函数会检查情报信息是否有误，如果无误则将信息打包通过post服务发送给服务器。&lt;/p&gt;
&lt;h2 id=&quot;详细情报&quot;&gt;详细情报&lt;/h2&gt;&lt;p&gt;详细情报的页面结构见代码文件，如果用户的id和该post的发布者的id是一致的，则在页面上添加删除按钮，只有发布者可以删除自己的情报，详细情报界面可以显示其他用户对该情报的评论，长按某一条评论会显示和该评论相关的操作，如@某人，或如果是该评论的发布者则增加删除该情报的功能.如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$scope.showActions = function (reply) &amp;#123;&amp;#10;    var title = &amp;#34;@&amp;#34;+ reply.userName;&amp;#10;    var DeleteButton = (User.getUserId() === reply.userId?&amp;#34;&amp;#21024;&amp;#38500;&amp;#34;:&amp;#34;&amp;#34;);&amp;#10;   // Show the action sheet&amp;#10;     var hideSheet = $ionicActionSheet.show(&amp;#123;&amp;#10;       buttons: [&amp;#10;         &amp;#123; text: &amp;#34;&amp;#22238;&amp;#22797;&amp;#34; &amp;#125;,&amp;#10;       ],&amp;#10;       destructiveText: DeleteButton,&amp;#10;       titleText: title,&amp;#10;       cancelText: &amp;#39;&amp;#21462;&amp;#28040;&amp;#39;,&amp;#10;       cancel: function() &amp;#123;&amp;#10;       &amp;#125;,&amp;#10;      destructiveButtonClicked: function () &amp;#123;&amp;#10;        $log.log(&amp;#34;get here&amp;#34;);&amp;#10;        $scope.showDeleteReplyConfirm(reply);&amp;#10;        return true;&amp;#10;      &amp;#125;,&amp;#10;       buttonClicked: function(index) &amp;#123;&amp;#10;         if(index === 0)&amp;#123;&amp;#10;            $scope.replyData.content = title+&amp;#34; &amp;#34;;&amp;#10;            $timeout(function() &amp;#123;&amp;#10;              document.querySelector(&amp;#39;.reply-new input&amp;#39;).focus();&amp;#10;            &amp;#125;, 1);&amp;#10;         &amp;#125;&amp;#10;         return true;&amp;#10;       &amp;#125;&amp;#10;     &amp;#125;);&amp;#10;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意到点击按钮后如果是回复按钮则在回复框中添加@某人标记，并将焦点置于该回复框中，这在设备中将触发显示键盘的效果，方便用户进行操作。你也可以为这个情报进行点赞，如果已点过赞，点赞按钮会变成实心，再点会变成空心,我们在post中维护了一个likes列表保存给这个post点赞的用户，如果该用户在这个列表中则该用户已点过赞,具体代码如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$scope.isLike = function() &amp;#123;&amp;#10;  var user_id = User.getUserId();&amp;#10;  console.log(user_id);&amp;#10;  var indexUser = $scope.post.likes.indexOf(user_id);&amp;#10;  if (indexUser != -1) &amp;#123;&amp;#10;    return true;&amp;#10;  &amp;#125; else &amp;#123;&amp;#10;    return false;&amp;#10;  &amp;#125;&amp;#10;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;发表一个评论的过程是发布情报的简化版，这里不再赘述.&lt;/p&gt;
&lt;h1 id=&quot;指挥控制&quot;&gt;指挥控制&lt;/h1&gt;&lt;p&gt;指挥控制由上级向下级发送命令,包括单点下达和群组下达两个方面。首先我们在app.js中定义指挥控制的状态，以及在templates中定义其页面的结构和显示效果。这些都和之前的登录注册和情报信息类似。这里主要讲解指挥控制的Controller和Service&lt;/p&gt;
&lt;h2 id=&quot;单点下达&quot;&gt;单点下达&lt;/h2&gt;&lt;p&gt;单点下达主要的部分是需要获得自己的下属部队的长官，这一部分是一个瘦客户端的操作，大部分的处理都在服务器端做完了，我们只需要传入用户所属的部队id，并且判断该用户是否是部队的领导者即可，代码如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var loadLeaders = function () &amp;#123;&amp;#10;      if(User.isLeader())&amp;#123;&amp;#10;        Orgnizations.getTroops(User.getBelong(),User.getToken())&amp;#10;        .success(function (data) &amp;#123;&amp;#10;              $scope.troops = data;&amp;#10;        &amp;#125;)&amp;#10;        .error(function() &amp;#123;&amp;#10;          console.log(&amp;#34;log error&amp;#34;);&amp;#10;        &amp;#125;);&amp;#10;      &amp;#125;else&amp;#123;&amp;#10;        $scope.noData = true;&amp;#10;      &amp;#125;&amp;#10;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果未非领导人即士兵，士兵没有指导全县，在列表中将不显示任何可以指挥的个人.这里需要向服务器传入自己所属的部队的id，以及用户的token作为标示，获取到列表后，点击某个下属即可对该下属发布命令,发布命令实际上类似于我们发送消息的过程，发送的命令会发到用户的邮箱中去。&lt;/p&gt;
&lt;h2 id=&quot;群组下达&quot;&gt;群组下达&lt;/h2&gt;&lt;p&gt;群组下达和单点下达一个不同的地方在于显示的列表是你下属的整个部队，你需要对下属整个部队的所有用户发送广播消息。该部分逻辑和单点下达类似，不再赘述&lt;/p&gt;
&lt;h2 id=&quot;信箱管理&quot;&gt;信箱管理&lt;/h2&gt;&lt;p&gt;上级对下级发送的命令会发送到用户的邮箱中，为了让用户方便的获取信息，我们将信箱的按钮放置在了首页，在用户进入首页时，我们会检查邮箱未读邮件的数量，如果该数量大于0，则将邮箱上防止红点以提醒用户阅读.代码如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$scope.getUnReadMessagesCount = function () &amp;#123;&amp;#10;  Message.getMessageCount(User.getUserId(), User.getToken())&amp;#10;  .success(function (data,status,headers,config) &amp;#123;&amp;#10;      $scope.unRead = data.count;&amp;#10;  &amp;#125;).error(function(data, status, headers, config) &amp;#123;&amp;#10;      console.log(&amp;#34;error get unread Messages count&amp;#34;);&amp;#10;      $scope.unRead = 0;&amp;#10;  &amp;#125;);&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当用户点击进入邮箱时，为了方便起见，我们会同时将邮箱中的所有未读邮件全部置为已读,我们通过Message这个Service完成:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//mark all messages to read&amp;#10;markAllMessages: function(userid,token) &amp;#123;&amp;#10;  return $http.post(SERVER.api + &amp;#39;/&amp;#39;+ userid+&amp;#39;/messages/mark&amp;#39;,null,&amp;#123;&amp;#10;    method: &amp;#39;POST&amp;#39;,&amp;#10;    params: &amp;#123;&amp;#10;      token: token&amp;#10;    &amp;#125;&amp;#10;  &amp;#125;);&amp;#10;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当用户点击具体的某个邮件时，我们会弹出对话框显示该邮件的具体内容,如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// An content show dialog&amp;#10;$scope.showContent = function(message) &amp;#123;&amp;#10; var alertPopup = $ionicPopup.alert(&amp;#123;&amp;#10;   title: message.senderTitle+&amp;#34;-&amp;#34;+message.senderName,&amp;#10;   template: &amp;#34;&amp;#60;br&amp;#62;&amp;#34;+message.content+&amp;#34;&amp;#60;br&amp;#62;&amp;#60;br&amp;#62;&amp;#34;+&amp;#34;&amp;#60;p&amp;#62;&amp;#34;+message.createDate+&amp;#34;&amp;#60;/p&amp;#62;&amp;#34;&amp;#10; &amp;#125;);&amp;#10; alertPopup.then(function(res) &amp;#123;&amp;#10;   if(!message.has_read)&amp;#123;&amp;#10;       Message.readMessage(message._id,User.getToken()).success(function(data, status, headers, config) &amp;#123;&amp;#10;          message = data;&amp;#10;       &amp;#125;).error(function (data, status, headers, config) &amp;#123;&amp;#10;          $rootScope.notify(&amp;#34;&amp;#32593;&amp;#32476;&amp;#36830;&amp;#25509;&amp;#20986;&amp;#38169;&amp;#34;);&amp;#10;       &amp;#125;)&amp;#10;   &amp;#125;&amp;#10; &amp;#125;);&amp;#10;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们使用ionic提供的$ionicPopup服务完成。&lt;/p&gt;
&lt;h1 id=&quot;军事训练与教育管理与国防动员&quot;&gt;军事训练与教育管理与国防动员&lt;/h1&gt;&lt;p&gt;军事训练，教育管理和国防动员的内容和结构类似，我们以军事训练为例,该功能下由通知计划，训练法规，资料查询，训练考核等4部分构成，他们之间只是内容不同，结构类似，我们以通知计划为例，抽出共性的部分即为显示格式化了的文档信息。在每个子项目对应的控制器文件中都保存了一份关于该条目的文档列表，标示该文档页面的名称以及在服务器对应的url，例如:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$scope.docs = [&amp;#10;  &amp;#123;&amp;#10;    name: &amp;#34;&amp;#35757;&amp;#32451;&amp;#36890;&amp;#30693;&amp;#34;,&amp;#10;    url: &amp;#34;train\/notifications\/train-notice.html&amp;#34;&amp;#10;  &amp;#125;,&amp;#10;  &amp;#123;&amp;#10;    name: &amp;#34;&amp;#19987;&amp;#27494;&amp;#27665;&amp;#20853;&amp;#24178;&amp;#37096;&amp;#38598;&amp;#35757;&amp;#36890;&amp;#30693;&amp;#34;,&amp;#10;    url: &amp;#34;train\/notifications\/assemble-notice.html&amp;#34;&amp;#10;  &amp;#125;&amp;#10;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用户点击该文档后会调用showDoc函数,该函数调用Docs服务中的showDoc函数,并传入该页面的$scope以及文档数据:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$scope.showDoc = function (doc) &amp;#123;&amp;#10;    Docs.showDoc($scope,doc);&amp;#10;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Docs服务中的showDoc函数如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;showDoc :function($scope,doc) &amp;#123;&amp;#10;    $rootScope.show(&amp;#34;&amp;#27491;&amp;#22312;&amp;#20174;&amp;#26381;&amp;#21153;&amp;#22120;&amp;#33719;&amp;#21462;&amp;#25968;&amp;#25454;,&amp;#35831;&amp;#31245;&amp;#31561;...&amp;#34;);&amp;#10;    this.getDocData(doc)&amp;#10;    .success(function(data,status, headers, config) &amp;#123;&amp;#10;      $scope.docHtml= $sce.trustAsHtml(data);&amp;#10;      $rootScope.hide();&amp;#10;      PreviewService&amp;#10;        .init(&amp;#39;templates/docModal.html&amp;#39;, $scope)&amp;#10;        .then(function(modal) &amp;#123;&amp;#10;          modal.show();&amp;#10;        &amp;#125;);&amp;#10;    &amp;#125;)&amp;#10;    .error(function(data, status, headers, config) &amp;#123;&amp;#10;      $rootScope.hide();&amp;#10;      $rootScope.notify(&amp;#34;&amp;#20986;&amp;#38169;&amp;#20102;!!&amp;#35831;&amp;#26816;&amp;#26597;&amp;#32593;&amp;#32476;&amp;#21518;&amp;#37325;&amp;#35797;&amp;#34;);&amp;#10;    &amp;#125;);&amp;#10;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;首先我们从服务器获取该文档的html数据,这里我们调用了Angular的$sce服务将该数据设置为可以信任的网页文档，这样我们就能显示页面中的图片，默认情况下只能显示最基本的html结构数据，这是Angular的安全机制导致的。获取数据后我们调用PreviewService服务进行显示,该服务为我们为了方便显示文档所创建的服务类,我们首先用init函数获取设置完成后的modal对象:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var init = function(tpl, $scope) &amp;#123;&amp;#10;  var promise;&amp;#10;  $scope = $scope || $rootScope.$new();&amp;#10;  promise = $ionicModal.fromTemplateUrl(tpl, &amp;#123;&amp;#10;    scope: $scope,&amp;#10;    animation: &amp;#39;slide-in-up&amp;#39;&amp;#10;  &amp;#125;).then(function(modal) &amp;#123;&amp;#10;    $scope.modal = modal;&amp;#10;    return modal;&amp;#10;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后通过model.show和model.hide进行该文档的显示和隐藏。&lt;/p&gt;
&lt;h1 id=&quot;设置&quot;&gt;设置&lt;/h1&gt;&lt;p&gt;设置界面主要功能有修改密码，注销登录和退出&lt;/p&gt;
&lt;h2 id=&quot;修改密码&quot;&gt;修改密码&lt;/h2&gt;&lt;p&gt;修改密码涉及到用户的隐私操作，是重要的安全操作，我们首先要求用户输入原密码以验证用户的身份:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var validatePassword = function(res) &amp;#123;&amp;#10;      var id = User.getUserId();&amp;#10;      var password = res;&amp;#10;      $rootScope.show(&amp;#39;&amp;#39564;&amp;#35777;&amp;#20013;...&amp;#35831;&amp;#31245;&amp;#20505;&amp;#39;);&amp;#10;      User.confirmPassword(&amp;#123;&amp;#10;        id: id,&amp;#10;        password: password&amp;#10;      &amp;#125;).success(function() &amp;#123;&amp;#10;        $rootScope.hide();&amp;#10;        $window.location.href = (&amp;#39;#/sidemenu/changepw&amp;#39;);&amp;#10;      &amp;#125;).error(function(error) &amp;#123;&amp;#10;        $rootScope.hide();&amp;#10;        $rootScope.notify(&amp;#34;&amp;#23494;&amp;#30721;&amp;#39564;&amp;#35777;&amp;#20986;&amp;#38169;&amp;#34;);&amp;#10;      &amp;#125;);&amp;#10;     &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果验证成功则跳转到修改密码页面,输入新密码和重复输入的密码，发送到服务器端即可完成修改密码&lt;/p&gt;
&lt;h2 id=&quot;注销登录&quot;&gt;注销登录&lt;/h2&gt;&lt;p&gt;注销登录比较简单，我们只需要将保存在本地的用户信息清除，然后跳转到登录页面即可:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$scope.logout = function() &amp;#123;&amp;#10;  User.logoutUser();&amp;#10;  $state.go(&amp;#39;signin&amp;#39;);&amp;#10;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;相应的logoutUser函数为&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;logoutUser: function () &amp;#123;&amp;#10;  $localstorage.remove(userKey);&amp;#10;  $localstorage.set(isAuthenticatedKey,false);&amp;#10;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们用isAuthenticatedKey来存储我们是否已经登录的标志,这里也显示出编写$localstorage工具类的好处&lt;/p&gt;
&lt;h2 id=&quot;退出应用&quot;&gt;退出应用&lt;/h2&gt;&lt;p&gt;退出应用只需要调用相应平台的exit()函数即可,如下:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$scope.shutdown = function() &amp;#123;&amp;#10;  ionic.Platform.exitApp();&amp;#10;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本篇为Ionic App 系列教程的客户端实现部分,我们使用Ionic框架进行客户端实现，Ionic本身依赖Ionic和AngularJS。&lt;/p&gt;
&lt;p&gt;我已经把项目文件整理起来放到github仓库&lt;a href=&quot;git@github.com:rdmclin2/fcws-ionic.git&quot;&gt;fcws-ionic&lt;/a&gt;上了，供大家参考。&lt;br&gt;本文的后端实现为Nodejs+Mongoose+Express,放在github仓库&lt;a href=&quot;git@github.com:rdmclin2/fcws-backend.git&quot;&gt;fcws-backend&lt;/a&gt;中。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="ionic" scheme="http://www.mclspace.com/categories/ionic/"/>
    
    
      <category term="ionic" scheme="http://www.mclspace.com/tags/ionic/"/>
    
      <category term="mongodb" scheme="http://www.mclspace.com/tags/mongodb/"/>
    
      <category term="nodejs" scheme="http://www.mclspace.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs+Ionic+Mongodb+Docker技术综述</title>
    <link href="http://www.mclspace.com/2015/11/23/nodejs-ionic-mongodb-docker-summary/"/>
    <id>http://www.mclspace.com/2015/11/23/nodejs-ionic-mongodb-docker-summary/</id>
    <published>2015-11-23T06:26:10.000Z</published>
    <updated>2016-02-16T16:50:07.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本篇介绍以Nodejs和Mongodb为后端，以Ionic为前端，以Docker作为服务器容器为基础架构的混合App开发方式的技术综述。&lt;/p&gt;
&lt;p&gt;我已经把项目文件整理起来放到&lt;a href=&quot;https://github.com/rdmclin2/fcws&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;上了，供大家参考。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;HTML_&amp;amp;&amp;amp;_CSS_&amp;amp;&amp;amp;_JS简介&quot;&gt;HTML &amp;amp;&amp;amp; CSS &amp;amp;&amp;amp; JS简介&lt;/h1&gt;&lt;p&gt;HTML的全称是Hyper Text Markup Language，中文名为超文本标记语言，它通过标记符号来标记页面中要显示的各个部分，HTML组成了页面的框架。&lt;/p&gt;
&lt;p&gt;CSS的全称是Cascading Style Sheets，中文名为层叠样式表，它是一种用来表现HTML文件样式的计算机语言，是能够真正做到网页表现与内容分离的一种样式设计语言。&lt;/p&gt;
&lt;p&gt;JS是Javascript的简称，JavaScript是一种属于网络的脚本语言,已经被广泛用于Web应用开发,常用来为网页添加各式各样的动态功能,为用户提供更流畅美观的浏览效果。通常JavaScript脚本是通过嵌入在HTML中来实现自身的功能的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;百度百科 &lt;a href=&quot;http://baike.baidu.com/view/16168.htm?fromtitle=JS&amp;amp;fromid=10687961&amp;amp;type=syn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://baike.baidu.com/view/16168.htm?fromtitle=JS&amp;amp;fromid=10687961&amp;amp;type=syn&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://7pun7p.com1.z0.glb.clouddn.com/blog/html5-css3-js.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;AngularJS技术简介&quot;&gt;AngularJS技术简介&lt;/h1&gt;&lt;p&gt;Ionic框架依赖 AngularJS和Cordova而实现，因此我们先介绍这两个框架再来介绍Ionic。AngularJS是Google开发的纯客户端JavaScript技术的WEB框架,用于扩展、增强HTML功能,它专为构建强大的WEB应用。AngularJS试图成为WEB应用中的一种端对端的解决方案。这意味着它不只是你的WEB应用中的一个小部分，还是一个完整的端对端的解决方案。这会让AngularJS在构建一个CRUD（增加Create、查询Retrieve、更新Update、删除Delete）的应用时显得很“固执”（原文为 opinionated,意指没有太多的其他方式）。但是，尽管它很“固执”，它仍然能确保它的“固执”只是在你构建应用的起点，并且你仍能灵活变动。&lt;/p&gt;
&lt;p&gt;AngularJS通过为开发者呈现一个更高层次的抽象来简化应用的开发。如同其他的抽象技术一样，这也会损失一部分灵活性。换句话说，并不是所有的应用都适合用AngularJS来做。AngularJS主要考虑的是构建CRUD应用。幸运的是，至少90%的WEB应用都是CRUD应用。但是要了解什么适合用AngularJS构建，就得了解什么不适合用AngularJS构建。&lt;br&gt;如游戏，图形界面编辑器，这种DOM操作很频繁也很复杂的应用，和CRUD应用就有很大的不同，它们不适合用AngularJS来构建。像这种情况用一些更轻量、简单的技术如jQuery可能会更好。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;百度百科 &lt;a href=&quot;http://baike.baidu.com/item/AngularJS&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://baike.baidu.com/item/AngularJS&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://7pun7p.com1.z0.glb.clouddn.com/blog/angularjs_logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Cordova技术简介&quot;&gt;Cordova技术简介&lt;/h1&gt;&lt;p&gt;Cordova是Apahe基金会旗下的一个开源项目，其在官网上的简介为:Apache Cordova is a platform for building native mobile applications using HTML, CSS and JavaScript，中文解释就是Apache Cordoava 是一个使用HMTL,CSS和Javascript来构建本地移动应用的平台。&lt;/p&gt;
&lt;p&gt;它是一个Adobe的开源的混合型(Hydrid)移动应用开发框架，它的前身是PhoneGap开源框架，现在这两个品牌都在使用，不过基本上除了名字以外，其它都相同。Cordova为HTML 5代码提供了对本地资源的访问能力，能够充分发挥HTML 5的跨平台能力和本地代码在性能以及资源访问上的优势。到目前为止，Cordova已经支持了所有的主流移动平台，可以减少企业在移动应用开发上的成本和时间。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Cordova开发第一课 环境准备 &lt;a href=&quot;http://io.diveinedu.com/2015/01/09/Cordova开发第一课-环境准备.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://io.diveinedu.com/2015/01/09/Cordova开发第一课-环境准备.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Cordova为应用开发者提供了一组可以调用本地设备功能的API，这些API用JS编写，让你能方便地调用摄像头，加速器等功能。和一些常见的前端框架如JQuery等等配合使用能够允许一个应用只使用HTML,CSS和Javascript进行构建。使用Cordova你不需要再编写任何本地代码如Java或Objective-C等等，只需要web技术就可以，这些代码由应用自身本地加载并显示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7pun7p.com1.z0.glb.clouddn.com/blog/cordova_logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Ionic技术简述&quot;&gt;Ionic技术简述&lt;/h1&gt;&lt;p&gt;Ionic官网上的简介是”Ionic is the beautiful, open source front-end SDK for developing hybird mobile apps with web technologies”,翻译过来就是”Ionic是一个用web技术开发混合移动应用的漂亮的开源前端SDK”。作为一款前端SDK,Ionic向我们提供了一系列的HTML,CSS,JS组件，手势和工具来构架具有复杂交互的app，Ionic主要关注于应用的外观和交互，它设计的初衷并不是为了取代PhoneGap这类JS框架，而是简化我们编写App时的一个大的方面即前端。&lt;/p&gt;
&lt;p&gt;那么已经存在Cordova,PhoneGap此类开源引擎的情况下，Ionic为什么而存在呢？在前端方面有一个传奇的前端代码库Bootstrap，Bootstrap是twitter推出的一款界面框架，从github上高达8万的star数量就可以知道这个库有多么的流行。在前端仍是莽荒一片的时代程序员编写代码必须从头开始，编写晦涩的代码以满足不同浏览器的癖好，直到前端代码库的出现才让程序员解放生产力，像Bootstrap这种代码库并不是让程序员可以不写代码就编写项目，而是他提供给开发者一个更高的起点来写出高质量的项目，直接的好处就是这种库通常设计精良，经过严格测试，并支持跨浏览器的一致体验。Ionic库也有着类似的目标，通过共享库的方式向开发者推荐合适的设计模式并将良好的实践文档化，让我们在开发混合App的时候能够专注于应用的架构。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7pun7p.com1.z0.glb.clouddn.com/blog/ionic_logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;CS样式&quot;&gt;CS样式&lt;/h2&gt;&lt;p&gt;Ionic我们提供了丰富的CSS样式和Javascript功能，首先是CSS,如下图所示，图一中1为Ionic的CSS样式列表，提供了如按钮，列表，卡片，选择等基本的页面部件，开发者通过图中2中的HTML代码就能够方便的将部件集成到页面中来，如图中3所示为各种样式的按钮。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7pun7p.com1.z0.glb.clouddn.com/blog/ionic_css.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;JS功能部件&quot;&gt;JS功能部件&lt;/h2&gt;&lt;p&gt;JS功能部件能够提供各种动态效果以及交互功能，图二中1为Ionic为我们提供的JS功能列表，提供了例如导航，弹出菜单，滑动窗口等基本页面交互功能，通过使用图2中的JS代码能够很方便的使用这些功能，让我们的APP能够与用户进行交互，图中3所示为弹出窗口的效果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7pun7p.com1.z0.glb.clouddn.com/blog/ionic_js.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Nodejs技术简述&quot;&gt;Nodejs技术简述&lt;/h1&gt;&lt;p&gt;Nodejs是一个基于Chrome V8引擎的js运行时环境，它采用基于事件的非阻塞I/O模型，V8是Google创造出来的高性能JS引擎，得益于V8的高性能，Nodejs能够既轻量级又具备高性能。Nodejs很适合用来搭建高性能的web服务器,而且因为Node内置了服务器，我们不需要像PHP或Django一样用Ngnix之类的代理服务器，例如使用下面的代码就可以简单地创建一个Nodejs服务器：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var http = require(&amp;#39;http&amp;#39;);&amp;#10;&amp;#10;http.createServer(function (req, res) &amp;#123;&amp;#10;  res.writeHead(200, &amp;#123;&amp;#39;Content-Type&amp;#39;: &amp;#39;text/plain&amp;#39;&amp;#125;);&amp;#10;  res.end(&amp;#39;Hello World\n&amp;#39;);&amp;#10;&amp;#125;).listen(1337, &amp;#34;127.0.0.1&amp;#34;);&amp;#10;&amp;#10;console.log(&amp;#39;Server running at http://127.0.0.1:1337/&amp;#39;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这段代码使用Nodejs内置的http模块，监听本地1337端口，并将所有访问该地址的请求返回一个Hello World的回应。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7pun7p.com1.z0.glb.clouddn.com/blog/nodejs_logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Node.js是一个为实时Web（Real-time Web)应用开发而诞生的平台，它从诞生之初就充分考虑了在实时响应,超大规模数据要求下架构的可扩展性。这使得它摈弃了传统平台依靠多线程来实现高并发的设计思路，而采用了单线程，异步式I/O,事件驱动的程序设计模型，这些特性不仅带来了巨大的性能提升，还减少了多线程程序设计的复杂性，进而提高了开发效率。Nodejs是一个让Javascript运行在浏览器之外的平台。它实现了诸如文件系统，模块，包，操作系统API，网络通信等Core JavaScript没有或者不完善的功能。Node.js的Javascript引擎是V8,来自Google Chrome项目。V8号称是目前世界上最快的Javascript引擎，经历了数次引擎革命，它的JIT(Just-in-time Compilation,即时编译)的执行速度已经快到了接近本地代码的执行速度。Node.js不运行在浏览器中，所以也就不存在JavaScript的浏览器兼容性问题，可以放心地使用JavaScript语言的所有特性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NodeJS开发指南&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;mongojs_模块&quot;&gt;mongojs 模块&lt;/h2&gt;&lt;p&gt;Mongojs是一个小巧的Node.js模块，它的功能就是用来连接Mongodb数据库，并提供Mongodb操作的封装，让我们在Node下面能够对数据库进行操作，Mongojs很容易使用，例如:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var mongojs = require(&amp;#39;mongojs&amp;#39;)&amp;#10;var db = mongojs(connectionString, [collections])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的代码的功能是引入mongojs模块，并根据连接信息打开数据库，并返回具有特定集合的db接口，有了db这个对象，我们就能对数据库进行各种增删改查的操作。例如查找所有性别为female的用户:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// app.js&amp;#10;db.users.find(&amp;#123;sex: &amp;#34;female&amp;#34;&amp;#125;, function(err, users) &amp;#123;&amp;#10;  if( err || !users) console.log(&amp;#34;No female users found&amp;#34;);&amp;#10;  else users.forEach( function(femaleUser) &amp;#123;&amp;#10;    console.log(femaleUser);&amp;#10;  &amp;#125; );&amp;#10;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;restify_模块&quot;&gt;restify 模块&lt;/h2&gt;&lt;p&gt;要介绍Restify模块，首先得理解REST风格的开发方式，REST(Representational State Transfer 表述性状态转移)是一种针对网络应用的设计和开发方式，可以降低开发的复杂性，提高系统的可伸缩性。REST 指的是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是 RESTful。Web 应用程序最重要的 REST 原则是，客户端和服务器之间的交互在请求之间是无状态的。从客户端到服务器的每个请求都必须包含理解请求所必需的信息。&lt;/p&gt;
&lt;p&gt;在服务器端，应用程序状态和功能可以分为各种资源。资源是一个有趣的概念实体，它向客户端公开。资源的例子有：应用程序对象、数据库记录、算法等等。每个资源都使用 URI (Universal Resource Identifier) 得到一个惟一的地址。所有资源都共享统一的界面，以便在客户端和服务器之间传输状态。使用的是标准的 HTTP 方法，比如 GET、PUT、POST 和 DELETE。&lt;/p&gt;
&lt;p&gt;非常简单适用的解释:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;REST是一套用来创建Web Service的方法。&lt;/li&gt;
&lt;li&gt;REST式的Web Service的主旨是让事情尽量的简单化。&lt;/li&gt;
&lt;li&gt;REST式的Web Service使用HTTP里的方法：GET， POST， DELETE， PUT。你不需要使用URL或请求的内容来指定这个方法。&lt;/li&gt;
&lt;li&gt;REST式的Web Service使用URL来指明你将要操作什么对象。&lt;/li&gt;
&lt;li&gt;REST式的Web Service使用HTTP状态码作为返回值。&lt;/li&gt;
&lt;li&gt;REST式的Web Service调用产生的HTTP请求内容只是用于服务数据——不是用来指明调用方法，目标对象或返回值的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;restify模块使得在Node.js中写正确的REST API变得容易了很多，而且它还提供了即装即用的支持，如版本控制、错误处理、CORS和内容协商。&lt;/p&gt;
&lt;h2 id=&quot;eventproxy_模块&quot;&gt;eventproxy 模块&lt;/h2&gt;&lt;p&gt;在Nodejs中由于其异步调用的特点，往往会编写很长的深度嵌套的代码，不仅可读性差，维护困难，而且因为无法利用并行特性导致代码效率低下。&lt;br&gt;EventProxy是一个很轻量的工具，但是能够带来一种事件式编程的思维变化。有几个特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用事件机制解耦复杂业务逻辑&lt;/li&gt;
&lt;li&gt;移除被广为诟病的深度callback嵌套问题&lt;/li&gt;
&lt;li&gt;将串行等待变成并行等待，提升多异步协作场景下的执行效率&lt;/li&gt;
&lt;li&gt;友好的Error handling&lt;/li&gt;
&lt;li&gt;无平台依赖，适合前后端，能用于浏览器和Node.js&lt;/li&gt;
&lt;li&gt;兼容CMD，AMD以及CommonJS模块环境&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/eventproxy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.npmjs.com/package/eventproxy&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在本系统的实现过程中我们使用该模块来利用事件机制对复杂的业务逻辑进行解耦。&lt;/p&gt;
&lt;h1 id=&quot;Mongodb数据库简述&quot;&gt;Mongodb数据库简述&lt;/h1&gt;&lt;p&gt;Mongo是一个高性能，开源，无模式的文档型数据库，它在许多场景下可用于替代传统的关系型数据库或键/值存储方式，旨在为WEB应用提供可护展的高性能数据存储解决方案，它是很多Nodejs应用的好伴侣.&lt;/p&gt;
&lt;p&gt;MongoDB由‘数据库’组成，数据库由‘集合’组成，集合由‘文档’组成。‘域’组成了文档，集合可以被‘索引’，从而提高了查找和排序的性能。&lt;br&gt;最后，我们从MongoDB读取数据的时候是通过‘游标’进行的，除非需要，游标不会真正去作读的操作。&lt;/p&gt;
&lt;p&gt;虽然这些概念和那些关系数据库中的相应概念很相似，但是还是存在差异的。关键的差异在于关系数据库是在‘表’这一层次定义‘列’的，而一个面向文档的数据库则是在‘文档’这一层次定义‘域’的。也就是说，集合中的每个文档都可以有独立的域。&lt;br&gt;因此，虽说集合相对于表来说是一个简化了的容器，而文档则包含了比行要多得多的信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7pun7p.com1.z0.glb.clouddn.com/blog/mongo_logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Docker容器技术&quot;&gt;Docker容器技术&lt;/h1&gt;&lt;p&gt;Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）。几乎没有性能开销,可以很容易地在机器和数据中心中运行。最重要的是,他们不依赖于任何语言、框架包括系统。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;百度百科 &lt;a href=&quot;http://baike.baidu.com/link?url=ScLumbWwrxxcWth3ZEbYHJFDSQF5d_OXfGjkT45OKooynZUcmlcBNfnV4SiUKpBe6eXVHmpwdUrhBh1FqJmSDa&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://baike.baidu.com/link?url=ScLumbWwrxxcWth3ZEbYHJFDSQF5d_OXfGjkT45OKooynZUcmlcBNfnV4SiUKpBe6eXVHmpwdUrhBh1FqJmSDa&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://7pun7p.com1.z0.glb.clouddn.com/blog/docker_logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;利用docker我们可以:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动打包和部署应用&lt;/li&gt;
&lt;li&gt;创建轻量、私有的PaaS环境&lt;/li&gt;
&lt;li&gt;自动化测试和持续集成/部署&lt;/li&gt;
&lt;li&gt;部署并扩展Web应用、数据库和后端服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;利用Docker可以将我们的nodejs服务器部署到远程的VPS服务器上去。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本篇介绍以Nodejs和Mongodb为后端，以Ionic为前端，以Docker作为服务器容器为基础架构的混合App开发方式的技术综述。&lt;/p&gt;
&lt;p&gt;我已经把项目文件整理起来放到&lt;a href=&quot;https://github.com/rdmclin2/fcws&quot;&gt;github&lt;/a&gt;上了，供大家参考。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="ionic" scheme="http://www.mclspace.com/categories/ionic/"/>
    
    
      <category term="ionic" scheme="http://www.mclspace.com/tags/ionic/"/>
    
      <category term="mongodb" scheme="http://www.mclspace.com/tags/mongodb/"/>
    
      <category term="nodejs" scheme="http://www.mclspace.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>凤城卫士API文档</title>
    <link href="http://www.mclspace.com/2015/11/18/fcws-api-doc/"/>
    <id>http://www.mclspace.com/2015/11/18/fcws-api-doc/</id>
    <published>2015-11-18T12:53:01.000Z</published>
    <updated>2015-11-18T16:40:22.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本篇为凤城卫士的API文档，包括其url,接受的参数，示例url以及返回值示例。对于REST API的 设计感兴趣的可以移步&lt;a href=&quot;http://mclspace.com/2015/11/03/restful-note/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注: 本篇中的url均具有前缀 &lt;em&gt;/api/v1&lt;/em&gt; ,这里为简便起见，进行了省略.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;用户信息&quot;&gt;用户信息&lt;/h1&gt;&lt;h2 id=&quot;授权验证_&lt;!-这边应该POST,因为重新生成了token_-&gt;&quot;&gt;授权验证 &lt;!--这边应该POST,因为重新生成了token --&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;/auth/local&lt;/code&gt; GET 验证用户名密码，并重新生成token，返回基本的用户信息&lt;br&gt;接受参数:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;id     String 用户id&lt;/li&gt;
&lt;li&gt;password         String 用户密码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例 : &lt;code&gt;GET localhost:3000/api/v1/auth/local?id=44220&amp;amp;password=44220&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#10;  &amp;#34;id&amp;#34;: &amp;#34;44220&amp;#34;,&amp;#10;  &amp;#34;role&amp;#34;: &amp;#34;high-level&amp;#34;,&amp;#10;  &amp;#34;description&amp;#34;: &amp;#34;&amp;#24178;&amp;#20107;1&amp;#34;,&amp;#10;  &amp;#34;name&amp;#34;: &amp;#34;&amp;#34;,&amp;#10;  &amp;#34;accessToken&amp;#34;: &amp;#34;d827b0ef-4e21-4cb7-b89f-c0b601fbe4b1&amp;#34;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;重置密码_&lt;!-这边应该用PUT_,因为用户更新了密码_-&gt;&quot;&gt;重置密码 &lt;!--这边应该用PUT ,因为用户更新了密码 --&gt;&lt;/h2&gt;&lt;p&gt; &lt;code&gt;/users/changePassword&lt;/code&gt; POST 重置用户密码，重新生成盐值和hash存储到数据库中，返回修改后的用户基本信息&lt;br&gt;接受参数:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;id     String 用户id&lt;/li&gt;
&lt;li&gt;password         String 用户密码&lt;/li&gt;
&lt;li&gt;new_password         String 新的用户密码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例 : &lt;code&gt;POST localhost:3000/api/v1/users/changePassword&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#10;  &amp;#34;id&amp;#34;: &amp;#34;44220&amp;#34;,&amp;#10;  &amp;#34;role&amp;#34;: &amp;#34;high-level&amp;#34;,&amp;#10;  &amp;#34;description&amp;#34;: &amp;#34;&amp;#24178;&amp;#20107;1&amp;#34;,&amp;#10;  &amp;#34;name&amp;#34;: &amp;#34;&amp;#34;,&amp;#10;  &amp;#34;accessToken&amp;#34;: &amp;#34;d827b0ef-4e21-4cb7-b89f-c0b601fbe4b1&amp;#34;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;获得用户信息_//这边应该用/users/:id&quot;&gt;获得用户信息 //这边应该用/users/:id&lt;/h2&gt;&lt;p&gt;&lt;code&gt;/users/details&lt;/code&gt; GET 获取用户详细信息,如最近的主题以及最近的回复&lt;/p&gt;
&lt;p&gt;接受参数:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;access_token         String 用户的token&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例 :  &lt;code&gt;GET localhost:3000/api/v1/users/details?access_token=e25be7a2-0553-4104-a210-bde3873bfdb6&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#10;  &amp;#34;id&amp;#34;: &amp;#34;13852862738&amp;#34;,&amp;#10;  &amp;#34;role&amp;#34;: &amp;#34;low-level&amp;#34;,&amp;#10;  &amp;#34;description&amp;#34;: &amp;#34;&amp;#28023;&amp;#38517;&amp;#21306;&amp;#22478;&amp;#35199;&amp;#34903;&amp;#36947;&amp;#24773;&amp;#25253;&amp;#21592;&amp;#34;,&amp;#10;  &amp;#34;name&amp;#34;: &amp;#34;&amp;#39640;&amp;#26376;&amp;#34;,&amp;#10;  &amp;#34;recent_posts&amp;#34;: [&amp;#10;    &amp;#123;&amp;#10;      &amp;#34;_id&amp;#34;: &amp;#34;564aef7bd443b5243c7e826b&amp;#34;,&amp;#10;      &amp;#34;author_id&amp;#34;: &amp;#34;13852862738&amp;#34;,&amp;#10;      &amp;#34;content&amp;#34;: &amp;#34;&amp;#27979;&amp;#35797;&amp;#24773;&amp;#25253;&amp;#34;,&amp;#10;      &amp;#34;important&amp;#34;: false,&amp;#10;      &amp;#34;create_at&amp;#34;: &amp;#34;2015-11-17T09:12:27.217Z&amp;#34;&amp;#10;    &amp;#125;&amp;#10;  ],&amp;#10;  &amp;#34;recent_replies&amp;#34;: [&amp;#10;    &amp;#123;&amp;#10;      &amp;#34;_id&amp;#34;: &amp;#34;564aef8fd443b5243c7e826d&amp;#34;,&amp;#10;      &amp;#34;author_id&amp;#34;: &amp;#34;13852862738&amp;#34;,&amp;#10;      &amp;#34;content&amp;#34;: &amp;#34;&amp;#21621;&amp;#21621;&amp;#34;,&amp;#10;      &amp;#34;create_at&amp;#34;: &amp;#34;2015-11-17T09:12:47.664Z&amp;#34;&amp;#10;    &amp;#125;,&amp;#10;    &amp;#123;&amp;#10;      &amp;#34;_id&amp;#34;: &amp;#34;564aef85d443b5243c7e826c&amp;#34;,&amp;#10;      &amp;#34;author_id&amp;#34;: &amp;#34;13852862738&amp;#34;,&amp;#10;      &amp;#34;content&amp;#34;: &amp;#34;&amp;#35780;&amp;#35770;&amp;#19968;&amp;#20010;&amp;#34;,&amp;#10;      &amp;#34;create_at&amp;#34;: &amp;#34;2015-11-17T09:12:37.741Z&amp;#34;&amp;#10;    &amp;#125;&amp;#10;  ]&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;情报信息&quot;&gt;情报信息&lt;/h1&gt;&lt;h2 id=&quot;获取情报列表&quot;&gt;获取情报列表&lt;/h2&gt;&lt;p&gt;&lt;code&gt;/posts&lt;/code&gt; GET 获取帖子列表&lt;/p&gt;
&lt;p&gt;接受参数:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;limit     Number 每页的情报数量&lt;/li&gt;
&lt;li&gt;page         Number 页数&lt;/li&gt;
&lt;li&gt;access_token         String 用户的token&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例: &lt;code&gt;GET localhost:3000/api/v1/posts?access_token=e25be7a2-0553-4104-a210-bde3873bfdb6&amp;amp;limit=5&amp;amp;page=1&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&amp;#10;  &amp;#123;&amp;#10;    &amp;#34;_id&amp;#34;: &amp;#34;564aef7bd443b5243c7e826b&amp;#34;,&amp;#10;    &amp;#34;author_id&amp;#34;: &amp;#34;13852862738&amp;#34;,&amp;#10;    &amp;#34;content&amp;#34;: &amp;#34;&amp;#27979;&amp;#35797;&amp;#24773;&amp;#25253;&amp;#34;,&amp;#10;    &amp;#34;important&amp;#34;: false,&amp;#10;    &amp;#34;create_at&amp;#34;: &amp;#34;2015-11-17T09:12:27.217Z&amp;#34;,&amp;#10;    &amp;#34;author&amp;#34;: &amp;#123;&amp;#10;      &amp;#34;name&amp;#34;: &amp;#34;&amp;#39640;&amp;#26376;&amp;#34;&amp;#10;    &amp;#125;&amp;#10;  &amp;#125;,&amp;#10;  &amp;#123;&amp;#10;    &amp;#34;_id&amp;#34;: &amp;#34;564ae2c08bb772bf39386e2b&amp;#34;,&amp;#10;    &amp;#34;author_id&amp;#34;: &amp;#34;44121&amp;#34;,&amp;#10;    &amp;#34;content&amp;#34;: &amp;#34;hello&amp;#34;,&amp;#10;    &amp;#34;important&amp;#34;: true,&amp;#10;    &amp;#34;create_at&amp;#34;: &amp;#34;2015-11-17T08:18:08.800Z&amp;#34;,&amp;#10;    &amp;#34;author&amp;#34;: &amp;#123;&amp;#10;      &amp;#34;name&amp;#34;: &amp;#34;&amp;#34;&amp;#10;    &amp;#125;&amp;#10;  &amp;#125;&amp;#10;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;获取某个帖子的具体内容&quot;&gt;获取某个帖子的具体内容&lt;/h2&gt;&lt;p&gt;&lt;code&gt;/posts/:id&lt;/code&gt; GET 获取某个帖子的具体内容&lt;/p&gt;
&lt;p&gt;接受参数:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;id    String 帖子的id&lt;/li&gt;
&lt;li&gt;access_token         String 用户的token&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例: &lt;code&gt;GET localhost:3000/api/v1/posts/564aef7bd443b5243c7e826b?access_token=e25be7a2-0553-4104-a210-bde3873bfdb6&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#10;  &amp;#34;_id&amp;#34;: &amp;#34;564aef7bd443b5243c7e826b&amp;#34;,&amp;#10;  &amp;#34;author_id&amp;#34;: &amp;#34;13852862738&amp;#34;,&amp;#10;  &amp;#34;content&amp;#34;: &amp;#34;&amp;#27979;&amp;#35797;&amp;#24773;&amp;#25253;&amp;#34;,&amp;#10;  &amp;#34;important&amp;#34;: false,&amp;#10;  &amp;#34;photos&amp;#34;: [],&amp;#10;  &amp;#34;create_at&amp;#34;: &amp;#34;2015-11-17T09:12:27.217Z&amp;#34;,&amp;#10;  &amp;#34;author&amp;#34;: &amp;#123;&amp;#10;    &amp;#34;name&amp;#34;: &amp;#34;&amp;#39640;&amp;#26376;&amp;#34;&amp;#10;  &amp;#125;,&amp;#10;  &amp;#34;replies&amp;#34;: [&amp;#10;    &amp;#123;&amp;#10;      &amp;#34;_id&amp;#34;: &amp;#34;564aef85d443b5243c7e826c&amp;#34;,&amp;#10;      &amp;#34;author_id&amp;#34;: &amp;#34;13852862738&amp;#34;,&amp;#10;      &amp;#34;post_id&amp;#34;: &amp;#34;564aef7bd443b5243c7e826b&amp;#34;,&amp;#10;      &amp;#34;content&amp;#34;: &amp;#34;&amp;#35780;&amp;#35770;&amp;#19968;&amp;#20010;&amp;#34;,&amp;#10;      &amp;#34;create_at&amp;#34;: &amp;#34;2015-11-17T09:12:37.741Z&amp;#34;,&amp;#10;      &amp;#34;author&amp;#34;: &amp;#123;&amp;#10;        &amp;#34;name&amp;#34;: &amp;#34;&amp;#39640;&amp;#26376;&amp;#34;&amp;#10;      &amp;#125;&amp;#10;    &amp;#125;,&amp;#10;    &amp;#123;&amp;#10;      &amp;#34;_id&amp;#34;: &amp;#34;564aef8fd443b5243c7e826d&amp;#34;,&amp;#10;      &amp;#34;author_id&amp;#34;: &amp;#34;13852862738&amp;#34;,&amp;#10;      &amp;#34;post_id&amp;#34;: &amp;#34;564aef7bd443b5243c7e826b&amp;#34;,&amp;#10;      &amp;#34;content&amp;#34;: &amp;#34;&amp;#21621;&amp;#21621;&amp;#34;,&amp;#10;      &amp;#34;create_at&amp;#34;: &amp;#34;2015-11-17T09:12:47.664Z&amp;#34;,&amp;#10;      &amp;#34;author&amp;#34;: &amp;#123;&amp;#10;        &amp;#34;name&amp;#34;: &amp;#34;&amp;#39640;&amp;#26376;&amp;#34;&amp;#10;      &amp;#125;&amp;#10;    &amp;#125;&amp;#10;  ]&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;创建情报&quot;&gt;创建情报&lt;/h2&gt;&lt;p&gt;&lt;code&gt;/posts&lt;/code&gt; POST 创建情报，返回情报基本内容&lt;/p&gt;
&lt;p&gt;参数: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;content    String 帖子的内容,不能为空&lt;/li&gt;
&lt;li&gt;important     Boolean 是否为紧急情报，默认为false&lt;/li&gt;
&lt;li&gt;photos     [String] 情报的配图，目前默认只能上传一张&lt;/li&gt;
&lt;li&gt;access_token        String 用户的token&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例: &lt;code&gt;POST localhost:3000/api/v1/posts?access_token=e25be7a2-0553-4104-a210-bde3873bfdb6&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#10;  &amp;#34;_id&amp;#34;: &amp;#34;564c34da38cad35f288846c9&amp;#34;,&amp;#10;  &amp;#34;author_id&amp;#34;: &amp;#34;13852862738&amp;#34;,&amp;#10;  &amp;#34;content&amp;#34;: &amp;#34;&amp;#27979;&amp;#35797;&amp;#28040;&amp;#24687; from postman&amp;#34;,&amp;#10;  &amp;#34;important&amp;#34;: true,&amp;#10;  &amp;#34;create_at&amp;#34;: &amp;#34;2015-11-18T08:20:42.379Z&amp;#34;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;删除情报&quot;&gt;删除情报&lt;/h2&gt;&lt;p&gt;&lt;code&gt;/posts/:id&lt;/code&gt; DELETE 删除情报，返回空文档。&lt;/p&gt;
&lt;p&gt;接受参数:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;id     String 待删除的情报的id&lt;/li&gt;
&lt;li&gt;access_token         String 用户的token&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例: &lt;code&gt;DELETE localhost:3000/api/v1/posts/564c34da38cad35f288846c9?access_token=e25be7a2-0553-4104-a210-bde3873bfdb6&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;回复&quot;&gt;回复&lt;/h1&gt;&lt;h2 id=&quot;创建回复&quot;&gt;创建回复&lt;/h2&gt;&lt;p&gt;&lt;code&gt;replys&lt;/code&gt; POST 创建一个回复，返回该回复&lt;/p&gt;
&lt;p&gt;接受参数:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;post_id         String  回复的情报的id&lt;/li&gt;
&lt;li&gt;content         String  回复内容&lt;/li&gt;
&lt;li&gt;access_token     String  用户的token&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例: &lt;code&gt;POST localhost:3000/api/v1/replys?access_token=e25be7a2-0553-4104-a210-bde3873bfdb6&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#10;  &amp;#34;_id&amp;#34;: &amp;#34;564c7234d1739e4f0b056796&amp;#34;,&amp;#10;  &amp;#34;post_id&amp;#34;: &amp;#34; 564c65c34086d9a105d78243&amp;#34;,&amp;#10;  &amp;#34;content&amp;#34;: &amp;#34;&amp;#28155;&amp;#21152;&amp;#19968;&amp;#26465;&amp;#22238;&amp;#22797;&amp;#34;,&amp;#10;  &amp;#34;author_id&amp;#34;: &amp;#34;13852862738&amp;#34;,&amp;#10;  &amp;#34;create_at&amp;#34;: &amp;#34;2015-11-18T12:42:28.692Z&amp;#34;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;删除回复&quot;&gt;删除回复&lt;/h2&gt;&lt;p&gt;&lt;code&gt;replys/:id&lt;/code&gt; DELETE 删除某个回复,返回空文档&lt;/p&gt;
&lt;p&gt;接受参数:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;id String 该回复的id&lt;/li&gt;
&lt;li&gt;access_token String 用户的token&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例: &lt;code&gt;DELETE localhost:3000/api/v1/replys/564c7234d1739e4f0b056796?access_token=e25be7a2-0553-4104-a210-bde3873bfdb6&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本篇为凤城卫士的API文档，包括其url,接受的参数，示例url以及返回值示例。对于REST API的 设计感兴趣的可以移步&lt;a href=&quot;http://mclspace.com/2015/11/03/restful-note/&quot;&gt;这篇文章&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注: 本篇中的url均具有前缀 &lt;em&gt;/api/v1&lt;/em&gt; ,这里为简便起见，进行了省略.&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="http://www.mclspace.com/categories/web/"/>
    
    
      <category term="api" scheme="http://www.mclspace.com/tags/api/"/>
    
      <category term="web" scheme="http://www.mclspace.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Bash 学习笔记</title>
    <link href="http://www.mclspace.com/2015/11/14/bash-note/"/>
    <id>http://www.mclspace.com/2015/11/14/bash-note/</id>
    <published>2015-11-13T16:21:11.000Z</published>
    <updated>2016-02-14T08:11:20.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本篇为学习bash命令时候的学习笔记，记录常用的bash命令和关于bash的常识 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;常识&quot;&gt;常识&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;kengen 的缩写是Key Generator, 所以读的时候是key gen（坚),不要问我是怎么知道的！&lt;/li&gt;
&lt;li&gt;cd的含义是“change directory”，它会改变当前目录到你指定的目录。&lt;em&gt;如果你不指定，则会返回你的 home folder&lt;/em&gt;。&lt;/li&gt;
&lt;li&gt;mac中系统卷是由开始的一个正斜杠(/)表示的,目录分隔符也是正斜杠(/),如何分辨正斜杠和反斜杠？向前倾的是正斜杠，向后倾的是反斜杠，除法用正斜杠表示&lt;/li&gt;
&lt;li&gt;~是你的用户目录&lt;/li&gt;
&lt;li&gt;如果由于你忘了使用sudo而导致命令行返回一个错误，只需输入sudo !!就可以用sudo来执行上一条指令&lt;/li&gt;
&lt;li&gt;sudo -s 临时切换整个命令行 shell 来取得 root 级别的访问权限&lt;/li&gt;
&lt;li&gt;输入 open . 可以用finder打开当前位置&lt;/li&gt;
&lt;li&gt;输入&lt;code&gt;clear&lt;/code&gt;或’ctrl’+ ‘l’ 清屏&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$_ Gives the last argument to the previous command. 表示歉意个指令的最后一个参数，所以我们创建文件并cd该文件可以写成&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir ~/test &amp;#38;&amp;#38; cd $_&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在apt-get install 后加上-y参数可以防止终端询问你是否允许&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;用wget＋下载链接 下载文件&lt;/li&gt;
&lt;li&gt;ssh user@hostname,例如mcl@114.212.87.56 进行ssh远程登录&lt;/li&gt;
&lt;li&gt;whoami 查看当前系统的用户名&lt;/li&gt;
&lt;li&gt;who 可以查看当前登录的用户&lt;/li&gt;
&lt;li&gt;wc 可以统计数目,如: &lt;code&gt;who | wc -l&lt;/code&gt; ，显示当前登录的用户的数量&lt;/li&gt;
&lt;li&gt;为什么zsh中没换行会出百分号？zsh里会有%，bash里不会有，因为输出的结果没有换行，在bash里命令提示符会直接跟在输出的结果后面也就是[]$…这种效果，而zsh里强制换行了，怕你自己不知道其实你没换行，就加了%&lt;/li&gt;
&lt;li&gt;执行一个脚本时，会先开启一个子shell环境（不知道执行其它程序是不是这样），然后将父shell中的所有系统环境变量复制过来，这个脚本中的语句就在子shell中执行。（也就是说父shell的环境变量在子shell中可以调用，但反过来就不行，如果在子 shell中定义了环境变量，只对该shell或者它的子shell有效，当该子shell结束时，也可以理解为脚本执行完时，变量消失。） &lt;strong&gt;因此如果想要在当前shell中设置环境变量需要用source命令而不是sh,source会在当前shell中执行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;du -sh 文件或目录名 可以插卡磁盘用量&lt;/li&gt;
&lt;li&gt;ps -A 显示所有进程 -a显示终端中的所有进程 配合grep可以搜索某一进程&lt;/li&gt;
&lt;li&gt;top 可以查看动态进程&lt;/li&gt;
&lt;li&gt;lsof -i :8080 查看某一端口的占用情况&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- ## [learn bash the hard way](http://cli.learncodethehardway.org/)
- hostname 显示本机的网络名
- pushd push directory
&gt; $ push一个文件路径,左边是栈顶,如果只输入pushd会在你的当前目录和你pushd的上个目录切换
The pushd command takes your current directory and &quot;pushes&quot; it into a list for later, then it changes to another directory. It&#39;s like saying, &quot;Save where I am, then go here.&quot;

- popd pop directory
&gt; $ pop刚刚输入的文件路径
The popd command takes the last directory you pushed and &quot;pops&quot; it off, taking you back there.

- xargs execute arguments
- grep find things inside files
- apropos find what man page is appropriate
- env look at your environment
- echo print some arguments
- export export/set a new environment variable
- exit exit the shell
- chmod change permission modifiers
- chown change ownership
- touch 创建新文件 --&gt;
&lt;h2 id=&quot;管道和重定向&quot;&gt;管道和重定向&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;| 如 &lt;code&gt;cat ex12.txt ex13.txt | less&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;将前一个命令(|之前)的输出作为下一个命令的输入，如上面的命令将ex12.txt和ex13.txt文件的内容合起来作为less的输入&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;lt; 如 &lt;code&gt;cat &amp;lt; ex13.txt&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;将右边文件作为输入给左边的命令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;如 &lt;code&gt;cat ex13.txt &amp;gt; ex15.txt&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;命令行&quot;&gt;命令行&lt;/h2&gt;&lt;p&gt;纪录mac命令行使用过程中的经验技巧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;mac terminal 入门教程&lt;/a&gt;,这篇文章对入门很有帮助&lt;/li&gt;
&lt;li&gt;如果目录中有特殊字符（空格，括号，引号，[]，!，$，&amp;amp;，*，;，|，\），那么直接输入空格会造成系统识别困难，必须使用特殊的语法来表示这些字符。例如上例中，空格前添加反斜杠“\”（back slash）即可：&lt;code&gt;cd Punlic/Drop\ Box/&lt;/code&gt;。除了反斜杠，也可以用引号的方法：cd “Public/Drop Box”。&lt;/li&gt;
&lt;li&gt;ls &lt;code&gt;-a&lt;/code&gt;选项显示以.开头的文件,即显示隐藏文件。&lt;code&gt;-A&lt;/code&gt;选项显示除了.和..以外的其他文件。&lt;/li&gt;
&lt;li&gt;远程文件复制 scp&lt;/li&gt;
&lt;li&gt;将本地文件上传到服务器上 如 &lt;code&gt;scp -P 2222 /home/lnmp0.4.tar.gz root@www.vpser.net:/root/lnmp0.4.tar.gz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;获取远程服务器上的文件 如 &lt;code&gt;scp -P 2222 root@www.vpser.net:/root/lnmp0.4.tar.gz /home/lnmp0.4.tar.gz&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;检视文件和文件夹&quot;&gt;检视文件和文件夹&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;cat&lt;/code&gt; 如 &lt;code&gt;cat test.file&lt;/code&gt; &lt;code&gt;cat test1.txt &amp;gt;&amp;gt; test2.txt&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ concatenate 按顺序读取文件并输出到 Terminal 窗口,&lt;code&gt;cat&lt;/code&gt;命令也可以用&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;来增加文本文件的内容,例如命令&lt;code&gt;cat ../textOne.txt &amp;gt;&amp;gt; textTwo.txt&lt;/code&gt;会把 textOne.txt 的内容添加到 textTwo.txt 的结尾&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;‘less’ 如 ‘less test.file’&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ 适合用来查看长文本文件,和用man时候一样，打开了一个查看器,用 v 使用&lt;code&gt;vi&lt;/code&gt;编辑器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;‘more’ 如 ‘more test.file’&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ 和less一样，不过让画面在显示满一页时暂停，此时可按空格健继续显示下一个画面，或按Q键停止显示。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;‘which’ 如 ‘which man’&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ 这个命令会定位某个命令的文件路径,which后接某个命令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;‘head’ 如 ‘head -n 50’&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ 显示&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;‘file’ 如 ‘file test.png’&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ 这个命令会尝试根据文件的内容输出文件类型。如果一个文件缺失了扩展名，那么这个命令可能会非常有用,语法为file后接文件路径，例如图片还会给出尺寸，颜色等数值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通配符 星号（＊，Asterisk）如&lt;code&gt;*.tiff&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ ——代表任何长度的任何字符。例如&lt;code&gt;*.tiff&lt;/code&gt;代表所有格式为tiff的文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通配符 问号（?，Question mark）如 &lt;code&gt;b?ok&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ ——代表任何单个字符。例如&lt;code&gt;b?ok&lt;/code&gt;匹配 book 但是不匹配 brook。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通配符 方括号（[]，Square brackets) 如&lt;code&gt;[Dd]ocument&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ ——定义一定范围的字符，例如&lt;code&gt;[Dd]ocument&lt;/code&gt;匹配 Document 以及 document；&lt;code&gt;doc[1-9]&lt;/code&gt;匹配doc1, doc2, …, doc9。实验下来似乎是一位一位的匹配&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;-r&lt;/code&gt;或者&lt;code&gt;-R&lt;/code&gt;选项,如 &lt;code&gt;ls -R Desktop&lt;/code&gt; &lt;code&gt;rm -r test&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ 递归，递归命令可以允许命令不执行于一个特定文件，而是指定的路径下的所有文件，大多数命令包含一个&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;编辑文件和文件夹&quot;&gt;编辑文件和文件夹&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;mkdir&lt;/code&gt; 如 &lt;code&gt;mkdir test&lt;/code&gt; &lt;code&gt;mkdir -p test/test1/test2&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ 创建目录，可以用&lt;code&gt;-p&lt;/code&gt;选项，来一起创建路径中不存在的文件夹（这样你就不用挨层创建了）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;cp&lt;/code&gt; 如&lt;code&gt;cp test1.txt test2.txt&lt;/code&gt; &lt;code&gt;cp test1.txt test/&lt;/code&gt; &lt;code&gt;cp test1.txt test/test2.txt&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ 用来把文件从一处复制到另一处,语法为cp后接原始路径，后接目标路径。如果你想复制整个文件夹和所有内容，需要添加&lt;code&gt;-R&lt;/code&gt;选项&lt;br&gt;如果指定的目标路径不含文件名，则 cp 命令会按原名复制,如果指定的目标路径包括文件名，则会复制为你指定的文件名。如果仅指定新文件名，则会在原处以新名称创建文件副本。&lt;em&gt;注意，系统会自动替换同名文件而不出现提示。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;mv&lt;/code&gt; 如’mv test1.txt test2.txt’&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ 用来移动文件,语法为mv后接原路径，后接新路径,没错，如果仅指定新文件名，它就成了重命名命令,路径规则和cp同&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;rm&lt;/code&gt; 如&lt;code&gt;rm test1.txt&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ 永久删除文件，语法为rm后接文件路径,使用 rm 命令删除的文件有可能可以通过数据恢复工具恢复,安全删除文件，可以使用srm命令,这可以防止其他人利用命令恢复或复原文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;rmdir&lt;/code&gt; 如 ‘rmdir test’ ‘rm -R test’&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ 永久删除文件夹，rmdir 命令无法删除含有任何其他文件的文件夹，所以大多数情形下rmdir命令是不适用的。不过，你可以利用rm添加-R选项来删除文件夹及包含的所有文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;find&lt;/code&gt; 如 ‘find . -name “*.png”‘&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ 这个命令根据搜索关键词定位文件路径,语法为find后接搜索的起始路径，后接定义搜索的选项，后接搜索内容（包含在引号里),注意如果你要搜索根目录，也许你想使用-x选项来避免搜索 /Volumes 文件夹。如果想使用 Soptlight 搜索服务，使用mdfind命令后接搜索关键词即可。&lt;br&gt;进阶:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#10;# -o &amp;#25628;&amp;#32034;&amp;#26465;&amp;#20214; &amp;#24182;&amp;#10;find . \\( -name &amp;#34;\*.txt&amp;#34; -o -name &amp;#34;\*.pdf&amp;#34; \\)&amp;#10;&amp;#10;# !&amp;#34920;&amp;#31034;&amp;#21542;&amp;#21017;, &amp;#26597;&amp;#25214;&amp;#25152;&amp;#26377;&amp;#19981;&amp;#26159;&amp;#20197;.txt&amp;#20026;&amp;#21518;&amp;#32512;&amp;#30340;&amp;#25991;&amp;#20214;&amp;#10;$ find . ! -name &amp;#34;*.txt&amp;#34;&amp;#10;&amp;#10;# -type &amp;#25353;&amp;#31867;&amp;#22411;&amp;#25628;&amp;#32034;, &amp;#21482;&amp;#25152;&amp;#26377;&amp;#30446;&amp;#24405;(f&amp;#34920;&amp;#31034;&amp;#25991;&amp;#20214; l&amp;#34920;&amp;#31034;&amp;#31526;&amp;#21495;&amp;#38142;&amp;#25509;(&amp;#36719;&amp;#38142;&amp;#25509;) d&amp;#34920;&amp;#31034;&amp;#30446;&amp;#24405;)&amp;#10;$ find . -type d&amp;#10;&amp;#10;# &amp;#25353;&amp;#29992;&amp;#25143;&amp;#25628;&amp;#32034; &amp;#25214;&amp;#21040;&amp;#25152;&amp;#26377;Calvin&amp;#30340;&amp;#29992;&amp;#25143;&amp;#25991;&amp;#20214;&amp;#10;find . -type f -user Calvin&amp;#10;&amp;#10;# &amp;#25353;&amp;#29031;&amp;#26102;&amp;#38388;&amp;#25628;&amp;#32034; -atime -30m  &amp;#25628;&amp;#32034;30&amp;#20998;&amp;#38047;&amp;#20869;&amp;#34987;&amp;#35775;&amp;#38382;&amp;#30340;&amp;#25991;&amp;#20214;&amp;#10;$ find . -atime -30m -type f -print&amp;#10;&amp;#10;# -atime +30m  &amp;#25628;&amp;#32034;&amp;#36229;&amp;#36807;30&amp;#20998;&amp;#38047;&amp;#34987;&amp;#35775;&amp;#38382;&amp;#30340;&amp;#25991;&amp;#20214;&amp;#10;$ find . -atime +30m -type f -print&amp;#10;&amp;#10;atime &amp;#35775;&amp;#38382;&amp;#26102;&amp;#38388; (&amp;#21333;&amp;#20301;&amp;#26377;&amp;#19968;&amp;#21608;w, &amp;#19968;&amp;#22825;d, &amp;#19968;&amp;#23567;&amp;#26102;h, &amp;#19968;&amp;#20998;&amp;#38047;m, &amp;#19968;&amp;#31186;s, &amp;#20197;&amp;#19979;&amp;#31867;&amp;#20284;&amp;#65289;&amp;#10;mtime &amp;#20462;&amp;#25913;&amp;#26102;&amp;#38388; &amp;#65288;&amp;#20869;&amp;#23481;&amp;#34987;&amp;#20462;&amp;#25913;&amp;#65289;&amp;#10;ctime &amp;#21464;&amp;#21270;&amp;#26102;&amp;#38388; &amp;#65288;&amp;#20803;&amp;#25968;&amp;#25454;&amp;#25110;&amp;#26435;&amp;#38480;&amp;#21464;&amp;#21270;&amp;#65289;&amp;#10;&amp;#10;# &amp;#25214;&amp;#21040;&amp;#20197;.txt&amp;#20026;&amp;#21518;&amp;#32512;&amp;#30340;&amp;#25991;&amp;#20214;&amp;#21518;&amp;#21024;&amp;#38500;&amp;#10;$ find . -type f -name &amp;#34;*.txt&amp;#34; -delete&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;grep&lt;/code&gt; 如 &lt;code&gt;$ grep &amp;#39;hello&amp;#39; test.doc&lt;/code&gt; 匹配test.doc文件中所有存在hello的行&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# &amp;#21305;&amp;#37197;test.doc&amp;#25991;&amp;#20214;&amp;#20013;&amp;#25152;&amp;#26377;&amp;#23384;&amp;#22312;hello&amp;#30340;&amp;#34892;&amp;#10;$ grep &amp;#39;hello&amp;#39; test.doc&amp;#10;&amp;#10;# &amp;#21305;&amp;#37197;test.doc&amp;#25991;&amp;#20214;&amp;#20013;&amp;#25152;&amp;#26377;&amp;#23384;&amp;#22312;hello&amp;#30340;&amp;#34892;, &amp;#24182;&amp;#25171;&amp;#21360;&amp;#34892;&amp;#21495;&amp;#10;$ grep -n &amp;#39;hello&amp;#39; test.doc&amp;#10;&amp;#10;# &amp;#25214;&amp;#21040;&amp;#25152;&amp;#26377;&amp;#34892;&amp;#19981;&amp;#21305;&amp;#37197;hel&amp;#25110;&amp;#32773;how, -e&amp;#21305;&amp;#37197;&amp;#22810;&amp;#20010;&amp;#27169;&amp;#24335;&amp;#10;$ grep -v -e &amp;#39;hel&amp;#39; -e &amp;#39;how&amp;#39; test.doc&amp;#10;&amp;#10;# &amp;#22312;&amp;#22810;&amp;#32423;&amp;#30446;&amp;#24405;&amp;#20013;&amp;#23545;&amp;#25991;&amp;#26412;&amp;#36882;&amp;#24402;&amp;#25628;&amp;#32034;&amp;#10;$ grep &amp;#34;class&amp;#34; . -R -n&amp;#10;&amp;#10;#&amp;#36755;&amp;#20986;&amp;#32467;&amp;#26524;:&amp;#10;./test/class.c:1:class&amp;#10;./test/class.c:2:class yes&amp;#10;./test/class.c:4:class fuck&amp;#10;./test.doc:5:class&amp;#10;./test.pdf:1:class&amp;#10;&amp;#10;# &amp;#25214;&amp;#21040;&amp;#25152;&amp;#26377;&amp;#20197;.hel&amp;#24320;&amp;#22836;&amp;#30340;&amp;#34892;, &amp;#24182;&amp;#20351;&amp;#29992;&amp;#31649;&amp;#36947;&amp;#21629;&amp;#20196;&amp;#10;$ cat test.doc | grep &amp;#39;^\.hel&amp;#39;&amp;#10;&amp;#10;# &amp;#25214;&amp;#21040;&amp;#25152;&amp;#26377;&amp;#21253;&amp;#21547;hel&amp;#34892;&amp;#30340;&amp;#34892;&amp;#25968;(&amp;#21482;&amp;#36755;&amp;#20986;&amp;#34892;&amp;#25968;, &amp;#27809;&amp;#26377;&amp;#20869;&amp;#23481;)&amp;#10;cat test.doc | grep -c &amp;#39;hel&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;grep命令是强大的文本搜索命令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;awk&quot;&gt;awk&lt;/h3&gt;&lt;p&gt;TODO&lt;/p&gt;
&lt;h3 id=&quot;sed&quot;&gt;sed&lt;/h3&gt;&lt;p&gt;TODO&lt;/p&gt;
&lt;h2 id=&quot;常用工具&quot;&gt;常用工具&lt;/h2&gt;&lt;h3 id=&quot;mtr_可以用来诊断路由节点问题&quot;&gt;mtr 可以用来诊断路由节点问题&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;MTR 是一款强大的网络诊断工具，网络管理员使用 MTR 可以诊断和隔离网络问题，并且为上游 ISP 提供有用的网络状态报告&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;直接用homebrew安装: &lt;code&gt;brew install mtr&lt;/code&gt;, 执行文件在’/usr/local/sbin/mtr’&lt;br&gt;如果出现&lt;code&gt;command not found&lt;/code&gt;,在.zshrc中添加alias,为 &lt;code&gt;alias mtr=&amp;quot;/usr/local/sbin/mtr&amp;quot;&lt;/code&gt;。&lt;br&gt;如果出现&lt;code&gt;mtr: unable to get raw sockets&lt;/code&gt;,改变owner和执行权限&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo chown root mtr&amp;#10;sudo chmod u+s mtr&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;tree_命令可以用来打印文件结构&quot;&gt;tree 命令可以用来打印文件结构&lt;/h3&gt;&lt;p&gt;tree 命令在mac下默认不存在，在ubuntu下可以用apt-get 安装，在mac下可以直接用homebrew安装: &lt;code&gt;brew install tree&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;通常使用 -L 参数控制层级,如 &lt;code&gt;tree -L 2&lt;/code&gt;&lt;br&gt;或使用 -d 参数只打印目录,如 &lt;code&gt;tree -d&lt;/code&gt;&lt;br&gt; -N 参数可以用来打印中文，避免转义&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.renfei.org/blog/mac-os-x-terminal-101.html#comment-2159038737&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cli.learncodethehardway.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;进阶&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;bash cheat sheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本篇为学习bash命令时候的学习笔记，记录常用的bash命令和关于bash的常识 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="shell" scheme="http://www.mclspace.com/categories/shell/"/>
    
    
      <category term="bash" scheme="http://www.mclspace.com/tags/bash/"/>
    
      <category term="shell" scheme="http://www.mclspace.com/tags/shell/"/>
    
  </entry>
  
</feed>
