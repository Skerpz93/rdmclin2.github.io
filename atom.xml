<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>兼续</title>
  <subtitle>谦虚</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.mclspace.com/"/>
  <updated>2016-10-24T03:04:23.000Z</updated>
  <id>http://www.mclspace.com/</id>
  
  <author>
    <name>LinChen</name>
    <email>rdmclin2@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Commander编写Node.js命令行程序</title>
    <link href="http://www.mclspace.com/2016/10/24/building-nodejs-cmd-line-tools-with-commander/"/>
    <id>http://www.mclspace.com/2016/10/24/building-nodejs-cmd-line-tools-with-commander/</id>
    <published>2016-10-24T02:58:16.000Z</published>
    <updated>2016-10-24T03:04:23.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>commander, tj编写的又一个nodejs库，主要用于为你的Nodejs程序提供命令行支持,本篇以nata-dfs为例讲解如何使用commander为项目编写命令行支持。</p>
</blockquote>
<a id="more"></a>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol>
<li><p>安装commander模块,这里使用npminstall模块提升安装速度<code>npminstall --save commmander</code></p>
</li>
<li><p>创建bin目录与你的命令行文件比如natadfs<code>mkdir bin &amp;&amp; touch natadfs</code></p>
</li>
<li><p>添加命令行文件执行权限<code>chmod +x natadfs</code></p>
</li>
<li><p>引入commander包与基本结构代码</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var program = require(&apos;commander&apos;);</div><div class="line">program</div><div class="line">  .parse(process.argv);</div></pre></td></tr></table></figure>
<p>现在运行<code>./natadfs -h</code>就可以看到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Usage: natadfs [options]</div><div class="line"></div><div class="line">Options:</div><div class="line"></div><div class="line">  -h, --help  output usage information</div></pre></td></tr></table></figure></p>
<p><code>-h</code>为commander默认的选项</p>
<h3 id="添加基本选项"><a href="#添加基本选项" class="headerlink" title="添加基本选项"></a>添加基本选项</h3><h4 id="version"><a href="#version" class="headerlink" title="version"></a>version</h4><p>我们希望能够显示工具的版本并与项目package.json中保持一致</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var program = require(&apos;commander&apos;);</div><div class="line"></div><div class="line">program</div><div class="line">  .version(require(&apos;../package.json&apos;).version)</div><div class="line">  .parse(process.argv);</div></pre></td></tr></table></figure>
<p>现在使用<code>./natadfs -h</code>可以看到多出来一个<code>-V, --version  output the version number</code>的选项,使用<code>./natadfs -V</code>可以看到当前的版本号与package.json中一致</p>
<h4 id="option"><a href="#option" class="headerlink" title="option"></a>option</h4><p>配置参数选项</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.option(&apos;-p, --apk-path &lt;apk&gt;&apos;, &apos;absolute apk path, if set we will parse the apk and install&apos;)</div></pre></td></tr></table></figure>
<p>option有4个参数</p>
<ul>
<li>第一个参数中， <code>-p</code> 为short option， <code>--apk-path</code> 为对应的long option, 二者的分割符是<code>|,</code>。可以在程序里通过<code>program.apkPath</code> 的方式取到该option的值,以由<code>-</code>分隔的变量会转成骆驼形式,即apk-path -&gt; apkPath</li>
<li>第二个为option描述, 会在help信息里展示出来</li>
<li>第三个参数为回调函数</li>
<li>第四个参数为默认值</li>
</ul>
<p>option 有两种类型</p>
<ul>
<li><code>&lt;lang&gt;</code> required参数, 使用时后边必须跟参数值, 否则程序会报错</li>
<li><code>[db]</code> optional参数, 后面可以选择是否跟参数值</li>
</ul>
<p>对于<code>nata-dfs</code>目前我们定义了部分选项,仅供参考</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">program</div><div class="line">  .version(require(&apos;../package.json&apos;).version)</div><div class="line">  .option(&apos;-p, --apk-path &lt;apk&gt;&apos;, &apos;absolute apk path, if set we will parse the apk and install&apos;)</div><div class="line">  .option(&apos;-n, --number &lt;num&gt;&apos;, `set limited actions number, default to 1000`, 1000)</div><div class="line">  .option(&apos;-p, --pkg &lt;pkg&gt;&apos;, &apos;specify the package name&apos;)</div><div class="line">  .option(&apos;-e, --entry &lt;entry&gt;&apos;, &apos;specify the starting activity entry&apos;)</div><div class="line">  .option(&apos;-d, --directory &lt;directory&gt;&apos;, &apos;specify the running directory, default to be &lt;results&gt; in the package&apos;)</div><div class="line">  .option(&apos;--device &lt;device&gt;&apos;, &apos;specify the runnging device id, default to run on all connected devices&apos;)</div><div class="line">  .option(&apos;--verbose&apos;, &apos;show more running information&apos;)</div><div class="line">  .parse(process.argv)</div></pre></td></tr></table></figure>
<h4 id="command"><a href="#command" class="headerlink" title="command"></a>command</h4><p>子命令,由于nata-dfs中没有用到，这里给出官方的示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">program</div><div class="line">  .command(&apos;setup [env]&apos;)</div><div class="line">  .description(&apos;run setup commands for all envs&apos;)</div><div class="line">  .option(&quot;-s, --setup_mode [mode]&quot;, &quot;Which setup mode to use&quot;)</div><div class="line">  .action(function(env, options)&#123;</div><div class="line">    var mode = options.setup_mode || &quot;normal&quot;;</div><div class="line">    env = env || &apos;all&apos;;</div><div class="line">    console.log(&apos;setup for %s env(s) with %s mode&apos;, env, mode);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure></p>
<h3 id="运行主程序"><a href="#运行主程序" class="headerlink" title="运行主程序"></a>运行主程序</h3><p>定义完成后，我们需要拿到用户设定的值对程序进行设置,然后运行我们的主程序,一个简单的例子如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function *run() &#123;</div><div class="line">  if (program.entry) &#123;</div><div class="line">    console.log(chalk.blue(`Using specified act $&#123;program.pkg&#125;`))</div><div class="line">    generator.entry(program.entry)</div><div class="line">  &#125;</div><div class="line">  yield generator.run()</div><div class="line">&#125;</div><div class="line">co(run)</div></pre></td></tr></table></figure></p>
<p>我们简单的判断有没有定义<code>entry</code>,如果定义了就设置entry,然后运行主程序,全程序可以参考<a href="https://github.com/open-nata/nata-dfs/blob/master/bin/natadfs" target="_blank" rel="external">github</a></p>
<p>另外command可以做一些定制的工作，可以在<a href="https://www.npmjs.com/package/commander" target="_blank" rel="external">官网</a>查看</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;commander, tj编写的又一个nodejs库，主要用于为你的Nodejs程序提供命令行支持,本篇以nata-dfs为例讲解如何使用commander为项目编写命令行支持。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="node" scheme="http://www.mclspace.com/categories/node/"/>
    
    
      <category term="node" scheme="http://www.mclspace.com/tags/node/"/>
    
      <category term="commander" scheme="http://www.mclspace.com/tags/commander/"/>
    
  </entry>
  
  <entry>
    <title>30秒搭建一个Restful服务器（严肃脸）</title>
    <link href="http://www.mclspace.com/2016/06/26/node-json-server/"/>
    <id>http://www.mclspace.com/2016/06/26/node-json-server/</id>
    <published>2016-06-26T10:12:34.000Z</published>
    <updated>2016-08-31T16:05:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们开发前端代码的时候，通常需要模拟后端服务器提供mock数据，当然你可以从头开发一个node服务器，搭配后端数据库，但还有一些简易方法，可以在本机模拟后端数据，那就是今天要讲的<a href="https://github.com/typicode/json-server" target="_blank" rel="external">json-server</a>，<code>json-server</code>根据你提供的json文件快速搭建一个支持restful接口的本地server</p>
<a id="more"></a> 
<h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><p>安装<code>json-server</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g json-server</div></pre></td></tr></table></figure></p>
<p>本地创建<code>db.json</code>文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;posts&quot;: [</div><div class="line">    &#123; &quot;id&quot;: 1, &quot;title&quot;: &quot;json-server&quot;, &quot;author&quot;: &quot;typicode&quot; &#125;</div><div class="line">  ],</div><div class="line">  &quot;comments&quot;: [</div><div class="line">    &#123; &quot;id&quot;: 1, &quot;body&quot;: &quot;some comment&quot;, &quot;postId&quot;: 1 &#125;</div><div class="line">  ],</div><div class="line">  &quot;profile&quot;: &#123; &quot;name&quot;: &quot;typicode&quot; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>开启server<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ json-server --watch db.json</div></pre></td></tr></table></figure></p>
<p>在浏览器中输入<code>http://localhost:3000/posts/1</code>会获得json数据:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;id&quot;: 1,</div><div class="line">  &quot;title&quot;: &quot;json-server&quot;,</div><div class="line">  &quot;author&quot;: &quot;typicode&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>相应的还提供其他CRUD的路由以及sort等其他数据操作:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">GET    /posts</div><div class="line">GET    /posts/1</div><div class="line">POST   /posts</div><div class="line">PUT    /posts/1</div><div class="line">PATCH  /posts/1</div><div class="line">DELETE /posts/1</div><div class="line"></div><div class="line">GET    /profile</div><div class="line">POST   /profile</div><div class="line">PUT    /profile</div><div class="line">PATCH  /profile</div></pre></td></tr></table></figure></p>
<p>s + enter 可以存储当前db的快照</p>
<h1 id="进阶-生成随机数据库"><a href="#进阶-生成随机数据库" class="headerlink" title="进阶 - 生成随机数据库"></a>进阶 - 生成随机数据库</h1><p>我们可以使用程序来帮我们生成.json文件,这里我们使用faker来实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ touch generater.js</div><div class="line">$ npm i faker lodash</div></pre></td></tr></table></figure></p>
<p>写入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">module.exports = function() &#123;</div><div class="line">  const faker = require(&apos;faker&apos;)</div><div class="line">  const _ = require(&apos;lodash&apos;)</div><div class="line"></div><div class="line">  return &#123;</div><div class="line">    people: _.times(100, n =&gt; &#123;</div><div class="line">      return &#123;</div><div class="line">        id: n,</div><div class="line">        name: faker.name.findName(),</div><div class="line">        avatar: faker.internet.avatar(),</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ json-server generater.js</div></pre></td></tr></table></figure></p>
<p>浏览器输入<code>http://localhost:3000/people</code>，将会获得100个人的随机信息</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们开发前端代码的时候，通常需要模拟后端服务器提供mock数据，当然你可以从头开发一个node服务器，搭配后端数据库，但还有一些简易方法，可以在本机模拟后端数据，那就是今天要讲的&lt;a href=&quot;https://github.com/typicode/json-server&quot;&gt;json-server&lt;/a&gt;，&lt;code&gt;json-server&lt;/code&gt;根据你提供的json文件快速搭建一个支持restful接口的本地server&lt;/p&gt;
    
    </summary>
    
      <category term="node" scheme="http://www.mclspace.com/categories/node/"/>
    
    
      <category term="node" scheme="http://www.mclspace.com/tags/node/"/>
    
      <category term="server" scheme="http://www.mclspace.com/tags/server/"/>
    
      <category term="restful" scheme="http://www.mclspace.com/tags/restful/"/>
    
  </entry>
  
  <entry>
    <title>基于ES6的Nodejs模块初始环境配置</title>
    <link href="http://www.mclspace.com/2016/05/21/node-es6-module-template/"/>
    <id>http://www.mclspace.com/2016/05/21/node-es6-module-template/</id>
    <published>2016-05-21T07:18:42.000Z</published>
    <updated>2016-05-21T07:19:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录基于ES6的Nodejs模块项目初始化的过程,主要参考<a href="http://morning.work/page/2015-11/es6-es7-develop-npm-module-using-babel.html" target="_blank" rel="external">ES2015 &amp; babel 实战：开发 NPM 模块</a>一文，原文比我写的详细的多，这里简略记录一下自己的配置过程，方便其他项目复制配置。项目文件详见<a href="https://github.com/rdmclin2/node-es6-template" target="_blank" rel="external">node-es6-template</a><br><a id="more"></a> </p>
<p>本文主要配置项为:</p>
<ul>
<li>使用Babel为项目提供使用ES6的能力</li>
<li>接入babel-preset-stage-3 以支持使用async/await</li>
<li>加入Eslint以控制代码风格和质量</li>
<li>加入mocha配置单元测试的es6环境</li>
</ul>
<h1 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mkdir node-es6-module-template &amp;&amp; cd node-es6-module-template &amp;&amp; git init &amp;&amp; npm init</div></pre></td></tr></table></figure>
<h1 id="安装babel"><a href="#安装babel" class="headerlink" title="安装babel"></a>安装babel</h1><p>为了能使用es2015以及async和await,新建文件<code>.babelrc</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;presets&quot;: [&quot;es2015&quot;, &quot;stage-3&quot;]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>安装babel插件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm i babel-preset-es2015 babel-preset-stage-3 --save-dev</div></pre></td></tr></table></figure></p>
<p>安装polyfill:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm i babel-polyfill --save-dev</div></pre></td></tr></table></figure></p>
<p>要让babel正确编译需要在入口文件顶部添加<code>require(&#39;babel-polyfill&#39;);</code></p>
<h1 id="配置Eslint"><a href="#配置Eslint" class="headerlink" title="配置Eslint"></a>配置Eslint</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save-dev eslint</div></pre></td></tr></table></figure>
<p>然后配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ eslint --init</div></pre></td></tr></table></figure></p>
<p>选择airbnb,json即可,为了让eslint能够识别es6的特性我们安装<code>babel-eslint</code>模块:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install babel-eslint@6 --save-dev</div></pre></td></tr></table></figure></p>
<p>修改.eslintrc<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;extends&quot;: &quot;airbnb&quot;,</div><div class="line">    &quot;parser&quot;: &quot;babel-eslint&quot;,</div><div class="line">    &quot;parserOptions&quot;: &#123;</div><div class="line">         &quot;sourceType&quot;: &quot;module&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;env&quot;: &#123;</div><div class="line">        &quot;mocha&quot;: true,</div><div class="line">        &quot;node&quot;: true</div><div class="line">    &#125;,</div><div class="line">    &quot;plugins&quot;: [</div><div class="line">        &quot;react&quot;</div><div class="line">    ],</div><div class="line">    &quot;rules&quot;: &#123;</div><div class="line">        &quot;strict&quot;: 0,</div><div class="line">        &quot;semi&quot;: [2, &quot;never&quot;],</div><div class="line">        &quot;arrow-body-style&quot;: [&quot;off&quot;, &quot;always&quot;],</div><div class="line">        &quot;no-console&quot;: 0,</div><div class="line">        &quot;eol-last&quot;: &quot;off&quot;,</div><div class="line">        &quot;quotes&quot;: [2, &quot;single&quot;, &#123;&quot;avoidEscape&quot;: true, &quot;allowTemplateLiterals&quot;: true&#125;]</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="基本文件结构"><a href="#基本文件结构" class="headerlink" title="基本文件结构"></a>基本文件结构</h1><p>新建<code>src</code>和<code>test</code>文件夹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mkdir src test</div></pre></td></tr></table></figure></p>
<p>在<code>src</code>中新建<code>index.js</code>文件<br>导出一个示例函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export default function foo() &#123;</div><div class="line">  return &apos;foo&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以用<code>babel-node index.js</code>进行测试</p>
<h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><p>为了让nodejs的require可以载入es6模块，需要<code>babel-core</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm i babel-core mocha --save-dev</div></pre></td></tr></table></figure></p>
<p>修改package.json的test命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">    &quot;test&quot;: &quot;mocha --compilers js:babel-core/register&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在test文件夹中新建<code>test.js</code>文件,写入如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">import foo from &apos;../src&apos;</div><div class="line">import assert from &apos;assert&apos;</div><div class="line"></div><div class="line">describe(&apos;node-es6-template&apos;, () =&gt; &#123;</div><div class="line">  it(&apos;should return foo&apos;, done =&gt; &#123;</div><div class="line">    const output = foo()</div><div class="line">    assert(output, &apos;foo&apos;)</div><div class="line">    done()</div><div class="line">  &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>使用<code>npm test</code>进行测试</p>
<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>在<code>package.json</code>中增加compile命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">    &quot;compile&quot;: &quot;babel -d lib/ src/&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>新建入口文件index.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">require(&apos;babel-polyfill&apos;);</div><div class="line">module.exports = require(&apos;./lib&apos;).default;</div></pre></td></tr></table></figure></p>
<p>为了让我们能够测试转换后的lib中的模块, 修改test.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import foo from &apos;../src&apos;</div></pre></td></tr></table></figure></p>
<p>为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import foo from &apos;../&apos;</div></pre></td></tr></table></figure></p>
<p>编辑package.json文件，将test命令改为先执行compile编译代码后再执行mocha测试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">    &quot;test&quot;: &quot;npm run compile &amp;&amp; mocha --compilers js:babel-core/register&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以用<code>$ npm test</code>测试</p>
<h1 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h1><p>添加.gitignore文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">node_modules</div><div class="line">lib</div><div class="line">logs</div><div class="line">*.log</div><div class="line">npm-debug.log*</div><div class="line">coverage</div><div class="line">.DS_Store</div></pre></td></tr></table></figure></p>
<p>添加.npmignore取消源文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">src</div></pre></td></tr></table></figure></p>
<p>在package.json设置中设置prepublish让其在发布前自动执行编译<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">    &quot;prepublish&quot;: &quot;npm run compile&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="善后"><a href="#善后" class="headerlink" title="善后"></a>善后</h1><p>为了开发环境一致在本地安装mocha和babel<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm i babel-cli mocha --save-dev</div></pre></td></tr></table></figure></p>
<p>更改package.json中的compile和test命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">    &quot;compile&quot;: &quot;./node_modules/.bin/babel -d lib/ src/&quot;,</div><div class="line">    &quot;test&quot;: &quot;npm run compile &amp;&amp; ./node_modules/.bin/mocha --compilers js:babel-core/register&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以用<code>npm test</code>进行测试,使用<code>npm publish</code>进行发布</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://morning.work/page/2015-11/es6-es7-develop-npm-module-using-babel.html" target="_blank" rel="external">ES2015 &amp; babel 实战：开发 NPM 模块</a></li>
<li><a href="http://eslint.org/" target="_blank" rel="external">ESLint官网</a></li>
<li><a href="https://github.com/babel/babel-eslint" target="_blank" rel="external">babel-eslint</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录基于ES6的Nodejs模块项目初始化的过程,主要参考&lt;a href=&quot;http://morning.work/page/2015-11/es6-es7-develop-npm-module-using-babel.html&quot;&gt;ES2015 &amp;amp; babel 实战：开发 NPM 模块&lt;/a&gt;一文，原文比我写的详细的多，这里简略记录一下自己的配置过程，方便其他项目复制配置。项目文件详见&lt;a href=&quot;https://github.com/rdmclin2/node-es6-template&quot;&gt;node-es6-template&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="nodejs" scheme="http://www.mclspace.com/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://www.mclspace.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>创建并发布Node.js模块</title>
    <link href="http://www.mclspace.com/2016/05/17/create-and-publish-a-nodejs-module/"/>
    <id>http://www.mclspace.com/2016/05/17/create-and-publish-a-nodejs-module/</id>
    <published>2016-05-17T04:07:32.000Z</published>
    <updated>2016-05-17T04:11:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们跟着npmjs的视频教程来,您可以直接看视频,下面为简略步骤方便查阅</p>
<ul>
<li><a href="https://docs.npmjs.com/getting-started/creating-node-modules" target="_blank" rel="external">创建Node.js模块</a></li>
<li><a href="https://docs.npmjs.com/getting-started/publishing-npm-packages" target="_blank" rel="external">发布Npm包</a></li>
</ul>
<a id="more"></a>
<h1 id="创建Node-js模块"><a href="#创建Node-js模块" class="headerlink" title="创建Node.js模块"></a>创建Node.js模块</h1><h3 id="创建package-json包"><a href="#创建package-json包" class="headerlink" title="创建package.json包"></a>创建package.json包</h3><p>package.json记录你的包的元信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ mkdir npm-demo-pkg-mcl &amp;&amp; cd $_</div><div class="line">$ npm init</div></pre></td></tr></table></figure></p>
<ul>
<li>author格式: <code>name &lt;email&gt; (website)</code>    例如:<code>Calvin Meng &lt;rdmclin2@gmail.com&gt; (http://www.mclspace.com)</code></li>
</ul>
<p>PS: 取一个你自己的包名,例如npm-demo-pkg-yourname</p>
<h3 id="添加Entry-Point"><a href="#添加Entry-Point" class="headerlink" title="添加Entry Point"></a>添加Entry Point</h3><p>Entry Point是你程序的入口文件，类似于java里的main<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ vim index.js</div><div class="line">输入:</div><div class="line">exports.printMsg = function()&#123;</div><div class="line">    console.log(&quot;This message is from npm package demo&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="发布NPM包"><a href="#发布NPM包" class="headerlink" title="发布NPM包"></a>发布NPM包</h1><p>任何一个有package.json文件的目录都可以发布成一个包,name和version为必须，其他为optional</p>
<h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><p>首先你得注册一个账号。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm adduser</div></pre></td></tr></table></figure></p>
<p>如果你有账号了可以用login登录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm login</div></pre></td></tr></table></figure></p>
<p>然后可以在用<code>www.npmjs.org/~username</code>访问你的信息，也可以通过<code>npm config ls</code>查看当前用户设置</p>
<h3 id="发布包"><a href="#发布包" class="headerlink" title="发布包"></a>发布包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm publish</div></pre></td></tr></table></figure>
<p>如果你使用的是cnpm会报错:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">no_perms Private mode enable, only admin can publish this module</div></pre></td></tr></table></figure></p>
<p>设置回原来的就好,记得重新adduser<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm config set registry http://registry.npmjs.org</div></pre></td></tr></table></figure></p>
<p>如果你有一些文件不想上传，可以用<code>.gitignore</code> 或者 <code>.npmignore</code>,发布完成后你可以到<code>https://npmjs.com/package/&lt;package&gt;</code> 查看你的包</p>
<h1 id="更新NPM包"><a href="#更新NPM包" class="headerlink" title="更新NPM包"></a>更新NPM包</h1><p>直接<code>npm publish</code>会出错,因为需要更新版本号。你可以手动更新，也可以使用version命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm version patch</div></pre></td></tr></table></figure></p>
<p>会增加你版本号的最后一位,另外还有minor和major。注意如果你有github库地址，这个命令会给你的github库增加一个release tag。然后再<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm publish</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们跟着npmjs的视频教程来,您可以直接看视频,下面为简略步骤方便查阅&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.npmjs.com/getting-started/creating-node-modules&quot;&gt;创建Node.js模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.npmjs.com/getting-started/publishing-npm-packages&quot;&gt;发布Npm包&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="nodejs" scheme="http://www.mclspace.com/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://www.mclspace.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Github 个性卡片</title>
    <link href="http://www.mclspace.com/2016/04/19/github-user-card/"/>
    <id>http://www.mclspace.com/2016/04/19/github-user-card/</id>
    <published>2016-04-19T15:22:11.000Z</published>
    <updated>2016-04-19T15:53:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天看到一个好玩的项目<a href="https://github.com/lepture/github-cards" target="_blank" rel="external">GitHub Cards</a>，它可以帮助你生成你的个性github名片，或者你的github项目名片。以后可以在介绍你的项目的时候用到它，既美观又大方。</p>
<a id="more"></a>
<h1 id="创建方法"><a href="#创建方法" class="headerlink" title="创建方法"></a>创建方法</h1><p>你可以直接进入<a href="http://lab.lepture.com/github-cards" target="_blank" rel="external">网站</a>进行创建,也可以通过代码直接生成。</p>
<p>首先引入<code>widget.js</code>,然后创建相应类型的div,例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;github-card&quot; data-github=&quot;rdmclin2&quot; data-width=&quot;400&quot; data-height=&quot;317&quot; data-theme=&quot;medium&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;script src=&quot;//cdn.jsdelivr.net/github-cards/latest/widget.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>可以配置宽和高，主题(default,medium)等，以下是我的github名片:</p>
<p><div class="github-card" data-github="rdmclin2" data-width="400" data-height="317" data-theme="medium"></div></p>
<script src="//cdn.jsdelivr.net/github-cards/latest/widget.js"></script>





<p>感觉不错，再贴几个项目的名片:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;github-card&quot; data-github=&quot;rdmclin2/TechStack&quot; data-width=&quot;400&quot; data-height=&quot;&quot; data-theme=&quot;medium&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;script src=&quot;//cdn.jsdelivr.net/github-cards/latest/widget.js&quot;&gt;&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;div class=&quot;github-card&quot; data-github=&quot;jie-yuan/Vue-jieyuan&quot; data-width=&quot;400&quot; data-height=&quot;150&quot; data-theme=&quot;default&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;script src=&quot;//cdn.jsdelivr.net/github-cards/latest/widget.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p><div class="github-card" data-github="rdmclin2/TechStack" data-width="400" data-height="" data-theme="medium"></div></p>
<script src="//cdn.jsdelivr.net/github-cards/latest/widget.js"></script>

<p><div class="github-card" data-github="jie-yuan/Vue-jieyuan" data-width="400" data-height="150" data-theme="default"></div></p>
<script src="//cdn.jsdelivr.net/github-cards/latest/widget.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天看到一个好玩的项目&lt;a href=&quot;https://github.com/lepture/github-cards&quot;&gt;GitHub Cards&lt;/a&gt;，它可以帮助你生成你的个性github名片，或者你的github项目名片。以后可以在介绍你的项目的时候用到它，既美观又大方。&lt;/p&gt;
    
    </summary>
    
      <category term="github" scheme="http://www.mclspace.com/categories/github/"/>
    
    
      <category term="github" scheme="http://www.mclspace.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Quiver简易指南</title>
    <link href="http://www.mclspace.com/2016/04/07/Quiver-simple-tutorial/"/>
    <id>http://www.mclspace.com/2016/04/07/Quiver-simple-tutorial/</id>
    <published>2016-04-07T07:46:16.000Z</published>
    <updated>2016-04-07T11:19:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>一直都是使用sublime在编写博客，用hexo发布,每次想写点什么的时候就用<code>hexo new draft xxx</code> 新建一个草稿。这种方式既没有组织，也不方便查阅，经常写了点草稿然后后面自己就忘记了，不方便知识管理。我理想中的笔记软件能使用Markdown，能用Vim模式，能进行笔记管理以及云存储。之前使用的笔记软件要么不够漂亮，要么不支持vim模式，要么不支持markdown，直到遇到Quiver，这才是为程序员准备的笔记软件。</p>
<p><img src="http://7pun7p.com1.z0.glb.clouddn.com/quiver.png" alt="Quiver截图"></p>
<a id="more"></a>
<h1 id="Quiver快速入门"><a href="#Quiver快速入门" class="headerlink" title="Quiver快速入门"></a>Quiver快速入门</h1><p>Quiver在github上提供了详细的使用指南,你可以阅读<a href="https://github.com/HappenApps/Quiver/wiki/Quiver快速入门" target="_blank" rel="external">Quiver快速入门</a>,如果你懒得看可以看我下文我总结的简洁版的使用指南。</p>
<h1 id="亮点"><a href="#亮点" class="headerlink" title="亮点"></a>亮点</h1><ul>
<li>Quiver的笔记是由单元格组成，五种单元格类型,文本,代码,Markdown,LaTeX,图表单元格。</li>
<li>代码单元格支持120种以上的程序语言，以及自定义主题等</li>
<li>支持Markdown,Vim模式</li>
<li>可以复制或拖图片到Quiver中，Quiver会复制一份在库中，即使源文件被删除仍然可以访问。</li>
</ul>
<h1 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h1><ul>
<li>设置同步: 在偏好设置 -&gt; 同步 下可以设置云同步</li>
<li>设置默认单元格: 在偏好设置 -&gt; 常规 -&gt; 默认单元格 为Markdown</li>
<li><strong>开启vim模式</strong> : 偏好设置 -&gt; 单元格 -&gt; Key Binding,可以为代码,Markdown和latex单元格内使用vim 模式</li>
<li>设置主题: 偏好设置主题,题主使用的是SpaceGray,你可以在<a href="https://github.com/HappenApps/Quiver/wiki/Themes" target="_blank" rel="external">第三方主题</a>中找到适合自己的或者<a href="https://github.com/HappenApps/Quiver/wiki/How-to-Design-a-Custom-Theme" target="_blank" rel="external">自己定制</a></li>
<li>设置字体大小: 偏好设置 -&gt; 风格 -&gt; 编辑器 ,将<code>font-size</code>都改成16px(或者你喜欢的的）</li>
</ul>
<h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><ul>
<li>新建笔记   “shift + 返回”(⇧⏎)</li>
<li>合并单元格 退格键 只需将光标放在第二个单元格的开头，然后按回退键。请注意不同类型的单元格不能合并</li>
<li>文本单元格 ⌥⌘1</li>
<li>代码单元格 ⌥⌘2</li>
<li>Markdown单元格 ⌥⌘3</li>
<li>LaTeX 单元格 ⌥⌘4</li>
<li>图表单元格 ⌥⌘5</li>
<li>演示者模式 ⌘⌃⌥p</li>
<li><strong>双指左右滑动有惊喜</strong></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直都是使用sublime在编写博客，用hexo发布,每次想写点什么的时候就用&lt;code&gt;hexo new draft xxx&lt;/code&gt; 新建一个草稿。这种方式既没有组织，也不方便查阅，经常写了点草稿然后后面自己就忘记了，不方便知识管理。我理想中的笔记软件能使用Markdown，能用Vim模式，能进行笔记管理以及云存储。之前使用的笔记软件要么不够漂亮，要么不支持vim模式，要么不支持markdown，直到遇到Quiver，这才是为程序员准备的笔记软件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7pun7p.com1.z0.glb.clouddn.com/quiver.png&quot; alt=&quot;Quiver截图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>我的前后端学习之旅[起航]</title>
    <link href="http://www.mclspace.com/2016/04/02/my-front-end-learn-story-set-sail/"/>
    <id>http://www.mclspace.com/2016/04/02/my-front-end-learn-story-set-sail/</id>
    <published>2016-04-02T15:28:44.000Z</published>
    <updated>2016-05-18T13:27:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这段时间一直在找实习，博客也一直没有更新，一停下来就是一个半月,再拾起也不那么容易。去年6月份我写了一篇文章<a href="http://mclspace.com/2015/06/26/my-front-end-learn-story-start/" target="_blank" rel="external">我的前后端学习之旅 – 开端</a>，那是我第一次接触到前端开发,所谓初生牛犊不怕虎，再加上JavaScript上手很容易,又有丰富的库支持,看了几本HTML,CSS,JS的书就开始上手项目了。虽然遇到不少问题，但通过社区的帮助以及谷歌总归可以解决，自以为已经掌握前端开发了，然而在最近为实习准备面试的时候才发现要补的很多，参加<a href="ife.baidu.com">百度前端技术学院</a>也让我有机会从基础开始了解和实践前端开发,弥补自己基础的薄弱。</p>
<p>在学习的过程中，总会有不同的阶段，我想拿到阿里前端实习offer算是对我之前学习前端的努力的肯定，因此想把这个offer作为在前端学习路上的一个里程碑，代表我正式将大前端作为以后技术路线的方向，转职初级前端魔法师学徒。这次阿里面试一共5面,3轮技术，1轮交叉面，1轮HR面,具体的问题就不讲了，每个人都会不一样，总结一下的话，有以下几点:</p>
<ol>
<li>一是平时的积累，很重要，面试官会看你对某个技术研究到什么程度，平时由于好奇所以研究的一些东西在面试的时候也许会派上大用场。</li>
<li>二是博客，github要早早的准备，博客代表了你学习过程中的总结和体会，优质的博客会为你加不少分，github上不需要你有多么牛掰的项目，不过要有长期维护的项目,完善的文档，大片的绿色代表你平时在github上积累较多。我在面试的过程中有两面的面试官都问到了github和博客的内容(虽然github上也没啥货…)。</li>
<li>三是对新知识的敏感程度和热情。前端目前的发展可以说是日新月异，Node,Angular,React,Vue,每隔几个月就有新的概念催生，优秀的前端不会视这些令人兴奋的项目而不见。例如面试的时候问到Grunt,Gulp,Webpack,平时没有积累的话很难回答。</li>
<li>四是需要有一个靠谱的由你主导的前端项目，例如我之前写的项目<a href="https://github.com/rdmclin2/fcws-backend" target="_blank" rel="external">凤城卫士</a>，由于几乎是由我完全主导的项目，因此面试官和我聊这个项目的时候我可以扯得很好，面试官也吃不准你的水平，可以用这个项目带面试官的节奏。</li>
</ol>
<h1 id="前一段时间的学习过程"><a href="#前一段时间的学习过程" class="headerlink" title="前一段时间的学习过程"></a>前一段时间的学习过程</h1><p>该阶段学习过程比较粗犷，主要项目导向，边学边查，接触到广度有了，深度不够，不过也培养了对前端的兴趣，对自己应该学习什么有一定的认识.</p>
<ul>
<li>阅读《Javascript DOM编程艺术》</li>
<li>阅读《Head First Html &amp; Css 》</li>
<li>阅读 <a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000" target="_blank" rel="external">廖雪峰的javascript教程js篇</a></li>
<li>阅读 <a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434499993118b8173572625b4afe93a8b19dd707ea1d000" target="_blank" rel="external">廖雪峰的javascript教程jquery篇</a></li>
<li>阅读 <a href="https://nqdeng.github.io/7-days-nodejs/" target="_blank" rel="external">《7天学会Nodejs》</a></li>
<li>阅读 <a href="https://github.com/alsotang/node-lessons" target="_blank" rel="external">《Nodejs包教不包会》</a></li>
<li>阅读《Nodejs 开发指南》学习node，了解express框架，并重写其中的Microblog</li>
<li>学习 gulpjs,学会使用gulp编写简单的项目构建任务</li>
<li>阅读 <a href="http://codeguide.bootcss.com/" target="_blank" rel="external">html&amp;css 编码规范</a></li>
<li>学习使用 Ionic + Express+ Mongoose + Boostrap + Jquery等技术编写了一套端到端且具备后台数据管理功能的产品<a href="https://github.com/rdmclin2/fcws-backend" target="_blank" rel="external">凤城卫士</a>。</li>
<li>阅读 《深入浅出Node.js》</li>
<li>学习 <a href="http://vuejs.org" target="_blank" rel="external">Vue</a>,并着手使用Vue编写<a href="https://github.com/jie-yuan/Vue-jieyuan" target="_blank" rel="external">结缘</a>的前端界面中…</li>
</ul>
<h1 id="下一阶段的学习计划"><a href="#下一阶段的学习计划" class="headerlink" title="下一阶段的学习计划"></a>下一阶段的学习计划</h1><p>前一段时间主要是项目导向，没有注重基础的学习，因此这一阶段的重点是打牢基础，多多实践(IFE和结缘)，并紧密关注前端的发展。在去阿里实习前着重学习和掌握以下知识和技能:</p>
<ul>
<li>打牢HTML &amp; CSS基础,盒模型,CSS布局,浏览器兼容,编码规范,快速H5构建</li>
<li>打牢JavaScript基础</li>
<li>使用原生JavaScript编写页面功能</li>
<li>ES6</li>
</ul>
<h1 id="记录学习过程"><a href="#记录学习过程" class="headerlink" title="记录学习过程"></a>记录学习过程</h1><p>将上一阶段未完成的挪到该阶段.</p>
<ul>
<li>完成 <a href="ife.baidu.com">百度前端技术学院</a>第一阶段,<a href="https://htmlpreview.github.io/?https://github.com/rdmclin2/ife_baidu/blob/master/task1_1_6/index.html" target="_blank" rel="external">代表作</a>。</li>
<li>完成 <a href="ife.baidu.com">百度前端技术学院</a>第二阶段,<a href="https://htmlpreview.github.io/?https://github.com/rdmclin2/ife_baidu/blob/master/task1_2_22/index.html" target="_blank" rel="external">代表作</a>。</li>
<li>完成 <a href="ife.baidu.com">百度前端技术学院</a>第三阶段,<a href="http://mclspace.com/ife_baidu/task47/" target="_blank" rel="external">代表作</a></li>
<li>进行 <a href="ife.baidu.com">百度前端技术学院</a>第四阶段</li>
<li>阅读 《JavaScript高级程序设计》中…</li>
<li>阅读 《CSS设计指南》中…</li>
<li>学习Webpack的使用,<a href="http://zhaoda.net/webpack-handbook" target="_blank" rel="external">Webpack 中文指南</a>,<a href="https://segmentfault.com/a/1190000002551952" target="_blank" rel="external">Webpack 入门指迷</a></li>
</ul>
<h1 id="待学习的库"><a href="#待学习的库" class="headerlink" title="待学习的库"></a>待学习的库</h1><ul>
<li><a href="https://github.com/mbostock/d3" target="_blank" rel="external">d3.js</a>, <a href="http://www.ourd3js.com/wordpress/?p=396" target="_blank" rel="external">教程</a></li>
<li><a href="https://github.com/ecomfe/echarts" target="_blank" rel="external">Echarts</a></li>
</ul>
<h1 id="待阅读列表"><a href="#待阅读列表" class="headerlink" title="待阅读列表"></a>待阅读列表</h1><ul>
<li><a href="http://learn.shayhowe.com/html-css/" target="_blank" rel="external">Learn to Code HTML &amp; CSS</a><blockquote>
<p>$ 非常不错的教程</p>
</blockquote>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这段时间一直在找实习，博客也一直没有更新，一停下来就是一个半月,再拾起也不那么容易。去年6月份我写了一篇文章&lt;a href=&quot;http://
    
    </summary>
    
      <category term="fe" scheme="http://www.mclspace.com/categories/fe/"/>
    
    
      <category term="fe" scheme="http://www.mclspace.com/tags/fe/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js入门教程</title>
    <link href="http://www.mclspace.com/2016/02/16/jieyuan-development-2/"/>
    <id>http://www.mclspace.com/2016/02/16/jieyuan-development-2/</id>
    <published>2016-02-15T17:35:21.000Z</published>
    <updated>2016-08-24T10:50:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><br>关于结缘的前端使用哪种框架，笔者之前有过Angular.js的开发经验，在React.js和Vue.js之间徘徊了一阵子最终选择了Vue，在我看来Vue和Angular有许多的共同点，在看Vue的文档的时候有很熟悉的味道，但和React类似只关注View这一块。Vue没有像React那样什么都放到js中，简洁方便的api设计以及组件式开发是我选择它的主要原因。<br></blockquote>

<a id="more"></a>
<p>实现前端大抵有两种思路，一个是由后端拼接页面后返回完整的网页，然后由浏览器渲染。另一种是由后端返回json之类的数据，然后由前端拼接数据进行展示，当然也可以两者混搭。实现前后端分离是很多web开发人员的梦想，有兴趣的可以看看<a href="http://www.cnblogs.com/zergcom/p/4439383.html" target="_blank" rel="external">Web系统开发构架再思考-前后端的完全分离</a>。</p>
<p>结缘前端打算使用Vue.js做成SPA(Single Page Application)的形式，即一个入口页面，后续数据由后端Nodejs实现Restful风格的API调用，然后在前端呈现。使用Webpack作为前端工程解决方案解决资源管理，按需加载，实时更新等问题。本篇我们探索使用Vue.js实现结缘的登录界面。</p>
<h1 id="安装部署Vue开发环境"><a href="#安装部署Vue开发环境" class="headerlink" title="安装部署Vue开发环境"></a>安装部署Vue开发环境</h1><p>为了方便大型应用的开发，尤大大开发了<a href="https://github.com/vuejs/vue-cli" target="_blank" rel="external">Vue-cli</a>脚手架，提供了一系列的工具和库，方便我们快速的进行开发，具体功能包括单文件 Vue 组件，热加载，保存时检查代码，单元测试等，本质上和Express的<code>express-generator</code>是一样的。</p>
<p>因为<code>vue-cli</code>依赖webpack,所以首先安装webpack这个工具:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g webpack</div></pre></td></tr></table></figure></p>
<p>关于webpack如果没了解过可以看<a href="https://segmentfault.com/a/1190000003499526" target="_blank" rel="external">基于webpack搭建前端工程解决方案探索</a>,然后安装<code>vue-cli</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g vue-cli</div></pre></td></tr></table></figure></p>
<p>使用方法如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ vue init webpack my-project</div><div class="line">$ cd my-project</div><div class="line">$ npm install</div><div class="line">$ npm run dev</div></pre></td></tr></table></figure></p>
<p>执行完成后在浏览器中<code>localhost:8080</code>查看。</p>
<p>尤大大目前提供了4套官方模板,如下:</p>
<ul>
<li>browserify - A full-featured Browserify + vueify setup with hot-reload, linting &amp; unit testing.</li>
<li>browserify-simple - A simple Browserify + vueify setup for quick prototyping.</li>
<li>webpack - A full-featured Webpack + vue-loader setup with hot reload, linting, testing &amp; css extraction.</li>
<li>webpack-simple - A simple Webpack + vue-loader setup for quick prototyping.<br>可以根据需求选择即可。</li>
</ul>
<p>在使用过程中遇到两个问题,如果你也遇到了，可以在issues中查看。</p>
<ul>
<li><a href="https://github.com/vuejs/vue-cli/issues/34" target="_blank" rel="external">npm install -g vue-cli error</a></li>
<li><a href="https://github.com/vuejs/vue-cli/issues/36" target="_blank" rel="external">The default port 8080 cannot work</a></li>
</ul>
<h1 id="学习ES6"><a href="#学习ES6" class="headerlink" title="学习ES6"></a>学习ES6</h1><p>由于vue-cli生成的文件中使用的是ES6的语法，而ES6是未来的趋势，所以ES6必须一学,目前浏览器和Nodejs对ES6的支持程度不断提高，不过要在所有的浏览器中使用es6代码目前还不可行，不过<a href="https://babeljs.io" target="_blank" rel="external">babel</a>可以帮你提前体验新的语法而不需要等待浏览器支持。babel本质上是一个js的预编译器，可以把es6程序编译成es5，从而在支持ES5的环境中运行。</p>
<blockquote>
<p>特地查了一下ES6和ES2016,ES2015的区别，实际上ES6===ES2015 &lt; ES2016,由于ECMA委员会决定将标准每年一更，因此新推出的ES6被改名为ES2015,后面的标准将实行年制命名，如ES2016,ES2017…</p>
</blockquote>
<p>学习ES6/ES2015可以参考如下资源</p>
<ul>
<li><a href="https://babeljs.io/docs/learn-es2015/" target="_blank" rel="external">Learn ES2015 A detailed overview of ECMAScript 6 features.</a> 对ES6语法的概览</li>
<li><a href="http://es6.ruanyifeng.com" target="_blank" rel="external">ECMAScript 6入门</a> 阮一峰老师的ES6入门</li>
</ul>
<p>学习vue目前没有足够的教程可以帮我们快速了解如何构建我们的应用,所以只能一点点摸索，借鉴前人的经验,所幸尤大大有个使用Vue开发的<a href="https://github.com/vuejs/vue-hackernews" target="_blank" rel="external">Hacker News Clone</a>,我们可以从这里吸收开发经验。另外Cnode社区也有个用Vue开发的客户端<a href="https://github.com/shinygang/Vue-cnodejs/tree/master/src/views" target="_blank" rel="external">Vue-cnodejs</a>也很不错。</p>
<p>这里首先简要介绍一些Hacker News 客户端中使用到的ES6特性:</p>
<h3 id="箭头函数-gt-和this"><a href="#箭头函数-gt-和this" class="headerlink" title="箭头函数 =&gt; 和this"></a>箭头函数 =&gt; 和this</h3><p><code>=&gt;</code>是匿名函数的一种简写，即lamda表达式,格式为<code>( 形参列表 ) =&gt; { 函数体 }</code>,使用箭头函数，内部函数继承了外围作用域的this值，再也不用写<code>var that=this</code>这种hack代码了。直接上代码看:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// Expression bodies</div><div class="line">var odds = evens.map(v =&gt; v + 1);</div><div class="line">var nums = evens.map((v, i) =&gt; v + i);</div><div class="line"></div><div class="line">// Statement bodies</div><div class="line">nums.forEach(v =&gt; &#123;</div><div class="line">  if (v % 5 === 0)</div><div class="line">    fives.push(v);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// Lexical this</div><div class="line">var bob = &#123;</div><div class="line">  _name: &quot;Bob&quot;,</div><div class="line">  _friends: [],</div><div class="line">  printFriends() &#123;</div><div class="line">    this._friends.forEach(f =&gt;</div><div class="line">      console.log(this._name + &quot; knows &quot; + f));</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="模块定义"><a href="#模块定义" class="headerlink" title="模块定义"></a>模块定义</h3><p>在ES6之前js没有一个统一的模块定义方式，流行的定义方式有AMD,CommonJS等,而ES6从语言层面对定义模块的方式进行了统一。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// lib/math.js</div><div class="line">export function sum(x, y) &#123;</div><div class="line">  return x + y;</div><div class="line">&#125;</div><div class="line">export var pi = 3.141593;</div><div class="line"></div><div class="line">// app.js</div><div class="line">import * as math from &quot;lib/math&quot;;</div><div class="line">alert(&quot;2π = &quot; + math.sum(math.pi, math.pi));</div><div class="line"></div><div class="line">// otherApp.js</div><div class="line">import &#123;sum, pi&#125; from &quot;lib/math&quot;;</div><div class="line">alert(&quot;2π = &quot; + sum(pi, pi));</div></pre></td></tr></table></figure></p>
<p><code>export default</code>(默认加载)和 <code>export *</code>(整体加载）为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// lib/mathplusplus.js</div><div class="line">export * from &quot;lib/math&quot;;</div><div class="line">export var e = 2.71828182846;</div><div class="line">export default function(x) &#123;</div><div class="line">    return Math.exp(x);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// app.js</div><div class="line">import exp, &#123;pi, e&#125; from &quot;lib/mathplusplus&quot;;</div><div class="line">alert(&quot;2π = &quot; + exp(pi, e));</div></pre></td></tr></table></figure></p>
<p>默认加载的好处是我们不需要知道模块所要加载的变量名或函数名,输出时指定任意名字，且不需要大括号。更详细的可以查看<a href="http://es6.ruanyifeng.com/#docs/module" target="_blank" rel="external">阮一峰老师的module一节</a></p>
<h3 id="const-和-let"><a href="#const-和-let" class="headerlink" title="const 和 let"></a>const 和 let</h3><p><code>const</code>即常量，一旦定义了即不可变。let是更好的var,由于js的设计缺陷，var变量的作用域是函数体的全部，还有变量提升等怪异特性，导致诡异的错误，极难定位bug。而let拥有块级作用域,声明的全局变量不是全局对象的属性,形如for (let x…)的循环在每次迭代时都为x创建新的绑定.能用let尽量不用var，具体请看<a href="http://programmers.stackexchange.com/questions/274342/is-there-any-reason-to-use-the-var-keyword-in-es6" target="_blank" rel="external">Is there any reason to use the “var” keyword in ES6?</a>以及<a href="http://www.infoq.com/cn/articles/es6-in-depth-let-and-const?utm_campaign=rightbar_v2&amp;utm_source=infoq&amp;utm_medium=articles_link&amp;utm_content=link_text" target="_blank" rel="external">深入浅出ES6（十四）：let和const</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">function f() &#123;</div><div class="line">  &#123;</div><div class="line">    let x;</div><div class="line">    &#123;</div><div class="line">      // okay, block scoped name</div><div class="line">      const x = &quot;sneaky&quot;;</div><div class="line">      // error, const</div><div class="line">      x = &quot;foo&quot;;</div><div class="line">    &#125;</div><div class="line">    // okay, declared with `let`</div><div class="line">    x = &quot;bar&quot;;</div><div class="line">    // error, already declared in block</div><div class="line">    let x = &quot;inner&quot;;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><p>语言标准实现的异步编程解决方案:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function timeout(duration = 0) &#123;</div><div class="line">    return new Promise((resolve, reject) =&gt; &#123;</div><div class="line">        setTimeout(resolve, duration);</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">var p = timeout(1000).then(() =&gt; &#123;</div><div class="line">    return timeout(2000);</div><div class="line">&#125;).then(() =&gt; &#123;</div><div class="line">    throw new Error(&quot;hmm&quot;);</div><div class="line">&#125;).catch(err =&gt; &#123;</div><div class="line">    return Promise.all([timeout(100), timeout(200)]);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h1 id="关于Vue-cli的webpack模板的代码风格"><a href="#关于Vue-cli的webpack模板的代码风格" class="headerlink" title="关于Vue-cli的webpack模板的代码风格"></a>关于Vue-cli的webpack模板的代码风格</h1><p>Vue-cli本身是一套技术选型，本身有作者自己的设计偏好在里面，例如模板默认是ES6的语法，使用ESLint进行代码规范等。在我开始使用这个工具的过程中有两个纠结的地方，一个是缩进，一个分号。</p>
<h3 id="关于缩进"><a href="#关于缩进" class="headerlink" title="关于缩进"></a>关于缩进</h3><p>模板中默认代码使用的2个空格进行缩进，这没问题，问题是在ESLint的配置文件<code>.eslintrc.js</code>中写死了indent的规则，于是各种缩进必须按照规范来，不然就会出现多处如下的错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">error  indent  Expected indentation of 4 space characters but found 6</div><div class="line"> /Users/Calvin/Develop/githubs/jieyuan/Vue-jieyuan/src/App.vue:35:7</div><div class="line">       Hello,</div></pre></td></tr></table></figure></p>
<p>用java习惯了，格式糟糕的话format一下就好了啊,然后各种查资料是用2个空格还是4个空格,可以看看知乎的这个回答<a href="https://www.zhihu.com/question/33702159" target="_blank" rel="external">为什么JS的规范说要用两个空格来缩进?</a>，恩，看来写js代码用2个空格更流行一些。如果你用sublime，那么可以打开你一个js文件然后Preference -&gt; Settings More -&gt; Syntax Specfic-User,然后写入以下选项 :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;tab_size&quot;: 2,</div><div class="line">  &quot;translate_tabs_to_spaces&quot;: true</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>同理对.vue也做一遍。不过萝卜青菜各有所爱，只要同意规范就好,如果还是希望使用4空格,可以编辑<code>.eslintrc.js</code>的indet项。</p>
<h3 id="关于写不写分号"><a href="#关于写不写分号" class="headerlink" title="关于写不写分号"></a>关于写不写分号</h3><p>习惯了写分号，至今为止一直认为写分号会让代码清晰，不容易出错。不过在js这样不强制写分号的语言中需要另外考虑一番,可以看看知乎的这个问题:<a href="https://www.zhihu.com/question/20298345" target="_blank" rel="external">JavaScript 语句后应该加分号么？</a>,于是又被尤大的答案折服了，ok，咱也不写分号了。更多的还是建议看尤大给的链接<a href="http://slides.com/evanyou/semicolons#/" target="_blank" rel="external">semicolons</a></p>
<h1 id="单文件组件以及Vue-loader解惑"><a href="#单文件组件以及Vue-loader解惑" class="headerlink" title="单文件组件以及Vue-loader解惑"></a>单文件组件以及Vue-loader解惑</h1><p>看Vue-cli中的<code>src/componets</code>文件夹有个<code>Hello.vue</code>的文件,这个是默认生成的单文件组件。如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=&quot;hello&quot;&gt;</div><div class="line">    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line">&lt;script&gt;</div><div class="line">export default &#123;</div><div class="line">  data () &#123;</div><div class="line">    return &#123;</div><div class="line">      // note: changing this line won&apos;t causes changes</div><div class="line">      // with hot-reload because the reloaded component</div><div class="line">      // preserves its current state and we are modifying</div><div class="line">      // its initial state.</div><div class="line">      msg: &apos;Hello World!&apos;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>咦？不对啊,这玩意是组件？Vue文档中不是说组件要用如下形式声明吗:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var MyComponent = Vue.extend(&#123;</div><div class="line">  // options...</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// Globally register the component with tag: my-component</div><div class="line">Vue.component(&apos;my-component&apos;, MyComponent)</div><div class="line">&lt;div id=&quot;example&quot;&gt;</div><div class="line">  &lt;my-component&gt;&lt;/my-component&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>好吧，在<a href="http://vuejs.org/guide/application.html" target="_blank" rel="external">Building Large-Scale Apps</a>中文档介绍了这种单文件的组件,它的特点是单文件组合HTML 模板，CSS和JS，并且可以使用自己想用的预处理器，并且css代码对于每个组件是隔离的,只能说<code>Vue,就决定是你了!</code>,例如:<img src="http://vuejs.org/images/vue-component-with-pre-processors.png" alt="直接官网盗图">，尤大创造了一个新的文件格式<code>.vue</code>，那这种文件咋解析啊,有没有文件解析器?于是有了<code>vue-loader</code>，它的官方介绍如下:</p>
<blockquote>
<p>vue-loader is a loader for Webpack that can transform Vue components written in the following format into a plain JavaScript module</p>
</blockquote>
<p>恩,Vue-loader会自动帮你把这种单文件组件转成组件使用，我们就不用操心啦。当然尤大也不强制你把代码都放在一个文件里，可以拆开放:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;template src=&quot;./template.html&quot;&gt;&lt;/template&gt;</div><div class="line">&lt;style src=&quot;./style.css&quot;&gt;&lt;/style&gt;</div><div class="line">&lt;script src=&quot;./script.js&quot;&gt;&lt;/script&gt;</div><div class="line">或者从npm模块加载:</div><div class="line">&lt;!-- import a file from the installed &quot;todomvc-app-css&quot; npm package --&gt;</div><div class="line">&lt;style src=&quot;todomvc-app-css/index.css&quot;&gt;</div></pre></td></tr></table></figure>
<p>更多内容可以看Vue-loader的<a href="http://vuejs.github.io/vue-loader" target="_blank" rel="external">官方文档</a>,跟着做一遍可以加深印象，更了解webpack和vue的思想。</p>
<h1 id="开发Vue组件"><a href="#开发Vue组件" class="headerlink" title="开发Vue组件"></a>开发Vue组件</h1><p>好吧，说了那么多，我们来开发一个基本的Login组件吧。目前网页设计水平还跟不上，直接使用Bootstrap的css库,在index.html的<code>head</code>标签中加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>在<code>compoents</code>标签中添加<code>Login.vue</code>文件,输入如下内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">&lt;!-- Stack the columns on mobile by making one full-width and the other half-width --&gt;</div><div class="line">    &lt;div class=&quot;container&quot;&gt;</div><div class="line">      &lt;form class=&quot;form-signin&quot;&gt;</div><div class="line">        &lt;h2 class=&quot;form-signin-heading&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/h2&gt;</div><div class="line">        &lt;label for=&quot;inputEmail&quot; class=&quot;sr-only&quot;&gt;邮件地址&lt;/label&gt;</div><div class="line">        &lt;input type=&quot;email&quot; id=&quot;inputEmail&quot; class=&quot;form-control&quot; placeholder=&quot;邮件地址&quot; required autofocus&gt;</div><div class="line">        &lt;label for=&quot;inputPassword&quot; class=&quot;sr-only&quot;&gt;密码&lt;/label&gt;</div><div class="line">        &lt;input type=&quot;password&quot; id=&quot;inputPassword&quot; class=&quot;form-control&quot; placeholder=&quot;密码&quot; required&gt;</div><div class="line">        &lt;div class=&quot;checkbox&quot;&gt;</div><div class="line">          &lt;label&gt;</div><div class="line">            &lt;input type=&quot;checkbox&quot; value=&quot;remember-me&quot;&gt; 记住我</div><div class="line">          &lt;/label&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;button class=&quot;btn btn-lg btn-primary btn-block&quot; type=&quot;submit&quot;&gt;登录&lt;/button&gt;</div><div class="line">      &lt;/form&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line"></div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">export default &#123;</div><div class="line">  data () &#123;</div><div class="line">    return &#123;</div><div class="line">      // note: changing this line won&apos;t causes changes</div><div class="line">      // with hot-reload because the reloaded component</div><div class="line">      // preserves its current state and we are modifying</div><div class="line">      // its initial state.</div><div class="line">      title: &apos;登录结缘&apos;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;style &gt;</div><div class="line">  body &#123;</div><div class="line">  padding-top: 40px;</div><div class="line">  padding-bottom: 40px;</div><div class="line">  background-color: #eee;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.form-signin &#123;</div><div class="line">  max-width: 330px;</div><div class="line">  padding: 15px;</div><div class="line">  margin: 0 auto;</div><div class="line">&#125;</div><div class="line">.form-signin .form-signin-heading,</div><div class="line">.form-signin .checkbox &#123;</div><div class="line">  margin-bottom: 10px;</div><div class="line">&#125;</div><div class="line">.form-signin .checkbox &#123;</div><div class="line">  font-weight: normal;</div><div class="line">&#125;</div><div class="line">.form-signin .form-control &#123;</div><div class="line">  position: relative;</div><div class="line">  height: auto;</div><div class="line">  -webkit-box-sizing: border-box;</div><div class="line">     -moz-box-sizing: border-box;</div><div class="line">          box-sizing: border-box;</div><div class="line">  padding: 10px;</div><div class="line">  font-size: 16px;</div><div class="line">&#125;</div><div class="line">.form-signin .form-control:focus &#123;</div><div class="line">  z-index: 2;</div><div class="line">&#125;</div><div class="line">.form-signin input[type=&quot;email&quot;] &#123;</div><div class="line">  margin-bottom: -1px;</div><div class="line">  border-bottom-right-radius: 0;</div><div class="line">  border-bottom-left-radius: 0;</div><div class="line">&#125;</div><div class="line">.form-signin input[type=&quot;password&quot;] &#123;</div><div class="line">  margin-bottom: 10px;</div><div class="line">  border-top-left-radius: 0;</div><div class="line">  border-top-right-radius: 0;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure></p>
<p>将<code>App.vue</code>中的Hello组件换成Login组件即可，最终效果如下:<br><img src="http://7pun7p.com1.z0.glb.clouddn.com/jieyuanjieyuan_login_example.png" alt=""></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>代码放在结缘的前端工程中,<strong><a href="https://github.com/rdmclin2/Vue-jieyuan" target="_blank" rel="external">Vue-jieyuan</a></strong>,欢迎star,issue</p>
<!--


# 资源汇总
- [vue-loader文档](http://vuejs.github.io/vue-loader)


# 引入vue-strap
[vue-strap](https://github.com/yuche/vue-strap)是一个用vue编写，使用Bootstrap.css的组件库,它不依赖Bootstrap.js或者jquery，只需要引入vue和boostrap.css即可。

首先安装:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install vue-strap</div></pre></td></tr></table></figure>
<p>然后在需要用到组件的地方使用,如es6导入<br>```<br>import alert from ‘vue-strap/src/alert’<br>// or<br>import { alert } from ‘vue-strap’</p>
<p>new Vue({<br>  components: {<br>    alert<br>  }<br>})<br>``` –&gt;</p>
-->]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;关于结缘的前端使用哪种框架，笔者之前有过Angular.js的开发经验，在React.js和Vue.js之间徘徊了一阵子最终选择了Vue，在我看来Vue和Angular有许多的共同点，在看Vue的文档的时候有很熟悉的味道，但和React类似只关注View这一块。Vue没有像React那样什么都放到js中，简洁方便的api设计以及组件式开发是我选择它的主要原因。&lt;br&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="vue" scheme="http://www.mclspace.com/categories/vue/"/>
    
    
      <category term="nodejs" scheme="http://www.mclspace.com/tags/nodejs/"/>
    
      <category term="jieyuan" scheme="http://www.mclspace.com/tags/jieyuan/"/>
    
      <category term="vue" scheme="http://www.mclspace.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Node.js中使用Mongoose创建数据库模型</title>
    <link href="http://www.mclspace.com/2016/02/13/nodejs-tutorials-4/"/>
    <id>http://www.mclspace.com/2016/02/13/nodejs-tutorials-4/</id>
    <published>2016-02-12T16:33:35.000Z</published>
    <updated>2016-02-12T16:41:27.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><br>MongoDB object modeling designed to work in an asynchronous environment. <a href="http://mongoosejs.com" target="_blank" rel="external">http://mongoosejs.com</a><br></blockquote>

<a id="more"></a>
<p>在<a href="http://mclspace.com/2016/02/12/jieyuan-functions-initial/" target="_blank" rel="external">结缘的功能设想-初步</a>中我们为<a href="https://github.com/rdmclin2/jieyuan" target="_blank" rel="external">结缘</a>的用户字段进行了定义，在本篇中我们使用Mongoose为用户模型进行数据库建模。Mongoose是基于nodejs的mongodb ORM,类似java的Hibernate。</p>
<p>PS: 本文假设您已经安装了mongodb环境.</p>
<p><strong>可以查看<a href="https://github.com/rdmclin2/jieyuan" target="_blank" rel="external">结缘</a>的代码加深理解</strong>.</p>
<h1 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h1><p>首先安装<code>mongoose</code>模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install mongoose</div></pre></td></tr></table></figure></p>
<p>在<code>config</code>文件夹下新建mongoose.js文件,写入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var config = require(&apos;./config&apos;),</div><div class="line">    mongoose = require(&apos;mongoose&apos;);</div><div class="line"></div><div class="line">module.exports = function()&#123;</div><div class="line">    var db = mongoose.connect(config.db,function(err) &#123;</div><div class="line">        if(err) &#123;</div><div class="line">            console.log(&apos;connection error&apos;, err);</div><div class="line">        &#125; else &#123;</div><div class="line">            console.log(&apos;connection successful : &apos; + config.db);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    return db;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>在<code>bin/www</code>文件首部添加如下代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">process.env.NODE_ENV = process.env.NODE_ENV || &apos;development&apos;; //设置默认环境为development</div><div class="line"></div><div class="line">var Mongoose = require(&apos;../config/mongoose&apos;);</div><div class="line">var db =  Mongoose();</div></pre></td></tr></table></figure></p>
<p>安装<code>nodemon</code>模块,该工具可以帮助我们在改变代码时自动重启应用，免去手动重启的麻烦.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g nodemon</div></pre></td></tr></table></figure></p>
<p>然后我们验证代码有无错误,首先开启数据库<code>sudo mongod</code>,然后使用<code>nodemon</code>启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nodemon</div></pre></td></tr></table></figure></p>
<p>输出<code>connection successful</code>字样即为配置正确。</p>
<h1 id="创建用户模型"><a href="#创建用户模型" class="headerlink" title="创建用户模型"></a>创建用户模型</h1><p>在<code>models</code>文件夹下创建<code>model_user.js</code>文件,根据我们在<a href="http://mclspace.com/2016/02/12/jieyuan-functions-initial/" target="_blank" rel="external">结缘的功能设想-初步</a>中对用户的建模,写入如下代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">var mongoose = require(&apos;mongoose&apos;);</div><div class="line">var Schema = mongoose.Schema;</div><div class="line"></div><div class="line">var UserSchema = new Schema(&#123;</div><div class="line">    name: String,</div><div class="line">    username: &#123;</div><div class="line">        type: String,</div><div class="line">        unique: true,</div><div class="line">        trim: true,</div><div class="line">        required: true,</div><div class="line">        index: true</div><div class="line">    &#125;,</div><div class="line">    email: &#123;</div><div class="line">        type: String,</div><div class="line">        validate: &#123;</div><div class="line">            validator: function(email) &#123;</div><div class="line">                return /^[a-zA-Z0-9.!#$%&amp;’*+/=?^_`&#123;|&#125;~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/.test(email);</div><div class="line">            &#125;,</div><div class="line">            message: &apos;&#123;VALUE&#125; is not a valid email!&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    password: &#123;</div><div class="line">        type: String,</div><div class="line">        required: true</div><div class="line">    &#125;,</div><div class="line">    state: &#123;</div><div class="line">        type: String,</div><div class="line">        enum: [&quot;single&quot;, &quot;inlove&quot;]</div><div class="line">    &#125;,</div><div class="line">    gender: &#123;</div><div class="line">        type: String,</div><div class="line">        enum: [&quot;male&quot;, &quot;female&quot;, &quot;unknown&quot;],</div><div class="line">        default: &quot;unknown&quot;</div><div class="line">    &#125;,</div><div class="line">    phone_no: String,</div><div class="line">    accessToken: String,</div><div class="line">    avatar: String,</div><div class="line">    location: String,</div><div class="line">    url: String,</div><div class="line">    signature: String,</div><div class="line">    created_at: &#123;</div><div class="line">        type: Date,</div><div class="line">        default: Date.now</div><div class="line">    &#125;,</div><div class="line">    updated_at: Date</div><div class="line">&#125;);</div><div class="line"></div><div class="line">UserSchema.set(&apos;autoIndex&apos;, false);</div><div class="line"></div><div class="line">// on every save, add the date</div><div class="line">userSchema.pre(&apos;save&apos;, function(next) &#123;</div><div class="line">  var currentDate = new Date();</div><div class="line">  this.updated_at = currentDate;</div><div class="line">  next();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">module.exports = mongoose.model(&apos;User&apos;, UserSchema);</div></pre></td></tr></table></figure></p>
<p><code>Schema</code>定义了用户的数据结构，<code>model</code>将其建模，这里我们取模型为<code>User</code>,mongoose将为我们自动创建<code>users</code>的<code>collection</code>。这里后面会添加很多自定义方法，目前暂时是最基础的形式。</p>
<p>Mongoose也为我们提供了很多方便的验证器，如<code>required</code>,<code>unique</code>,<code>enum</code>等,同时也提供了自定义验证器<code>validate</code>，详细请查阅文档<a href="http://mongoosejs.com/docs/api.html#schematype_SchemaType-validate" target="_blank" rel="external">validator</a></p>
<p>使用<code>index</code>索引可以加快查询速度，但建立索引需要代价，应该给那些经常需要索引的列增加索引，另外应用启动的时候Mongoose会自动为每一个<code>schema</code>发送一个<code>ensureIndex</code>命令,开发环境用这个很好, 但是建议在生产环境不要使用这个,使用下面的方法禁用<code>ensureIndex</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">animalSchema.set(&apos;autoIndex&apos;, false);</div><div class="line">//or</div><div class="line">new Schema(&#123;&#125;, &#123;autoIndex: false&#125;);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;MongoDB object modeling designed to work in an asynchronous environment. &lt;a href=&quot;http://mongoosejs.com&quot;&gt;http://mongoosejs.com&lt;/a&gt;&lt;br&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="nodejs" scheme="http://www.mclspace.com/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://www.mclspace.com/tags/nodejs/"/>
    
      <category term="jieyuan" scheme="http://www.mclspace.com/tags/jieyuan/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs 配置文件管理</title>
    <link href="http://www.mclspace.com/2016/02/12/nodejs-tutorials-3/"/>
    <id>http://www.mclspace.com/2016/02/12/nodejs-tutorials-3/</id>
    <published>2016-02-12T08:49:16.000Z</published>
    <updated>2016-02-14T04:42:36.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><br>本文使用的配置管理方案来自于<a href="http://www.amazon.cn/MEAN-Web开发-哈维夫/dp/B012R5A30C/ref=sr_1_1?ie=UTF8&amp;qid=1455266935&amp;sr=8-1&amp;keywords=MEAN" target="_blank" rel="external">MEAN Web开发</a>一书<br></blockquote>

<a id="more"></a>
<p>我们开发的程序往往会运行在不同的环境中，例如开发，测试，生产等,比如开发时连接到的数据库里面的数据是模拟出来的，而生产环境要连接到实际的数据库上，测试的时候可能需要另一个数据库,因此我们需要让程序能根据不同的运行环境来载入不同的配置文件。</p>
<p>另外，我们使用的第三方模块也很可能需要配置文件，将这些配置文件集中起来进行管理，这样在环境变化或模块配置变化的时候我们就不需要改动源代码，配置与使用分离。</p>
<p>本文使用js文件作为配置文件格式，其他常见的格式还有json,yaml等,另外也可以使用<a href="https://www.npmjs.com/package/config" target="_blank" rel="external">config</a>模块进行配置管理,详细的请查阅<a href="https://cnodejs.org/topic/55fac7eced1da72438e33a7d" target="_blank" rel="external">Node.js 项目的配置文件</a></p>
<p>使用本文的配置管理方案后<a href="https://github.com/rdmclin2/jieyuan" target="_blank" rel="external">结缘</a>的config文件结构类似如下所示:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ tree config</div><div class="line">config</div><div class="line">├── config.js</div><div class="line">├── env</div><div class="line">│   ├── development.js</div><div class="line">│   ├── production.js</div><div class="line">│   └── test.js</div><div class="line">├── mongoose.js</div><div class="line">├── passport.js</div><div class="line">└── strategies</div><div class="line">    ├── bearer.js</div><div class="line">    └── local.js</div></pre></td></tr></table></figure>
<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>首先在config文件夹下创建<code>env</code>文件夹以及<code>development.js</code>，<code>test.js</code>和<code>production.js</code>，分别用于开发，测试，生产环境下.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mkdir env &amp;&amp; cd $_ &amp;&amp; touch development.js test.js production.js</div></pre></td></tr></table></figure>
<p>写入部分配置项，如<code>development.js</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">module.exports  = &#123;</div><div class="line">    sessionSecret : &apos;developmentSessionSecret&apos;,</div><div class="line">    db: &apos;mongodb://localhost/test&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>test.js</code>和<code>production.js</code>中可以写入不同的db.然后创建<code>config.js</code>文件,写入以下代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">module.exports = require(&apos;./env/&apos; + process.env.NODE_ENV + &apos;.js&apos;);</div></pre></td></tr></table></figure>
<p>这句代码会根据当前的<code>NODE_ENV</code>加载合适的配置文件,node默认情况下为<code>development</code>模式,我们可以设置NODE_ENV环境变量或在运行node前指定环境变量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ NODE_ENV=test PORT=9807 node ...</div></pre></td></tr></table></figure>
<p>在需要用到环境设置的时候引入<code>config.js</code>文件即可,如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var config = require(&apos;./config&apos;)</div></pre></td></tr></table></figure>
<h1 id="模块配置"><a href="#模块配置" class="headerlink" title="模块配置"></a>模块配置</h1><p>可以将第三方模块的配置也放到<code>config</code>中来统一管理，以<code>mongoose</code>为例,在config文件夹下创建<code>mongoose.js</code>文件,写入如下代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var config = require(&apos;./config&apos;),</div><div class="line">    mongoose = require(&apos;mongoose&apos;);</div><div class="line"></div><div class="line"></div><div class="line">module.exports = function()&#123;</div><div class="line">    var db = mongoose.connect(config.db,function(err) &#123;</div><div class="line">        if(err) &#123;</div><div class="line">            console.log(&apos;connection error&apos;, err);</div><div class="line">        &#125; else &#123;</div><div class="line">            console.log(&apos;connection successful : &apos; + config.db);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    return db;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>引入配置信息，读取db，然后使用mongoose连接,导出该函数,然后在需要链接数据库的时候使用:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var Mongoose = require(&apos;../config/mongoose&apos;);</div><div class="line">var db =  Mongoose();</div></pre></td></tr></table></figure>
<p>进行数据库连接.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;本文使用的配置管理方案来自于&lt;a href=&quot;http://www.amazon.cn/MEAN-Web开发-哈维夫/dp/B012R5A30C/ref=sr_1_1?ie=UTF8&amp;amp;qid=1455266935&amp;amp;sr=8-1&amp;amp;keywords=MEAN&quot;&gt;MEAN Web开发&lt;/a&gt;一书&lt;br&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="nodejs" scheme="http://www.mclspace.com/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://www.mclspace.com/tags/nodejs/"/>
    
      <category term="jieyuan" scheme="http://www.mclspace.com/tags/jieyuan/"/>
    
  </entry>
  
  <entry>
    <title>结缘的功能设想-初步</title>
    <link href="http://www.mclspace.com/2016/02/12/jieyuan-development-1/"/>
    <id>http://www.mclspace.com/2016/02/12/jieyuan-development-1/</id>
    <published>2016-02-12T08:31:50.000Z</published>
    <updated>2016-02-12T08:37:02.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><br>恩，结缘的宗旨是帮助程序员们找到一个适合自己的好妹子，以及帮助想养猿的妹子找到一个靠谱的程序猿。<br>–  《结缘的宗旨yy版》<br></blockquote>

<a id="more"></a>
<p>用户群体为程序猿，妹子。性别为男，女。设想的用户字段如下:</p>
<ul>
<li>name 姓名</li>
<li>username 用户名</li>
<li>email 邮箱</li>
<li>gender 性别: {male,female}</li>
<li>phoneno 电话号码</li>
<li>location 所在地</li>
<li>password 登录密码</li>
<li>url 个人网站地址</li>
<li>avatar 头像地址</li>
<li>signature 个人签名</li>
<li>create_at: 创建日期</li>
<li>state: 状态: {single,inlove}</li>
<li>accessToken: access token</li>
<li>friends [] 好友列表</li>
</ul>
<p>目前设想的功能有</p>
<ul>
<li>用户登录/注册</li>
<li>个人主页</li>
<li>聊天功能</li>
</ul>
<p>使用的技术栈为</p>
<ul>
<li>Node.js 后端</li>
<li>MongoDB 数据库</li>
<li>Vue.js 前端</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;恩，结缘的宗旨是帮助程序员们找到一个适合自己的好妹子，以及帮助想养猿的妹子找到一个靠谱的程序猿。&lt;br&gt;–  《结缘的宗旨yy版》&lt;br&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="nodejs" scheme="http://www.mclspace.com/categories/nodejs/"/>
    
    
      <category term="jieyuan" scheme="http://www.mclspace.com/tags/jieyuan/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs项目典型目录结构</title>
    <link href="http://www.mclspace.com/2016/01/24/nodejs-tutorials-2/"/>
    <id>http://www.mclspace.com/2016/01/24/nodejs-tutorials-2/</id>
    <published>2016-01-24T14:23:53.000Z</published>
    <updated>2016-02-12T09:22:49.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><br>项目的组织就犹如行军作战的阵法和章法，混乱而无目的的军队几乎不可能打胜仗，有其形，有其魂的组织的生命周期才会更长，其形态才更稳固。<br>–《深入浅出Nodejs》<br></blockquote>

<a id="more"></a>
<p>这一篇我们来聊聊<a href="https://github.com/rdmclin2/jieyuan" target="_blank" rel="external">结缘</a>的项目结构。由于<a href="https://github.com/rdmclin2/jieyuan" target="_blank" rel="external">结缘</a>是web应用,我们以常见的MVC为主要框架，然后在这个基础上进行扩展。结合卜灵的《深入浅出Nodejs》产品化一章中的应用项目结构以及之前做的项目的一些经验,<a href="https://github.com/rdmclin2/jieyuan" target="_blank" rel="external">结缘</a>的目录结构如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── CHANGELOG.md //网站的变更历史</div><div class="line">├── INSTALL.md // 安装说明</div><div class="line">├── LICENSE // 遵循的网络协议</div><div class="line">├── Makefile //Makefile 文件</div><div class="line">├── README.md</div><div class="line">├── api //提供给移动端调用的api逻辑，类似web端的controllers</div><div class="line">├── app.js </div><div class="line">├── benchmark //基准测试</div><div class="line">├── bin //可执行文件目录</div><div class="line">├── config //设置文件目录</div><div class="line">├── controllers //控制器</div><div class="line">├── dispatch.js //多进程管理</div><div class="line">├── libs //没有模块化得文件目录</div><div class="line">├── logs //存放log信息</div><div class="line">├── middlewares //中间件</div><div class="line">├── models //数据库模型文件</div><div class="line">├── node_modules // nodejs库</div><div class="line">├── npm-debug.log // 忽略,npm的log文件</div><div class="line">├── package.json //描述文件，依赖配置</div><div class="line">├── proxy // 数据代理目录</div><div class="line">├── public //静态文件目录</div><div class="line">├── routes //路由处理目录</div><div class="line">├── routes.js // 路由注册文件</div><div class="line">├── test //测试文件目录</div><div class="line">├── tools //工具文件目录</div><div class="line">└── views // 视图目录</div><div class="line"></div><div class="line">16 directories, 10 files</div></pre></td></tr></table></figure></p>
<p>这里也没啥特别要注意的，这里的<code>Makefile</code>作为构建工具后面可能被<code>gulp</code>替代以实现更多定制和跨平台特性,<code>models</code>文件和传统的模型概念上不同，是用来描述数据库的<code>Schema</code>的,传统的模型和<code>proxy</code>更加接近,<code>proxy</code>提供对数据库数据的代理方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;项目的组织就犹如行军作战的阵法和章法，混乱而无目的的军队几乎不可能打胜仗，有其形，有其魂的组织的生命周期才会更长，其形态才更稳固。&lt;br&gt;–《深入浅出Nodejs》&lt;br&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="nodejs" scheme="http://www.mclspace.com/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://www.mclspace.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Java使用ProcessBuilder类编写shell工具类</title>
    <link href="http://www.mclspace.com/2016/01/20/java-shell-toolkit-using-processBuilder/"/>
    <id>http://www.mclspace.com/2016/01/20/java-shell-toolkit-using-processBuilder/</id>
    <published>2016-01-20T09:34:20.000Z</published>
    <updated>2016-01-21T09:18:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近使用Java编写用于测试平台的工具类，有个需求是在java中调用命令行语句并获取输出，在Java中有两种方式可以完成这个任务。一个是<code>Runtime.getRuntime().exec()</code>（java1.5之前），java1.5之后提供了<a href="https://docs.oracle.com/javase/7/docs/api/java/lang/ProcessBuilder.html" target="_blank" rel="external">ProcessBuilder</a>类来构建进程。由于Runtime的方法不够灵活，而且我们项目不需要兼容老版本java，这里用ProcessBuilder来构建这个工具类。</p>
<a id="more"></a>
<p>PS: 代码中写了一些方便的adb和adbshell方法，完全可以定制自己的快捷方法。为防止线程阻塞,我们用了另一个线程读取线程的输出流。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div></pre></td><td class="code"><pre><div class="line">package com.nata;</div><div class="line"></div><div class="line">import java.io.IOException;</div><div class="line">import java.io.InputStream;</div><div class="line">import java.io.InputStreamReader;</div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.List;</div><div class="line">import java.util.Scanner;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Author: Calvin Meng</div><div class="line"> * Blog: mclspace.com  Email: rdmclin2@gamil.com</div><div class="line"> * Update: 2016-01-20 14:23</div><div class="line"> */</div><div class="line">public class ShellKit &#123;</div><div class="line">    /**</div><div class="line">     * Run shell command starting with &apos;adb&apos;</div><div class="line">     *</div><div class="line">     * @param cmd command list to execute</div><div class="line">     * @return  Any Output</div><div class="line">     */</div><div class="line">    public static String adb(List&lt;String&gt; cmd) &#123;</div><div class="line">        cmd.add(0, &quot;adb&quot;);</div><div class="line">        return command(cmd);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Run shell command starting with &apos;adb&apos;</div><div class="line">     *</div><div class="line">     * @param cmd command to execute ,tokenize with whitespace</div><div class="line">     * @return  Any Output</div><div class="line">     */</div><div class="line">    public static String adb(String cmd) &#123;</div><div class="line">        String[] splits = cmd.split(&quot; &quot;);</div><div class="line">        return adb(splits);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Run shell command starting with &apos;adb&apos;</div><div class="line">     *</div><div class="line">     * @param cmd command string array to execute</div><div class="line">     * @return  Any Output</div><div class="line">     */</div><div class="line">    public static String adb(String... cmd) &#123;</div><div class="line">        ArrayList&lt;String&gt; cmds = new ArrayList&lt;&gt;();</div><div class="line">        cmds.add(&quot;adb&quot;);</div><div class="line">        for (String part:cmd</div><div class="line">                ) &#123;</div><div class="line">            cmds.add(part) ;</div><div class="line">        &#125;</div><div class="line">        return command(cmds);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Run shell command starting with &apos;adb shell&apos;</div><div class="line">     *</div><div class="line">     * @param cmd command list to execute</div><div class="line">     * @return running Any Output</div><div class="line">     */</div><div class="line">    public static String adbShell(List&lt;String&gt; cmd) &#123;</div><div class="line">        cmd.add(0, &quot;shell&quot;);</div><div class="line">        cmd.add(0, &quot;adb&quot;);</div><div class="line">        return command(cmd);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Run shell command starting with &apos;adb shell&apos;</div><div class="line">     *</div><div class="line">     * @param cmd command to execute ,tokenize with whitespace</div><div class="line">     * @return  Any Output</div><div class="line">     */</div><div class="line"></div><div class="line">    public static String adbShell(String cmd) &#123;</div><div class="line">        String[] splits = cmd.split(&quot; &quot;);</div><div class="line">        return adbShell(splits);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Run shell command starting with &apos;adb shell&apos;</div><div class="line">     *</div><div class="line">     * @param cmd command string array to execute</div><div class="line">     * @return  Any Output</div><div class="line">     */</div><div class="line">    public static String adbShell(String... cmd) &#123;</div><div class="line">        ArrayList&lt;String&gt; cmds = new ArrayList&lt;&gt;();</div><div class="line">        cmds.add(&quot;adb&quot;);</div><div class="line">        cmds.add(&quot;shell&quot;);</div><div class="line">        for (String part:cmd</div><div class="line">                ) &#123;</div><div class="line">            cmds.add(part) ;</div><div class="line">        &#125;</div><div class="line">        return command(cmds);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Execute a shell command and return its output</div><div class="line">     *</div><div class="line">     * @param command command to execute</div><div class="line">     * @return process executed</div><div class="line">     */</div><div class="line">    public static String command(List&lt;String&gt; command) &#123;</div><div class="line">        //set redirectErrorStream to be true to cross output streams</div><div class="line">        ProcessBuilder pb = new ProcessBuilder(command).redirectErrorStream(true);</div><div class="line">        String output = &quot;&quot;;</div><div class="line"></div><div class="line">        try &#123;</div><div class="line">            Process process = pb.start();</div><div class="line"></div><div class="line">            IOThreadHandler outputHandler = new IOThreadHandler(</div><div class="line">                    process.getInputStream());</div><div class="line"></div><div class="line">            outputHandler.start();</div><div class="line"></div><div class="line">            //wait for the process to stop</div><div class="line">            process.waitFor();</div><div class="line"></div><div class="line">            //in case the process stopped before the thread</div><div class="line">            outputHandler.join();</div><div class="line"></div><div class="line">            output = outputHandler.getOutput();</div><div class="line"></div><div class="line">        &#125; catch (InterruptedException | IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        return output;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Thread to drain the output of cmd running</div><div class="line">     */</div><div class="line">    private static class IOThreadHandler extends Thread &#123;</div><div class="line">        private InputStream inputStream;</div><div class="line">        private StringBuilder output = new StringBuilder();</div><div class="line"></div><div class="line">        IOThreadHandler(InputStream inputStream) &#123;</div><div class="line">            this.inputStream = inputStream;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void run() &#123;</div><div class="line">            try (Scanner br = new Scanner(new InputStreamReader(inputStream))) &#123;</div><div class="line">                String line = null;</div><div class="line">                while (br.hasNextLine()) &#123;</div><div class="line">                    line = br.nextLine();</div><div class="line">                    output.append(line).append(System.getProperty(&quot;line.separator&quot;));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public String getOutput() &#123;</div><div class="line">            return output.toString();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    //mininal unit test</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        ArrayList&lt;String&gt; cmds = new ArrayList&lt;&gt;();</div><div class="line">        cmds.add(&quot;devices&quot;);</div><div class="line">        System.out.println(ShellKit.adb(cmds));</div><div class="line"></div><div class="line">        cmds.clear();</div><div class="line">        cmds.add(&quot;getprop&quot;);</div><div class="line">        cmds.add(&quot;ro.boot.serialno&quot;);</div><div class="line"></div><div class="line">        System.out.println(ShellKit.adbShell(cmds));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.javaworld.com/article/2071275/core-java/when-runtime-exec---won-t.html?page=3" target="_blank" rel="external">When Runtime.exec() won’t</a></p>
<blockquote>
<p>这篇文章很不错,建议一看，只是发布时间有点晚了。</p>
</blockquote>
<p><a href="http://stackoverflow.com/questions/6856028/difference-between-processbuilder-and-runtime-exec" target="_blank" rel="external">runtime.exec 和 processbuilder的区别</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近使用Java编写用于测试平台的工具类，有个需求是在java中调用命令行语句并获取输出，在Java中有两种方式可以完成这个任务。一个是&lt;code&gt;Runtime.getRuntime().exec()&lt;/code&gt;（java1.5之前），java1.5之后提供了&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/lang/ProcessBuilder.html&quot;&gt;ProcessBuilder&lt;/a&gt;类来构建进程。由于Runtime的方法不够灵活，而且我们项目不需要兼容老版本java，这里用ProcessBuilder来构建这个工具类。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.mclspace.com/categories/java/"/>
    
    
      <category term="java" scheme="http://www.mclspace.com/tags/java/"/>
    
      <category term="concurrency" scheme="http://www.mclspace.com/tags/concurrency/"/>
    
  </entry>
  
  <entry>
    <title>使用Express快速创建web项目</title>
    <link href="http://www.mclspace.com/2016/01/18/nodejs-tutorials-1/"/>
    <id>http://www.mclspace.com/2016/01/18/nodejs-tutorials-1/</id>
    <published>2016-01-18T14:32:44.000Z</published>
    <updated>2016-01-24T14:30:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从很早开始就想通过Nodejs编写一个属于自己的网站，同时也想分享一些Nodejs开发过程中的一些感悟和经验，不过一直没有实施，再拖下去估计没有下文了=。=。准备从本篇开始，使用Nodejs的Express框架,配合Mongoose数据库构建一个网站,探索基于Nodejs的web应用的快速构建方法,并记录开发过程。目前有如下两个想法：</p>
<ol>
<li>类似知乎的网站（特点为限制答题字数，并且启用markdown回答题目),取名简言</li>
<li>身边很多优秀的程序员居然还木有妹子！不能忍，决定了，写一个帮助程序员把妹的网站，不不不，是帮助妹子领养萌萌的小猿的网站，取名结缘（猿）。</li>
</ol>
<p>网站文件放在<a href="https://github.com/rdmclin2/NodeTurtorials" target="_blank" rel="external">github</a>上，欢迎拍砖点赞 :)</p>
<p>PS: 本篇内容相关源码可以通过tag:v0.0.1进行查看</p>
<a id="more"></a>
<hr>
<h3 id="创建过程"><a href="#创建过程" class="headerlink" title="创建过程"></a>创建过程</h3><p><a href="http://expressjs.com" target="_blank" rel="external">Express</a>是基于<a href="https://nodejs.org" target="_blank" rel="external">Nodejs</a>的一个快速web开发框架,它提供了一个<code>Express application generator</code>可以帮助我们快速创建应用的骨架。</p>
<p>使用如下命令安装generator:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install express-generator -g</div></pre></td></tr></table></figure></p>
<p>安装完成后用以下命令生成骨架,<code>-e</code>选项代表使用EJS模板引擎:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ express -e myapp</div></pre></td></tr></table></figure></p>
<p>生成后的应用文件结构如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── LICENSE</div><div class="line">├── README.md</div><div class="line">├── app.js</div><div class="line">├── bin</div><div class="line">│   └── www</div><div class="line">├── package.json</div><div class="line">├── public</div><div class="line">│   ├── images</div><div class="line">│   ├── javascripts</div><div class="line">│   └── stylesheets</div><div class="line">│       └── style.css</div><div class="line">├── routes</div><div class="line">│   ├── index.js</div><div class="line">│   └── users.js</div><div class="line">└── views</div><div class="line">    ├── error.ejs</div><div class="line">    └── index.ejs</div><div class="line"></div><div class="line">7 directories, 10 files</div></pre></td></tr></table></figure></p>
<ul>
<li><code>app.js</code>是express的设置文件</li>
<li><code>bin/www</code>是express执行文件</li>
<li><code>package.json</code>是nodejs项目的配置文件，用于保存应用信息与依赖管理</li>
<li><code>public</code>文件夹为web应用的资源文件夹</li>
<li><code>routes</code>保存路由文件</li>
<li><code>views</code>保存网站的ejs视图代码</li>
</ul>
<p>然后执行<code>$ npm install</code>安装项目依赖,该命令根据<code>package.json</code>文件中描述的<code>dependencies</code>安装依赖，默认安装到<code>node_modules</code>文件夹下。例如自动生成的<code>package.json</code>文件如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;name&quot;: &quot;NodeTurtorials&quot;,</div><div class="line">  &quot;version&quot;: &quot;0.0.0&quot;,</div><div class="line">  &quot;private&quot;: true,</div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">    &quot;start&quot;: &quot;node ./bin/www&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;dependencies&quot;: &#123;</div><div class="line">    &quot;body-parser&quot;: &quot;~1.13.2&quot;,</div><div class="line">    &quot;cookie-parser&quot;: &quot;~1.3.5&quot;,</div><div class="line">    &quot;debug&quot;: &quot;~2.2.0&quot;,</div><div class="line">    &quot;ejs&quot;: &quot;~2.3.3&quot;,</div><div class="line">    &quot;express&quot;: &quot;~4.13.1&quot;,</div><div class="line">    &quot;morgan&quot;: &quot;~1.6.1&quot;,</div><div class="line">    &quot;serve-favicon&quot;: &quot;~2.3.0&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过<code>$ npm start</code> 或者直接<code>$ node ./bin/www</code>启动项目。</p>
<p>打开浏览器输入<code>localhost:3000</code>查看效果。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;从很早开始就想通过Nodejs编写一个属于自己的网站，同时也想分享一些Nodejs开发过程中的一些感悟和经验，不过一直没有实施，再拖下去估计没有下文了=。=。准备从本篇开始，使用Nodejs的Express框架,配合Mongoose数据库构建一个网站,探索基于Nodejs的web应用的快速构建方法,并记录开发过程。目前有如下两个想法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;类似知乎的网站（特点为限制答题字数，并且启用markdown回答题目),取名简言&lt;/li&gt;
&lt;li&gt;身边很多优秀的程序员居然还木有妹子！不能忍，决定了，写一个帮助程序员把妹的网站，不不不，是帮助妹子领养萌萌的小猿的网站，取名结缘（猿）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;网站文件放在&lt;a href=&quot;https://github.com/rdmclin2/NodeTurtorials&quot;&gt;github&lt;/a&gt;上，欢迎拍砖点赞 :)&lt;/p&gt;
&lt;p&gt;PS: 本篇内容相关源码可以通过tag:v0.0.1进行查看&lt;/p&gt;
    
    </summary>
    
      <category term="nodejs" scheme="http://www.mclspace.com/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://www.mclspace.com/tags/nodejs/"/>
    
      <category term="express" scheme="http://www.mclspace.com/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>Ionic 常见问题及解决方案</title>
    <link href="http://www.mclspace.com/2016/01/16/ionic-problems-and-solutions/"/>
    <id>http://www.mclspace.com/2016/01/16/ionic-problems-and-solutions/</id>
    <published>2016-01-16T07:08:49.000Z</published>
    <updated>2016-02-23T09:37:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Ionic是目前较为流行的Hybird App解决方案,在Ionic开发过程中会遇到很多常见的开发问题，本文尝试对这些问题给出解决方案。</p>
<a id="more"></a>         
<hr>
<h1 id="一些常识与技巧"><a href="#一些常识与技巧" class="headerlink" title="一些常识与技巧"></a>一些常识与技巧</h1><ul>
<li><code>list</code> 有延迟，可以在<code>ion-content</code>处使用 <code>overflow-scroll=&quot;true&quot;</code>尝试</li>
<li>在<code>&lt;i&gt;</code>上用<code>ng-click</code>上是没效果的</li>
<li><code>&lt;label&gt;</code>标签内的事件会在整个<code>label</code>内被触发，点哪都触发</li>
<li>快捷修改背景色<code>style=&quot;background-color: #212326;&quot;</code></li>
<li>能用<code>ng-if</code>就用<code>ng-if</code>,<code>ng-if</code>的效率比<code>ng-show</code>和<code>ng-hide</code>高</li>
<li>直接在<code>ion-list</code>中的<code>ion-item</code>中并不能触发<code>ng-click</code>事件，可以在item中的元素上再套一层div</li>
<li>可以用<code>ng-class=&quot;{&#39;important&#39;: post.important}&quot;</code>配合css 根据列表元素显示不同的效果</li>
<li>获取日期用<code>$filter</code>，<code>var postdate = $filter(&#39;date&#39;)(date, &#39;yyyy-MM-dd HH:mm:ss&#39;);</code></li>
<li>列表中的元素不能写成 <code>id : 4</code>，应写成 <code>id : &quot;4&quot;</code>,注意在创建id变量的时候也需要转成string,如<code>var id = InfoListService.getListLength()+1+&quot;&quot;;</code></li>
<li>使用<code>$log</code>进行log输出,为什么用<code>$log</code>而不是console.log呢？可以看看<a href="https://stackoverflow.com/questions/24185847/why-use-angulars-log-instead-of-console-log" target="_blank" rel="external">这个</a></li>
<li>在安卓上的体验比较差，动画有延迟？可以试试<a href="http://blog.ionic.io/crosswalk-comes-to-ionic/" target="_blank" rel="external">ionic集成的crosswalk</a></li>
<li><code>controllers</code>和<code>services</code> 的文件名可能会重合，但是他们意义差不多，可以将<code>controllers</code>中的文件名小写，对应的<code>services</code>中的文件名大写进行区分,或者加后缀<code>xxxControler</code>,<code>xxxService</code></li>
<li>安装cordova插件的时候用<code>ionic plugin add ...</code>的方式添加，这样会在<code>package.json</code>中添加这个插件的条目，如果有人clone了你的项目想在本地运行，可以用<code>ionic state restore</code>它会根据<code>cordovaPlugins</code>条目安装对应的插件。如果直接用<code>cordova plugin add</code> 安装则不会更新<code>package.json</code>。</li>
<li><p>上传base64编码的时候如果提示413错误，是因为文件过大导致的，可以在nodejs中设置bodyparser的文件限制:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var bodyParser = require(&apos;body-parser&apos;);</div><div class="line">app.use(bodyParser.json(&#123;limit: &apos;50mb&apos;&#125;));</div><div class="line">app.use(bodyParser.urlencoded(&#123;limit: &apos;50mb&apos;, extended: true&#125;));</div></pre></td></tr></table></figure>
</li>
<li><p>img 中 base64编码的图片无法显示？在源码中发现angular添加了unsafe标签？需要在白名单中添加<code>data:image</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$compileProvider.imgSrcSanitizationWhitelist(/^\s*(https?|ftp|mailto|content|file|assets-library):|data:image\//);</div></pre></td></tr></table></figure>
</li>
<li><p>有时候pm2运行有问题，重启一下即可</p>
</li>
<li>在ios设备上运行<code>ionic run ios --device</code></li>
</ul>
<hr>
<h1 id="问题列表"><a href="#问题列表" class="headerlink" title="问题列表"></a>问题列表</h1><ol>
<li><a href="#如何在某个界面中去掉导航栏?">如何在某个界面中去掉导航栏?</a></li>
<li><a href="#如何在ionic中加载本地图片?">如何在ionic中加载本地图片?</a></li>
<li><a href="#如何在ionic中嵌入网页代码?">如何在ionic中嵌入网页代码?</a></li>
<li><a href="#如何将template加载到某个tab或某个sidemenu项目下?">如何将template加载到某个tab或某个sidemenu项目下?</a></li>
<li><a href="#运行serve命令时ionic报错?">运行serve命令时ionic报错?</a></li>
<li><a href="#用docker跑ionic的时候，不能把地址绑定到0-0-0-0怎么处理?">用docker跑ionic的时候，不能把地址绑定到0.0.0.0怎么处理?</a></li>
<li><a href="#加载页面的时候会看到双括号一闪而过？">加载页面的时候会看到双括号一闪而过？</a></li>
<li><a href="#更新了数据，如何让界面更新呢？">更新了数据，如何让界面更新呢？</a></li>
<li><a href="#如何实现IonicView中card上面有一列分割线的效果?">如何实现IonicView中card上面有一列分割线的效果?</a></li>
<li><a href="#controller-js和service-js文件越来越大怎么办?">controller.js和service.js文件越来越大怎么办?</a></li>
<li><a href="#如何寻找优秀的范例代码?">如何寻找优秀的范例代码?</a></li>
<li><a href="#如何显示相对时间？">如何显示相对时间？</a></li>
<li><a href="#发布应用的时候如果遇到翻译错误即MissingTranslation怎么办?">发布应用的时候如果遇到翻译错误即MissingTranslation怎么办?</a></li>
<li><a href="#如何在列表右下方添加时间等信息?">如何在列表右下方添加时间等信息?</a></li>
<li><a href="#如何回到上一页面?">如何回到上一页面?</a></li>
<li><a href="#如何关闭应用?">如何关闭应用?</a></li>
<li><a href="#在安卓设备上如何让title居中?">在安卓设备上如何让title居中?</a></li>
<li><a href="#如何让在sidemenu中的headerbar能够显示头像等其他信息?">如何让在sidemenu中的headerbar能够显示头像等其他信息?</a></li>
<li><a href="#ionic的subheader挡住了内容区域怎么办?">ionic的subheader挡住了内容区域怎么办?</a></li>
<li><a href="#对于需要添加数据的list，在添加数据后页面不能及时刷新造成卡顿怎么办?">对于需要添加数据的list，在添加数据后页面不能及时刷新造成卡顿怎么办?</a></li>
<li><a href="#ionic如何处理回退按钮？例如询问用户是否真的要退出应用">ionic如何处理回退按钮？例如询问用户是否真的要退出应用</a></li>
<li><a href="#ionic如何实现对每个请求都添加认证信息或认证失败自动重新登录?">ionic如何实现对每个请求都添加认证信息或认证失败自动重新登录?</a></li>
<li><a href="#ionic如何实现搜索框内的全部清除按钮?">ionic如何实现搜索框内的全部清除按钮?</a></li>
</ol>
<h4 id="如何在某个界面中去掉导航栏"><a href="#如何在某个界面中去掉导航栏" class="headerlink" title="如何在某个界面中去掉导航栏?"></a>如何在某个界面中去掉导航栏?</h4><p>如果某个界面上不想要导航栏，可以简单地在最顶端的标签中添加<code>hide-nav-bar=&quot;true&quot;</code></p>
<hr>
<h4 id="如何在ionic中加载本地图片"><a href="#如何在ionic中加载本地图片" class="headerlink" title="如何在ionic中加载本地图片?"></a>如何在ionic中加载本地图片?</h4><p>对于css文件夹中的样式文件中如果要调用本地的图片的话,从该css文件所在的文件夹开始算,例如<code>www/css/style.css</code>要加<code>../</code>,否则在浏览器中可以正常显示，在设备上不行，结构如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.login-page &#123;</div><div class="line">  background:url(../img/signup_bg.png);</div><div class="line">  background-size: cover;</div><div class="line">  background-repeat: no-repeat;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是对于在页面中定义的图片路径，从<code>www</code>路径开始算,否则浏览器中可显示，但设备上不行,img文件夹和index.html在一级,如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&quot;img/commander.jpg&quot;&gt;</div></pre></td></tr></table></figure></p>
<hr>
<h4 id="如何在ionic中嵌入网页代码"><a href="#如何在ionic中嵌入网页代码" class="headerlink" title="如何在ionic中嵌入网页代码?"></a>如何在ionic中嵌入网页代码?</h4><p>使用<code>ng-bind-html</code>这个类,不过它会过滤原始html的标签，我们可以引入<code>$sce</code>模块，用<code>$sce.trustAsHtml()</code>方法信任我们获取的网页</p>
<hr>
<h4 id="如何将template加载到某个tab或某个sidemenu项目下"><a href="#如何将template加载到某个tab或某个sidemenu项目下" class="headerlink" title="如何将template加载到某个tab或某个sidemenu项目下?"></a>如何将template加载到某个tab或某个sidemenu项目下?</h4><p><code>&lt;ion-nav-view name=&quot;menuContent&quot;&gt;</code>  可以指定<code>name</code>，然后在子状态中使用该<code>name</code>，ionic就知道该把该状态的template渲染到哪边了。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"> // signup page</div><div class="line"> .state(&apos;auth.signup&apos;, &#123;</div><div class="line">   url: &apos;/signup&apos;,</div><div class="line">   views: &#123;</div><div class="line">       &apos;auth-signup&apos;: &#123;</div><div class="line">           templateUrl: &apos;templates/auth-signup.html&apos;,</div><div class="line">           controller: &apos;SignUpCtrl&apos;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"> &#125;)</div><div class="line"></div><div class="line"> 另有一个tabs中声明该auth-signup:</div><div class="line"> &lt;ion-tab title=&quot;Sign Up&quot; icon-on=&quot;ion-ios-personadd&quot;</div><div class="line">   icon-off=&quot;ion-ios-personadd-outline&quot; href=&quot;#/auth/signup&quot;&gt;</div><div class="line">   &lt;ion-nav-view name=&quot;auth-signup&quot;&gt;&lt;/ion-nav-view&gt;</div><div class="line">&lt;/ion-tab&gt;</div></pre></td></tr></table></figure>
<hr>
<h4 id="运行serve命令时ionic报错"><a href="#运行serve命令时ionic报错" class="headerlink" title="运行serve命令时ionic报错?"></a>运行serve命令时ionic报错?</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ionic $ An uncaught exception occured and has been reported to Ionic</div></pre></td></tr></table></figure>
<p>看看你是不还有一个终端在运行着serve呢？</p>
<hr>
<h4 id="用docker跑ionic的时候，不能把地址绑定到0-0-0-0怎么处理"><a href="#用docker跑ionic的时候，不能把地址绑定到0-0-0-0怎么处理" class="headerlink" title="用docker跑ionic的时候，不能把地址绑定到0.0.0.0怎么处理?"></a>用docker跑ionic的时候，不能把地址绑定到0.0.0.0怎么处理?</h4><p>可以用<code>ionic serve -all</code>的方法解决</p>
<hr>
<h4 id="加载页面的时候会看到双括号一闪而过？"><a href="#加载页面的时候会看到双括号一闪而过？" class="headerlink" title="加载页面的时候会看到双括号一闪而过？"></a>加载页面的时候会看到双括号一闪而过？</h4><p><code>angularjs</code> 在使用双括号的时候，第一个加载的页面，也就是应用中的<code>index.html</code>,其未被渲染好的模版可能会被用户看到。用<code>ng-bind</code>就不会遇到这个问题。造成这种现象的原因是，浏览器需要首先加载HTML页面，渲染它，然后<code>Angular</code>才有机会把它解释成你期望看到的内容。不过好消息是，在大多数的模版中你依然可以使用双括号.但是对于index.html页面中的数据绑定操作，建议使用<code>ng-bind</code>。</p>
<p><code>ng-bind</code>使用方式如下: <code>&lt;p ng-bind=&quot;greeting&quot;&gt;&lt;/p&gt;</code></p>
<hr>
<h4 id="更新了数据，如何让界面更新呢？"><a href="#更新了数据，如何让界面更新呢？" class="headerlink" title="更新了数据，如何让界面更新呢？"></a>更新了数据，如何让界面更新呢？</h4><p>可以用广播，注意<a href="https://stackoverflow.com/questions/26752030/rootscope-broadcast-vs-scope-emit" target="_blank" rel="external">$broadcast 和 $emit的区别</a></p>
<hr>
<h4 id="如何实现IonicView中card上面有一列分割线的效果"><a href="#如何实现IonicView中card上面有一列分割线的效果" class="headerlink" title="如何实现IonicView中card上面有一列分割线的效果?"></a>如何实现IonicView中card上面有一列分割线的效果?</h4><p>在css里定义<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#info-up &#123;</div><div class="line">  border-top: 4px solid #f06336;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h4 id="controller-js和service-js文件越来越大怎么办"><a href="#controller-js和service-js文件越来越大怎么办" class="headerlink" title="controller.js和service.js文件越来越大怎么办?"></a>controller.js和service.js文件越来越大怎么办?</h4><p>所有的控制器不必都放在controllers.js这一个文件中，可以新建controllers文件夹，<br>然后把每个controller都建一个<controller>.js文件，同理services和utils等都是.但注意要在index.html中head部分声明.但是为了避免他们相互覆盖，第一个加载的js中模块中要加[…],其他都不需要。如：</controller></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">// File : /js/directives/mainDirective.js</div><div class="line">angular.module(&apos;app.directives&apos;,[]);</div><div class="line"></div><div class="line">// File : /js/directives/myGreatDirective.js</div><div class="line">angular.module(&apos;app.directives&apos;)  </div><div class="line">    .directive(&apos;myGreatDirective&apos;, function()&#123;</div><div class="line">        return &#123;</div><div class="line">            //...</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">// File : /js/directives/myBetterDirective.js</div><div class="line">angular.module(&apos;app.directives&apos;)  </div><div class="line">    .directive(&apos;myBetterDirective&apos;, function()&#123;</div><div class="line">        return &#123;</div><div class="line">            //...</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure>
<p>看<a href="https://calendee.com/2013/12/29/angularjs-code-organization/" target="_blank" rel="external">angularjs-code-organization</a>了解更多,嗯这篇文章写的还不是best practice，因为你还得记着自己把[]写到那个模块里了，统一地写在app.js中即可，在app.js最下面加上类似：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">angular.module(&apos;fcws.controllers&apos;,[&apos;ionic&apos;, &apos;fcws.services&apos;]);</div><div class="line">angular.module(&apos;fcws.services&apos;, []);</div></pre></td></tr></table></figure>
<p>可以达到和上面一样的效果，而且可以统一管理.</p>
<hr>
<h4 id="如何寻找优秀的范例代码"><a href="#如何寻找优秀的范例代码" class="headerlink" title="如何寻找优秀的范例代码?"></a>如何寻找优秀的范例代码?</h4><p>目前有些ionic 的app没有进行代码混淆，至少ionic官方的ionic view没有进行代码混淆，下载他们的app，文件名改成zip，解压，所有的 www文件都在assets文件夹中，相当于开源了有木有，看看那些最优秀的practice。看中哪些优秀的app，下下来,如何在googleplay上下载？把googleplay应用的地址贴到<a href="https://apps.evozi.com/apk-downloader/" target="_blank" rel="external">apps.evozi</a>中。</p>
<hr>
<h4 id="如何显示相对时间？"><a href="#如何显示相对时间？" class="headerlink" title="如何显示相对时间？"></a>如何显示相对时间？</h4><p>如几分钟前，几天前等,<a href="https://github.com/moment/moment/" target="_blank" rel="external">可以用momentjs</a>，看<a href="https://scotch.io/tutorials/display-time-relatively-in-angular" target="_blank" rel="external">这篇教程</a></p>
<hr>
<h4 id="发布应用的时候如果遇到翻译错误即MissingTranslation怎么办"><a href="#发布应用的时候如果遇到翻译错误即MissingTranslation怎么办" class="headerlink" title="发布应用的时候如果遇到翻译错误即MissingTranslation怎么办?"></a>发布应用的时候如果遇到翻译错误即MissingTranslation怎么办?</h4><p>暂时的解决方法是，不进行翻译校正, 在 /platforms/android/build.gradle 中的android {}节中加入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">lintOptions &#123;</div><div class="line">						 disable &apos;MissingTranslation&apos;</div><div class="line">							disable &apos;ExtraTranslation&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h4 id="如何在列表右下方添加时间等信息"><a href="#如何在列表右下方添加时间等信息" class="headerlink" title="如何在列表右下方添加时间等信息?"></a>如何在列表右下方添加时间等信息?</h4><p><code>span</code> 可以用来将时间之类的附加信息显示到列表右边,如下面会将创建时间显示在name的右边:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;ion-item class=&quot;item item-avatar-left &quot; ng-repeat=&quot;message in messages&quot;&gt;</div><div class="line">	&lt;img src=&quot;../../img/commander.jpg&quot;&gt;</div><div class="line">	&lt;span class=&quot;item-note&quot;&gt;&#123;&#123;message.create_at&#125;&#125;&lt;/span&gt;</div><div class="line">	&lt;h2 &gt;&#123;&#123;message.name&#125;&#125;&lt;/h2&gt;</div><div class="line">	&lt;p &gt;  &#123;&#123;message.content&#125;&#125;&lt;/p&gt;</div><div class="line">&lt;/ion-item &gt;</div></pre></td></tr></table></figure></p>
<hr>
<h4 id="如何回到上一页面"><a href="#如何回到上一页面" class="headerlink" title="如何回到上一页面?"></a>如何回到上一页面?</h4><p>用<code>$ionicHistory</code>这个模块,引入该模块后使用<code>goBack([backCount])</code>，backCount指定回去多少个页面（-1代表回去一个页面），默认为-1</p>
<hr>
<h4 id="如何关闭应用"><a href="#如何关闭应用" class="headerlink" title="如何关闭应用?"></a>如何关闭应用?</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ionic.Platform.exitApp();</div></pre></td></tr></table></figure>
<hr>
<h4 id="在安卓设备上如何让title居中"><a href="#在安卓设备上如何让title居中" class="headerlink" title="在安卓设备上如何让title居中?"></a>在安卓设备上如何让title居中?</h4><p>在headerbar中添加<code>align-title=&quot;center&quot;</code>,如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;ion-header-bar class=&quot;bar-positive&quot; align-title=&quot;center&quot;&gt;</div><div class="line">	 &lt;h1 class=&quot;title&quot;&gt;&#123;&#123;username&#125;&#125;&lt;/h1&gt;</div><div class="line">&lt;/ion-header-bar&gt;</div></pre></td></tr></table></figure>
<p>不过这个设置对ion-view无效，亲测，如果要统一让所有navbar上的title居中(包括上面的headerbar)，可以在config里设置,如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.config(function($stateProvider, $urlRouterProvider,$ionicConfigProvider) &#123;</div><div class="line">  $ionicConfigProvider.navBar.alignTitle(&apos;center&apos;);</div><div class="line">  ...</div></pre></td></tr></table></figure>
<p>如果要让某一个view title居中，可以用<code>$ionicNavBarDelegate</code>，参考<a href="http://ionicframework.com/docs/api/service/%24ionicNavBarDelegate/" target="_blank" rel="external">ionic官方文档</a></p>
<hr>
<h4 id="如何让在sidemenu中的headerbar能够显示头像等其他信息"><a href="#如何让在sidemenu中的headerbar能够显示头像等其他信息" class="headerlink" title="如何让在sidemenu中的headerbar能够显示头像等其他信息?"></a>如何让在sidemenu中的headerbar能够显示头像等其他信息?</h4><p>解决方案是去掉headerbar,添加一个avatar到sidemenu content中，如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;ion-side-menu side=&quot;left&quot;&gt;</div><div class="line">	&lt;ion-content class=&quot;bar-positive&quot;&gt;</div><div class="line">		&lt;ion-list&gt;</div><div class="line">			&lt;ion-item class=&quot;item item-avatar item-positive&quot; href=&quot;#&quot;&gt;</div><div class="line">				&lt;img src=&quot;img/commander.jpg&quot;&gt;</div><div class="line">				&lt;h2 class=&quot; light&quot;&gt;</div><div class="line">					&lt;i class=&quot;icon ion-ios-star&quot;&gt;&lt;/i&gt;&#123;&#123;title&#125;&#125;</div><div class="line">				&lt;/h2&gt;</div><div class="line">				&lt;a&gt;&#123;&#123;username&#125;&#125;&lt;/a&gt;</div><div class="line">			&lt;/ion-item&gt;</div></pre></td></tr></table></figure></p>
<hr>
<h4 id="ionic的subheader挡住了内容区域怎么办"><a href="#ionic的subheader挡住了内容区域怎么办" class="headerlink" title="ionic的subheader挡住了内容区域怎么办?"></a>ionic的subheader挡住了内容区域怎么办?</h4><p>解决方案是给<code>&lt;ion-content&gt;</code>加类<code>has-subheader</code>,同理也可以加<code>has-header</code>。如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;ion-content class=&quot;has-header has-subheader&quot;&gt;</div></pre></td></tr></table></figure>
<hr>
<h4 id="对于需要添加数据的list，在添加数据后页面不能及时刷新造成卡顿怎么办"><a href="#对于需要添加数据的list，在添加数据后页面不能及时刷新造成卡顿怎么办" class="headerlink" title="对于需要添加数据的list，在添加数据后页面不能及时刷新造成卡顿怎么办?"></a>对于需要添加数据的list，在添加数据后页面不能及时刷新造成卡顿怎么办?</h4><p>可以使用<code>$ionicScrollDelegate.resize();</code>在添加数据后手动进行重新刷新,记得添加依赖</p>
<hr>
<h4 id="ionic如何处理回退按钮？例如询问用户是否真的要退出应用"><a href="#ionic如何处理回退按钮？例如询问用户是否真的要退出应用" class="headerlink" title="ionic如何处理回退按钮？例如询问用户是否真的要退出应用"></a>ionic如何处理回退按钮？例如询问用户是否真的要退出应用</h4><p>可以在app.js的.run方法中增加对硬件回退按钮的注册处理,这里我在大部分页面都想注册该事件，除去有二级历史页面的我单独判断了下，注意增加依赖。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$ionicPlatform.registerBackButtonAction(function(e) &#123;</div><div class="line">    var current_state_name = $state.current.name;</div><div class="line">    if(current_state_name !== &apos;sidemenu.post&apos;</div><div class="line">     &amp;&amp; current_state_name !== &apos;sidemenu.contact_town&apos; &amp;&amp;</div><div class="line">    current_state_name !== &apos;sidemenu.contact_people&apos;)&#123;</div><div class="line">        $ionicPopup.confirm(&#123;</div><div class="line">            title: &apos;退出应用&apos;,</div><div class="line">            template: &apos;您确定要退出xxxx吗?&apos;</div><div class="line">        &#125;).then(function (res) &#123;</div><div class="line">            if (res) &#123;</div><div class="line">                //ionic.Platform.exitApp();</div><div class="line">                navigator.app.exitApp();</div><div class="line">            &#125; else &#123;</div><div class="line">                console.log(&apos;You are not sure&apos;);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        e.preventDefault();</div><div class="line">        return false;</div><div class="line">    &#125;else&#123;</div><div class="line">        navigator.app.backHistory();</div><div class="line">    &#125;</div><div class="line">&#125;,100);</div></pre></td></tr></table></figure></p>
<hr>
<h4 id="ionic如何实现对每个请求都添加认证信息或认证失败自动重新登录"><a href="#ionic如何实现对每个请求都添加认证信息或认证失败自动重新登录" class="headerlink" title="ionic如何实现对每个请求都添加认证信息或认证失败自动重新登录?"></a>ionic如何实现对每个请求都添加认证信息或认证失败自动重新登录?</h4><p>在应用的注册或者登录部分，不记名<code>token</code>响应了这个请求并且这个<code>token</code>被存储到本地存储中。当你向后端请求一个服务时，你需要把这个<code>token</code>放在头部中。你可以在<code>app.js</code>的<code>.config</code>方法中使用<code>AngularJS</code>的拦截器实现这个。每次请求都会被拦截并且会把认证头部和值放到头部中,同理如果服务器端响应<code>401</code>或<code>403</code>，跳转到重新登录页面.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$httpProvider.interceptors.push(function ($q, $location, User, $rootScope) &#123;</div><div class="line">    return &#123;</div><div class="line">        &apos;request&apos;: function (config) &#123;</div><div class="line">            config.headers = config.headers || &#123;&#125;;</div><div class="line">            if (User.getToken()) &#123;</div><div class="line">                config.headers.Authorization = &apos;Bearer &apos; + User.getToken();</div><div class="line">            &#125;</div><div class="line">            return config;</div><div class="line">        &#125;,</div><div class="line">        &apos;responseError&apos;: function (response) &#123;</div><div class="line">            if (response.status === 401 || response.status === 403) &#123;</div><div class="line">                //如果之前登陆过</div><div class="line">                if (User.getToken()) &#123;</div><div class="line">                    $rootScope.$broadcast(&apos;unAuthenticed&apos;);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            return $q.reject(response);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<hr>
<h4 id="ionic如何实现搜索框内的全部清除按钮"><a href="#ionic如何实现搜索框内的全部清除按钮" class="headerlink" title="ionic如何实现搜索框内的全部清除按钮?"></a>ionic如何实现搜索框内的全部清除按钮?</h4><p>在label中的input不能嵌入按钮，因为ionic对于label中的tap事件会进行重定向到input上。解决方案是将label替换成span或div。如下面的搜索框，注意ng-model需要是一个对象才能置空,变量不行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;span class=&quot;item-input-wrapper&quot;&gt;</div><div class="line">     &lt;i class=&quot;icon ion-ios-search placeholder-icon&quot;&gt;&lt;/i&gt;</div><div class="line">     &lt;input type=&quot;search&quot; placeholder=&quot;请输入姓名前缀&quot; ng-model=&quot;search.key&quot;&gt;</div><div class="line">         &lt;i class=&quot;icon ion-close-circled placeholder-icon&quot; style=&quot;vertical-align: middle;&quot;</div><div class="line">            on-tap=&quot;clearSearch()&quot; ng-if=&quot;search.key.length&quot;&gt;&lt;/i&gt;</div><div class="line"> &lt;/span&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Ionic是目前较为流行的Hybird App解决方案,在Ionic开发过程中会遇到很多常见的开发问题，本文尝试对这些问题给出解决方案。&lt;/p&gt;
    
    </summary>
    
      <category term="ionic" scheme="http://www.mclspace.com/categories/ionic/"/>
    
    
      <category term="ionic" scheme="http://www.mclspace.com/tags/ionic/"/>
    
  </entry>
  
  <entry>
    <title>《恋恋风尘》 by 陈壁</title>
    <link href="http://www.mclspace.com/2015/12/28/llfc-by-chenbi/"/>
    <id>http://www.mclspace.com/2015/12/28/llfc-by-chenbi/</id>
    <published>2015-12-28T08:11:26.000Z</published>
    <updated>2015-12-28T08:25:22.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>人生不只眼前的苟且，还有音乐和远方。  –高晓松</p>
</blockquote>
<a id="more"></a>
<embed src="http://www.xiami.com/widget/95324254_1774062304/singlePlayer.swf" type="application/x-shockwave-flash" width="257" height="33" wmode="transparent">

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">恋恋风尘</div><div class="line">那天黄昏</div><div class="line">开始飘起了白雪</div><div class="line">忧伤开满山冈</div><div class="line">等青春散场</div><div class="line">午夜的电影</div><div class="line">写满古老的恋情</div><div class="line">在黑暗中为年轻歌唱</div><div class="line">走吧女孩</div><div class="line">去看红色的朝霞</div><div class="line">带上我的恋歌</div><div class="line">你迎风吟唱</div><div class="line">露水挂在发梢</div><div class="line">结满透明的惆怅</div><div class="line">是我一生最初的迷惘</div><div class="line">当岁月和美丽已成风尘中的叹息</div><div class="line">你感伤的眼里有旧时泪滴</div><div class="line">相信爱的年纪</div><div class="line">没能唱给你的歌曲</div><div class="line">让我一生常常追忆</div><div class="line">相信爱的年纪</div><div class="line">没能唱给你的歌曲</div><div class="line">让我一生常常追忆</div><div class="line">啦……</div></pre></td></tr></table></figure>
<!-- 
http://www.iqiyi.com/v_19rro04pmg.html?share_sTime=0-share_eTime=259-src=sharemodclk131212

<video id="video" controls="" preload="none" poster="http://media.w3.org/2010/05/sintel/poster.png">
      <source id="mp4" src="http://media.w3.org/2010/05/sintel/trailer.mp4" type="video/mp4">
      <source id="webm" src="http://media.w3.org/2010/05/sintel/trailer.webm" type="video/webm">
      <source id="ogv" src="http://media.w3.org/2010/05/sintel/trailer.ogv" type="video/ogg">
      <p>Your user agent does not support the HTML5 Video element.</p>
    </video> -->]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;人生不只眼前的苟且，还有音乐和远方。  –高晓松&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随感" scheme="http://www.mclspace.com/categories/%E9%9A%8F%E6%84%9F/"/>
    
    
      <category term="随感" scheme="http://www.mclspace.com/tags/%E9%9A%8F%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs微信公众平台服务器接入指南</title>
    <link href="http://www.mclspace.com/2015/12/11/nodejs-weixin-server/"/>
    <id>http://www.mclspace.com/2015/12/11/nodejs-weixin-server/</id>
    <published>2015-12-10T17:09:41.000Z</published>
    <updated>2015-12-11T06:44:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近申请了一个阿里云服务器,尝试着在上面用Nodejs搞个微信公众号机器人玩玩，申请了个人公众账号【技术栈】，你可以加关注然后尝试机器人的效果,虽然它现在还只会回“你来我家接我吧”,而且你看到的时候也不知道这服务器还在不在=。=.</p>
</blockquote>
<a id="more"></a>
<h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><p>首先在阿里云服务器上搭建Nodejs开发环境，参考<a href="http://mclspace.com/2015/12/09/aliyun-build-nodejs-environment/" target="_blank" rel="external">在阿里云上搭建Nodejs开发环境</a></p>
<h1 id="接入过程"><a href="#接入过程" class="headerlink" title="接入过程"></a>接入过程</h1><p>首先如果你没有<a href="https://mp.weixin.qq.com" target="_blank" rel="external">微信公众平台</a>账号，先去注册一个。</p>
<p>然后进入开发 -&gt; 基本配置,这里会显示你的应用ID和应用密钥,记下这里你的AppID。</p>
<p>在服务器配置一栏中有3个参数:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">URL是你的服务器的响应微信请求的地址</div><div class="line">Token是你和微信通信的凭证，可以任意设置(3-32字符),例如设置为123456</div><div class="line">EncodingAESKey 用于消息加密的密钥,我们点击后面的随机生成然后记下来就好。</div></pre></td></tr></table></figure></p>
<p>Ok,现在我们有3个参数:AppID,Token和EncodingAESKey，然后我们在本地新建Nodejs服务器。</p>
<p>我们使用Express-generator快捷地生成一个可用的服务器,nodemon用来启动服务器:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ express -e weixin_server</div><div class="line">$ cd weixin_server &amp;&amp; npm install</div><div class="line">$ npm install --save nodemon</div></pre></td></tr></table></figure></p>
<p>在weixin_server中新建文件Makefile和config.js,分别用来自动化构建服务器以及配置服务器:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ touch Makefile config.js</div></pre></td></tr></table></figure></p>
<p>建好的工程的目录如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── app.js</div><div class="line">├── bin</div><div class="line">├── config.js</div><div class="line">├── makefile</div><div class="line">├── node_modules</div><div class="line">├── package.json</div><div class="line">├── public</div><div class="line">├── routes</div><div class="line">└── views</div></pre></td></tr></table></figure></p>
<p>在config.js中写入刚刚我们获得的3个参数:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var config = &#123;</div><div class="line">    token: &apos;xxxxxxx&apos;,</div><div class="line">    appid: &apos;xxxxxxxxxxx&apos;,</div><div class="line">    encodingAESKey: &apos;xxxxxxxxxxxxxxxxxxxxxxxx&apos;</div><div class="line">&#125;;</div><div class="line">module.exports = config;</div></pre></td></tr></table></figure></p>
<p>在Makefile中写入运行命令,这里我们设置运行端口为80，目前微信只支持80:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">run :</div><div class="line">	@PORT=80 ./node_modules/.bin/nodemon ./bin/www</div><div class="line">.PHONY: run</div></pre></td></tr></table></figure></p>
<p>在routes文件夹中新建我们用来处理微信消息的路由wechat.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cd routes &amp;&amp; touch wechat.js</div></pre></td></tr></table></figure></p>
<p>在app.js中的routes和users变量下添加我们处理微信消息的路由wechat,并配置使用该路由<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var routes = require(&apos;./routes/index&apos;);</div><div class="line">var users = require(&apos;./routes/users&apos;);</div><div class="line">var wechat = require(&apos;./routes/wechat&apos;);</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">app.use(&apos;/&apos;, routes);</div><div class="line">app.use(&apos;/users&apos;, users);</div><div class="line">app.use(&apos;/wechat&apos;,wechat);</div></pre></td></tr></table></figure></p>
<p>下面我们安装wechat模块，这是卜灵大叔写的用于和微信服务器进行通信的Nodejs模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save wechat</div></pre></td></tr></table></figure></p>
<p>然后在我们的wechat.js中填入以下代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">var express = require(&apos;express&apos;);</div><div class="line">var router = express.Router();</div><div class="line"></div><div class="line">var wechat = require(&apos;wechat&apos;);</div><div class="line">var config = require(&apos;../config.js&apos;);</div><div class="line"></div><div class="line">router.use(&apos;/&apos;, wechat(config, function (req, res, next) &#123;</div><div class="line">    // 微信输入信息都在req.weixin上</div><div class="line">    var message = req.weixin;</div><div class="line">    if (message.FromUserName === &apos;diaosi&apos;) &#123;</div><div class="line">        // 回复屌丝(普通回复)</div><div class="line">        res.reply(&apos;hehe&apos;);</div><div class="line">    &#125; else if (message.FromUserName === &apos;text&apos;) &#123;</div><div class="line">        //你也可以这样回复text类型的信息</div><div class="line">        res.reply(&#123;</div><div class="line">            content: &apos;text object&apos;,</div><div class="line">            type: &apos;text&apos;</div><div class="line">        &#125;);</div><div class="line">    &#125; else if (message.FromUserName === &apos;hehe&apos;) &#123;</div><div class="line">        // 回复一段音乐</div><div class="line">        res.reply(&#123;</div><div class="line">            type: &quot;music&quot;,</div><div class="line">            content: &#123;</div><div class="line">                title: &quot;来段音乐吧&quot;,</div><div class="line">                description: &quot;一无所有&quot;,</div><div class="line">                musicUrl: &quot;http://mp3.com/xx.mp3&quot;,</div><div class="line">                hqMusicUrl: &quot;http://mp3.com/xx.mp3&quot;,</div><div class="line">                thumbMediaId: &quot;thisThumbMediaId&quot;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125; else &#123;</div><div class="line">        // 回复高富帅(图文回复)</div><div class="line">        res.reply([</div><div class="line">            &#123;</div><div class="line">                title: &apos;你来我家接我吧&apos;,</div><div class="line">                description: &apos;这是女神与高富帅之间的对话&apos;,</div><div class="line">                picurl: &apos;http://nodeapi.cloudfoundry.com/qrcode.jpg&apos;,</div><div class="line">                url: &apos;http://nodeapi.cloudfoundry.com/&apos;</div><div class="line">            &#125;</div><div class="line">        ]);</div><div class="line">    &#125;</div><div class="line">&#125;));</div><div class="line"></div><div class="line">module.exports = router;</div></pre></td></tr></table></figure></p>
<p>这是wechat模块给的示例代码，我们暂时先用着，下面我们部署服务器,首先将该服务器上传到github或者任何能够从远程部署代码的代码托管服务商上。以github为例新增.gitignore防止将node_modules和.DS_Store上传到服务器:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">node_modules</div><div class="line">example</div><div class="line">.DS_Store</div><div class="line">coverage</div></pre></td></tr></table></figure></p>
<p>然后在github新建工程上传，不赘述。</p>
<p>在阿里云上clone我们刚刚上传的工程, 然后用make命令运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git clone git@github.com:rdmclin2/weixin_server.git</div><div class="line">$ cd wexin_server &amp;&amp; npm install</div><div class="line">$ make run</div></pre></td></tr></table></figure></p>
<p>ok,我们继续到微信公众平台 -&gt; 开发 -&gt; 基本配置,填入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">URL : &lt;your ip&gt;/wechat</div><div class="line">Token : &lt;your token&gt;</div><div class="line">EncodingAESKey: &lt;your EncodingAESKey&gt;</div><div class="line">消息加解密方式 : 安全模式</div></pre></td></tr></table></figure></p>
<p>点击提交,完成接入。</p>
<h1 id="github"><a href="#github" class="headerlink" title="github"></a>github</h1><p>本篇示例代码已经上传到github<a href="https://github.com/rdmclin2/weixin_server" target="_blank" rel="external">weixin_server</a>，欢迎各种拍砖提issue。</p>
<h1 id="本地调试"><a href="#本地调试" class="headerlink" title="本地调试"></a>本地调试</h1><p>微信消息不能发到内网ip上，这给本地调试带来了很多困难，要在本地接受微信服务器的消息需要用拥有公网IP的主机转发来实现内网穿透。现在很多方案总的来说就是使用ngrok，不过这玩意不幸被墙，不过它是开源的，提供了1.0的源码。</p>
<p>一种方案就是自己在vps配置上配置ngrok,适合喜欢折腾的人,可以参考<a href="https://imququ.com/post/self-hosted-ngrokd.html" target="_blank" rel="external">搭建 ngrok 服务实现内网穿透</a></p>
<p>另一种方案就是别人在自己的vps上已经配置好了，用的时候它给你分配一个子域名给你使用。国内有<a href="http://natapp.cn" target="_blank" rel="external">natapp</a>,更接腾讯地气的是用QQ浏览器的微信本地调试插件详见<a href="http://blog.qqbrowser.cc/wei-xin-gong-zhong-hao-ben-di-diao-shi/" target="_blank" rel="external">http://blog.qqbrowser.cc/wei-xin-gong-zhong-hao-ben-di-diao-shi/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近申请了一个阿里云服务器,尝试着在上面用Nodejs搞个微信公众号机器人玩玩，申请了个人公众账号【技术栈】，你可以加关注然后尝试机器人的效果,虽然它现在还只会回“你来我家接我吧”,而且你看到的时候也不知道这服务器还在不在=。=.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="nodejs" scheme="http://www.mclspace.com/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://www.mclspace.com/tags/nodejs/"/>
    
      <category term="weixin" scheme="http://www.mclspace.com/tags/weixin/"/>
    
  </entry>
  
  <entry>
    <title>在阿里云上搭建Nodejs开发环境</title>
    <link href="http://www.mclspace.com/2015/12/09/nodejs-aliyun-build-environment/"/>
    <id>http://www.mclspace.com/2015/12/09/nodejs-aliyun-build-environment/</id>
    <published>2015-12-08T17:12:39.000Z</published>
    <updated>2015-12-09T03:25:22.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本机环境为ubuntu 14.04,搭建过程包括安装Nvm &amp; Nodejs，安装Mongodb，配置git以及导入工程并启动服务器。</p>
</blockquote>
<a id="more"></a>
<h1 id="安装Nvm-amp-Nodejs"><a href="#安装Nvm-amp-Nodejs" class="headerlink" title="安装Nvm &amp; Nodejs"></a>安装Nvm &amp; Nodejs</h1><p>首先更新阿里云的apt-get库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ apt-get update</div></pre></td></tr></table></figure></p>
<p>然后安装curl工具<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ apt-get insrall curl</div></pre></td></tr></table></figure></p>
<p>安装<a href="https://github.com/creationix/nvm" target="_blank" rel="external">nvm</a>包管理工具<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.29.0/install.sh | bash</div></pre></td></tr></table></figure></p>
<p>退出该终端重新进入让环境变量起作用,或者使用source命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ source .bashrc</div></pre></td></tr></table></figure></p>
<p>安装4.2(LTS)版本的Nodejs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nvm install 4.2</div></pre></td></tr></table></figure></p>
<p>使用4.2版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nvm use 4.2</div></pre></td></tr></table></figure></p>
<p>设置默认node版本为4.2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$nvm alias default 4.2</div></pre></td></tr></table></figure></p>
<p>安装nodejs的时候会自动将npm安装好，设置npm源为国内淘宝源,国外源太慢<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm config set registry https://registry.npm.taobao.org</div></pre></td></tr></table></figure></p>
<p>安装pm2，pm2可以监控我们的服务器在后台运行，并让我们的服务器在crash掉的时候重启。（非最佳方案，后续修改）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install pm2 -g</div></pre></td></tr></table></figure></p>
<p>到这里nodejs环境就搭好了。<br>附<a href="http://pm2.keymetrics.io" target="_blank" rel="external">pm2使用命令</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ pm2 start ./bin/www 启动</div><div class="line">$ pm2 monit 监控</div><div class="line">$ pm2 stop 关闭</div><div class="line">$ pm2 restart 重启</div><div class="line">$ pm2 delete 删除</div></pre></td></tr></table></figure></p>
<h1 id="安装Mongodb"><a href="#安装Mongodb" class="headerlink" title="安装Mongodb"></a><a href="https://docs.mongodb.org/manual/tutorial/install-mongodb-on-ubuntu/" target="_blank" rel="external">安装Mongodb</a></h1><p>导入mongodb公钥<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10</div></pre></td></tr></table></figure></p>
<p>生成mongodb列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &quot;deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.0 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.0.list</div></pre></td></tr></table></figure></p>
<p>更新包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div></pre></td></tr></table></figure></p>
<p>安装最新稳定版<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install -y mongodb-org</div></pre></td></tr></table></figure></p>
<p>安装完成.</p>
<p>附启动关闭命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo service mongod start</div><div class="line">$ sudo service mongod stop</div><div class="line">$ cat /var/log/mongodb/mongod.log</div><div class="line">$ sudo service mongod restart</div></pre></td></tr></table></figure></p>
<p>附卸载步骤<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo service mongod stop</div><div class="line">$ sudo apt-get purge mongodb-org*</div><div class="line">$ sudo rm -r /var/log/mongodb</div><div class="line">$ sudo rm -r /var/lib/mongodb</div></pre></td></tr></table></figure></p>
<p>#配置git<br>安装git<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ apt-get install git</div></pre></td></tr></table></figure></p>
<p>产生<code>.ssh</code>文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen</div></pre></td></tr></table></figure></p>
<p>将.ssh文件夹中的id_rsa.pub中的公钥放到你的github或gitlab的key列表中。</p>
<p>如果有gitlab配置文件参考以下步骤:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ vim config</div><div class="line"># 写入如下信息,具体情况而定</div><div class="line">host lab.artemisprojects.org</div><div class="line">hostname lab.artemisprojects.org</div><div class="line">port 2222</div></pre></td></tr></table></figure></p>
<h1 id="导入工程并启动服务器"><a href="#导入工程并启动服务器" class="headerlink" title="导入工程并启动服务器"></a>导入工程并启动服务器</h1><p>从github或gitlab中导入工程，并切换到server目录下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git clone xxxx@xxx.git</div><div class="line">$ cd server</div></pre></td></tr></table></figure></p>
<p>安装node_modules生产环境依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --production</div></pre></td></tr></table></figure></p>
<p>使用pm2启动服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pm2 start ./bin/www</div></pre></td></tr></table></figure></p>
<p>完成。</p>
<!--运行初始化脚本
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ node ./bin/init_users.js</div><div class="line">$ node ./bin/init_contacts.js</div></pre></td></tr></table></figure>
<p>–&gt;</p>
-->]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本机环境为ubuntu 14.04,搭建过程包括安装Nvm &amp;amp; Nodejs，安装Mongodb，配置git以及导入工程并启动服务器。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="nodejs" scheme="http://www.mclspace.com/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://www.mclspace.com/tags/nodejs/"/>
    
      <category term="vps" scheme="http://www.mclspace.com/tags/vps/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs中connect-flash的使用</title>
    <link href="http://www.mclspace.com/2015/12/03/nodejs-flash-note/"/>
    <id>http://www.mclspace.com/2015/12/03/nodejs-flash-note/</id>
    <published>2015-12-03T06:41:10.000Z</published>
    <updated>2016-01-16T15:55:16.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><code>connect-flash</code>是Nodejs的一个模块，简单来说，flash是一个暂存器，而且暂存器里面的值使用过一次即被清空，这样的特性很方面用来做网站的提示信息。</p>
</blockquote>
<a id="more"></a>
<h1 id="connect-flash简介"><a href="#connect-flash简介" class="headerlink" title="connect-flash简介"></a>connect-flash简介</h1><p><code>connect-flash</code>是Nodejs的一个模块，简单来说，flash是一个暂存器，而且暂存器里面的值使用过一次即被清空，这样的特性很方面用来做网站的提示信息。</p>
<blockquote>
<p>The flash is a special area of the session used for storing messages. Messages are written to the flash and cleared after being displayed to the user. The flash is typically used in combination with redirects, ensuring that the message is available to the next page that is to be rendered.</p>
<p>注意flash要配合session使用</p>
</blockquote>
<h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><p>首先安装<code>connect-flash</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save connect-flash</div></pre></td></tr></table></figure>
<p>然后在app.js中引入:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flash = require(&apos;connect-flash&apos;);</div></pre></td></tr></table></figure>
<p>在app中使用该中间件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.use(flash());</div></pre></td></tr></table></figure>
<p>将flash中存入的变量存入res.locals变量中,例如我要在网站中使用flash中存的error和success变量，就可以把它们存入到locals变量中，这样所有的模板都可以拿到这个变量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">app.use(function (req,res,next) &#123;</div><div class="line">    console.log(&quot;app.usr local&quot;);</div><div class="line">    res.locals.user = req.session.user;</div><div class="line"></div><div class="line">    var err = req.flash(&apos;error&apos;);</div><div class="line">    res.locals.error = err.length ? err: null;</div><div class="line"></div><div class="line">    var success = req.flash(&apos;success&apos;);</div><div class="line">    res.locals.success = success.length ? success : null;</div><div class="line"></div><div class="line">    next();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>应用程序本地变量会附加给所有的在这个应用程序内渲染的模板。 这是一个非常有用的模板函数，就像应用程序级数据一样。app.locals 对象是一个JavaScript Function, 执行的时候它会把属性合并到它自身，提供了一种简单展示已有对象作为本地变量的方法。</p>
</blockquote>
<p>然后在页面中加入根据success和error是否存在给用户相应的提示,例如这里我们在main标签下判断success和error，如果有值，给出相应的提示:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;main&gt;</div><div class="line">    &lt;% if (success) &#123; %&gt;</div><div class="line">    &lt;div class=&quot;alert alert-success&quot;&gt;</div><div class="line">        &lt;%= success %&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;% &#125; %&gt;</div><div class="line">    &lt;% if (error) &#123; %&gt;</div><div class="line">    &lt;div class=&quot;alert alert-error&quot;&gt;</div><div class="line">        &lt;%= error %&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure>
<p>在页面跳转之前给success和error赋值，就可以让它们获得相应的变量，显示给用户之后，这些变量会被清空。例如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">router.post(&apos;/login&apos;,function(req,res,next)&#123;</div><div class="line">    var name = req.body.username;</div><div class="line">    var password = req.body.password;</div><div class="line">    if(name === config.admin.username &amp;&amp; password === config.admin.password) &#123;</div><div class="line">        req.flash(&apos;success&apos;,&quot;登录成功!&quot;);</div><div class="line">        res.render(&apos;index&apos;, &#123;title: &quot;后台管理程序&quot;&#125;);</div><div class="line">    &#125;else&#123;</div><div class="line">        req.flash(&apos;error&apos;,&quot;用户名或密码错误&quot;);</div><div class="line">        res.redirect(&apos;/login&apos;);</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;connect-flash&lt;/code&gt;是Nodejs的一个模块，简单来说，flash是一个暂存器，而且暂存器里面的值使用过一次即被清空，这样的特性很方面用来做网站的提示信息。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="nodejs" scheme="http://www.mclspace.com/categories/nodejs/"/>
    
    
      <category term="express" scheme="http://www.mclspace.com/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs+Ionic+Mongodb+Docker技术综述</title>
    <link href="http://www.mclspace.com/2015/11/23/nodejs-ionic-mongodb-docker-summary/"/>
    <id>http://www.mclspace.com/2015/11/23/nodejs-ionic-mongodb-docker-summary/</id>
    <published>2015-11-23T06:26:10.000Z</published>
    <updated>2016-02-16T16:50:07.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本篇介绍以Nodejs和Mongodb为后端，以Ionic为前端，以Docker作为服务器容器为基础架构的混合App开发方式的技术综述。</p>
<p>我已经把项目文件整理起来放到<a href="https://github.com/rdmclin2/fcws" target="_blank" rel="external">github</a>上了，供大家参考。</p>
</blockquote>
<a id="more"></a>
<h1 id="HTML-amp-amp-CSS-amp-amp-JS简介"><a href="#HTML-amp-amp-CSS-amp-amp-JS简介" class="headerlink" title="HTML &amp;&amp; CSS &amp;&amp; JS简介"></a>HTML &amp;&amp; CSS &amp;&amp; JS简介</h1><p>HTML的全称是Hyper Text Markup Language，中文名为超文本标记语言，它通过标记符号来标记页面中要显示的各个部分，HTML组成了页面的框架。</p>
<p>CSS的全称是Cascading Style Sheets，中文名为层叠样式表，它是一种用来表现HTML文件样式的计算机语言，是能够真正做到网页表现与内容分离的一种样式设计语言。</p>
<p>JS是Javascript的简称，JavaScript是一种属于网络的脚本语言,已经被广泛用于Web应用开发,常用来为网页添加各式各样的动态功能,为用户提供更流畅美观的浏览效果。通常JavaScript脚本是通过嵌入在HTML中来实现自身的功能的。</p>
<blockquote>
<p>百度百科 <a href="http://baike.baidu.com/view/16168.htm?fromtitle=JS&amp;fromid=10687961&amp;type=syn" target="_blank" rel="external">http://baike.baidu.com/view/16168.htm?fromtitle=JS&amp;fromid=10687961&amp;type=syn</a></p>
</blockquote>
<p><img src="http://7pun7p.com1.z0.glb.clouddn.com/blog/html5-css3-js.jpg" alt=""></p>
<h1 id="AngularJS技术简介"><a href="#AngularJS技术简介" class="headerlink" title="AngularJS技术简介"></a>AngularJS技术简介</h1><p>Ionic框架依赖 AngularJS和Cordova而实现，因此我们先介绍这两个框架再来介绍Ionic。AngularJS是Google开发的纯客户端JavaScript技术的WEB框架,用于扩展、增强HTML功能,它专为构建强大的WEB应用。AngularJS试图成为WEB应用中的一种端对端的解决方案。这意味着它不只是你的WEB应用中的一个小部分，还是一个完整的端对端的解决方案。这会让AngularJS在构建一个CRUD（增加Create、查询Retrieve、更新Update、删除Delete）的应用时显得很“固执”（原文为 opinionated,意指没有太多的其他方式）。但是，尽管它很“固执”，它仍然能确保它的“固执”只是在你构建应用的起点，并且你仍能灵活变动。</p>
<p>AngularJS通过为开发者呈现一个更高层次的抽象来简化应用的开发。如同其他的抽象技术一样，这也会损失一部分灵活性。换句话说，并不是所有的应用都适合用AngularJS来做。AngularJS主要考虑的是构建CRUD应用。幸运的是，至少90%的WEB应用都是CRUD应用。但是要了解什么适合用AngularJS构建，就得了解什么不适合用AngularJS构建。<br>如游戏，图形界面编辑器，这种DOM操作很频繁也很复杂的应用，和CRUD应用就有很大的不同，它们不适合用AngularJS来构建。像这种情况用一些更轻量、简单的技术如jQuery可能会更好。</p>
<blockquote>
<p>百度百科 <a href="http://baike.baidu.com/item/AngularJS" target="_blank" rel="external">http://baike.baidu.com/item/AngularJS</a></p>
</blockquote>
<p><img src="http://7pun7p.com1.z0.glb.clouddn.com/blog/angularjs_logo.png" alt=""></p>
<h1 id="Cordova技术简介"><a href="#Cordova技术简介" class="headerlink" title="Cordova技术简介"></a>Cordova技术简介</h1><p>Cordova是Apahe基金会旗下的一个开源项目，其在官网上的简介为:Apache Cordova is a platform for building native mobile applications using HTML, CSS and JavaScript，中文解释就是Apache Cordoava 是一个使用HMTL,CSS和Javascript来构建本地移动应用的平台。</p>
<p>它是一个Adobe的开源的混合型(Hydrid)移动应用开发框架，它的前身是PhoneGap开源框架，现在这两个品牌都在使用，不过基本上除了名字以外，其它都相同。Cordova为HTML 5代码提供了对本地资源的访问能力，能够充分发挥HTML 5的跨平台能力和本地代码在性能以及资源访问上的优势。到目前为止，Cordova已经支持了所有的主流移动平台，可以减少企业在移动应用开发上的成本和时间。</p>
<blockquote>
<p>Cordova开发第一课 环境准备 <a href="http://io.diveinedu.com/2015/01/09/Cordova开发第一课-环境准备.html" target="_blank" rel="external">http://io.diveinedu.com/2015/01/09/Cordova开发第一课-环境准备.html</a></p>
</blockquote>
<p>Cordova为应用开发者提供了一组可以调用本地设备功能的API，这些API用JS编写，让你能方便地调用摄像头，加速器等功能。和一些常见的前端框架如JQuery等等配合使用能够允许一个应用只使用HTML,CSS和Javascript进行构建。使用Cordova你不需要再编写任何本地代码如Java或Objective-C等等，只需要web技术就可以，这些代码由应用自身本地加载并显示。</p>
<p><img src="http://7pun7p.com1.z0.glb.clouddn.com/blog/cordova_logo.png" alt=""></p>
<h1 id="Ionic技术简述"><a href="#Ionic技术简述" class="headerlink" title="Ionic技术简述"></a>Ionic技术简述</h1><p>Ionic官网上的简介是”Ionic is the beautiful, open source front-end SDK for developing hybird mobile apps with web technologies”,翻译过来就是”Ionic是一个用web技术开发混合移动应用的漂亮的开源前端SDK”。作为一款前端SDK,Ionic向我们提供了一系列的HTML,CSS,JS组件，手势和工具来构架具有复杂交互的app，Ionic主要关注于应用的外观和交互，它设计的初衷并不是为了取代PhoneGap这类JS框架，而是简化我们编写App时的一个大的方面即前端。</p>
<p>那么已经存在Cordova,PhoneGap此类开源引擎的情况下，Ionic为什么而存在呢？在前端方面有一个传奇的前端代码库Bootstrap，Bootstrap是twitter推出的一款界面框架，从github上高达8万的star数量就可以知道这个库有多么的流行。在前端仍是莽荒一片的时代程序员编写代码必须从头开始，编写晦涩的代码以满足不同浏览器的癖好，直到前端代码库的出现才让程序员解放生产力，像Bootstrap这种代码库并不是让程序员可以不写代码就编写项目，而是他提供给开发者一个更高的起点来写出高质量的项目，直接的好处就是这种库通常设计精良，经过严格测试，并支持跨浏览器的一致体验。Ionic库也有着类似的目标，通过共享库的方式向开发者推荐合适的设计模式并将良好的实践文档化，让我们在开发混合App的时候能够专注于应用的架构。</p>
<p><img src="http://7pun7p.com1.z0.glb.clouddn.com/blog/ionic_logo.png" alt=""></p>
<h2 id="CS样式"><a href="#CS样式" class="headerlink" title="CS样式"></a>CS样式</h2><p>Ionic我们提供了丰富的CSS样式和Javascript功能，首先是CSS,如下图所示，图一中1为Ionic的CSS样式列表，提供了如按钮，列表，卡片，选择等基本的页面部件，开发者通过图中2中的HTML代码就能够方便的将部件集成到页面中来，如图中3所示为各种样式的按钮。</p>
<p><img src="http://7pun7p.com1.z0.glb.clouddn.com/blog/ionic_css.png" alt=""></p>
<h2 id="JS功能部件"><a href="#JS功能部件" class="headerlink" title="JS功能部件"></a>JS功能部件</h2><p>JS功能部件能够提供各种动态效果以及交互功能，图二中1为Ionic为我们提供的JS功能列表，提供了例如导航，弹出菜单，滑动窗口等基本页面交互功能，通过使用图2中的JS代码能够很方便的使用这些功能，让我们的APP能够与用户进行交互，图中3所示为弹出窗口的效果。</p>
<p><img src="http://7pun7p.com1.z0.glb.clouddn.com/blog/ionic_js.png" alt=""></p>
<h1 id="Nodejs技术简述"><a href="#Nodejs技术简述" class="headerlink" title="Nodejs技术简述"></a>Nodejs技术简述</h1><p>Nodejs是一个基于Chrome V8引擎的js运行时环境，它采用基于事件的非阻塞I/O模型，V8是Google创造出来的高性能JS引擎，得益于V8的高性能，Nodejs能够既轻量级又具备高性能。Nodejs很适合用来搭建高性能的web服务器,而且因为Node内置了服务器，我们不需要像PHP或Django一样用Ngnix之类的代理服务器，例如使用下面的代码就可以简单地创建一个Nodejs服务器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var http = require(&apos;http&apos;);</div><div class="line"></div><div class="line">http.createServer(function (req, res) &#123;</div><div class="line">  res.writeHead(200, &#123;&apos;Content-Type&apos;: &apos;text/plain&apos;&#125;);</div><div class="line">  res.end(&apos;Hello World\n&apos;);</div><div class="line">&#125;).listen(1337, &quot;127.0.0.1&quot;);</div><div class="line"></div><div class="line">console.log(&apos;Server running at http://127.0.0.1:1337/&apos;);</div></pre></td></tr></table></figure>
<p>这段代码使用Nodejs内置的http模块，监听本地1337端口，并将所有访问该地址的请求返回一个Hello World的回应。</p>
<p><img src="http://7pun7p.com1.z0.glb.clouddn.com/blog/nodejs_logo.png" alt=""></p>
<p>Node.js是一个为实时Web（Real-time Web)应用开发而诞生的平台，它从诞生之初就充分考虑了在实时响应,超大规模数据要求下架构的可扩展性。这使得它摈弃了传统平台依靠多线程来实现高并发的设计思路，而采用了单线程，异步式I/O,事件驱动的程序设计模型，这些特性不仅带来了巨大的性能提升，还减少了多线程程序设计的复杂性，进而提高了开发效率。Nodejs是一个让Javascript运行在浏览器之外的平台。它实现了诸如文件系统，模块，包，操作系统API，网络通信等Core JavaScript没有或者不完善的功能。Node.js的Javascript引擎是V8,来自Google Chrome项目。V8号称是目前世界上最快的Javascript引擎，经历了数次引擎革命，它的JIT(Just-in-time Compilation,即时编译)的执行速度已经快到了接近本地代码的执行速度。Node.js不运行在浏览器中，所以也就不存在JavaScript的浏览器兼容性问题，可以放心地使用JavaScript语言的所有特性。</p>
<blockquote>
<p>NodeJS开发指南</p>
</blockquote>
<h2 id="mongojs-模块"><a href="#mongojs-模块" class="headerlink" title="mongojs 模块"></a>mongojs 模块</h2><p>Mongojs是一个小巧的Node.js模块，它的功能就是用来连接Mongodb数据库，并提供Mongodb操作的封装，让我们在Node下面能够对数据库进行操作，Mongojs很容易使用，例如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var mongojs = require(&apos;mongojs&apos;)</div><div class="line">var db = mongojs(connectionString, [collections])</div></pre></td></tr></table></figure>
<p>上面的代码的功能是引入mongojs模块，并根据连接信息打开数据库，并返回具有特定集合的db接口，有了db这个对象，我们就能对数据库进行各种增删改查的操作。例如查找所有性别为female的用户:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// app.js</div><div class="line">db.users.find(&#123;sex: &quot;female&quot;&#125;, function(err, users) &#123;</div><div class="line">  if( err || !users) console.log(&quot;No female users found&quot;);</div><div class="line">  else users.forEach( function(femaleUser) &#123;</div><div class="line">    console.log(femaleUser);</div><div class="line">  &#125; );</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="restify-模块"><a href="#restify-模块" class="headerlink" title="restify 模块"></a>restify 模块</h2><p>要介绍Restify模块，首先得理解REST风格的开发方式，REST(Representational State Transfer 表述性状态转移)是一种针对网络应用的设计和开发方式，可以降低开发的复杂性，提高系统的可伸缩性。REST 指的是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是 RESTful。Web 应用程序最重要的 REST 原则是，客户端和服务器之间的交互在请求之间是无状态的。从客户端到服务器的每个请求都必须包含理解请求所必需的信息。</p>
<p>在服务器端，应用程序状态和功能可以分为各种资源。资源是一个有趣的概念实体，它向客户端公开。资源的例子有：应用程序对象、数据库记录、算法等等。每个资源都使用 URI (Universal Resource Identifier) 得到一个惟一的地址。所有资源都共享统一的界面，以便在客户端和服务器之间传输状态。使用的是标准的 HTTP 方法，比如 GET、PUT、POST 和 DELETE。</p>
<p>非常简单适用的解释:</p>
<ul>
<li>REST是一套用来创建Web Service的方法。</li>
<li>REST式的Web Service的主旨是让事情尽量的简单化。</li>
<li>REST式的Web Service使用HTTP里的方法：GET， POST， DELETE， PUT。你不需要使用URL或请求的内容来指定这个方法。</li>
<li>REST式的Web Service使用URL来指明你将要操作什么对象。</li>
<li>REST式的Web Service使用HTTP状态码作为返回值。</li>
<li>REST式的Web Service调用产生的HTTP请求内容只是用于服务数据——不是用来指明调用方法，目标对象或返回值的。</li>
</ul>
<p>restify模块使得在Node.js中写正确的REST API变得容易了很多，而且它还提供了即装即用的支持，如版本控制、错误处理、CORS和内容协商。</p>
<h2 id="eventproxy-模块"><a href="#eventproxy-模块" class="headerlink" title="eventproxy 模块"></a>eventproxy 模块</h2><p>在Nodejs中由于其异步调用的特点，往往会编写很长的深度嵌套的代码，不仅可读性差，维护困难，而且因为无法利用并行特性导致代码效率低下。<br>EventProxy是一个很轻量的工具，但是能够带来一种事件式编程的思维变化。有几个特点：</p>
<ul>
<li>利用事件机制解耦复杂业务逻辑</li>
<li>移除被广为诟病的深度callback嵌套问题</li>
<li>将串行等待变成并行等待，提升多异步协作场景下的执行效率</li>
<li>友好的Error handling</li>
<li>无平台依赖，适合前后端，能用于浏览器和Node.js</li>
<li>兼容CMD，AMD以及CommonJS模块环境<blockquote>
<p><a href="https://www.npmjs.com/package/eventproxy" target="_blank" rel="external">https://www.npmjs.com/package/eventproxy</a></p>
</blockquote>
</li>
</ul>
<p>在本系统的实现过程中我们使用该模块来利用事件机制对复杂的业务逻辑进行解耦。</p>
<h1 id="Mongodb数据库简述"><a href="#Mongodb数据库简述" class="headerlink" title="Mongodb数据库简述"></a>Mongodb数据库简述</h1><p>Mongo是一个高性能，开源，无模式的文档型数据库，它在许多场景下可用于替代传统的关系型数据库或键/值存储方式，旨在为WEB应用提供可护展的高性能数据存储解决方案，它是很多Nodejs应用的好伴侣.</p>
<p>MongoDB由‘数据库’组成，数据库由‘集合’组成，集合由‘文档’组成。‘域’组成了文档，集合可以被‘索引’，从而提高了查找和排序的性能。<br>最后，我们从MongoDB读取数据的时候是通过‘游标’进行的，除非需要，游标不会真正去作读的操作。</p>
<p>虽然这些概念和那些关系数据库中的相应概念很相似，但是还是存在差异的。关键的差异在于关系数据库是在‘表’这一层次定义‘列’的，而一个面向文档的数据库则是在‘文档’这一层次定义‘域’的。也就是说，集合中的每个文档都可以有独立的域。<br>因此，虽说集合相对于表来说是一个简化了的容器，而文档则包含了比行要多得多的信息。</p>
<p><img src="http://7pun7p.com1.z0.glb.clouddn.com/blog/mongo_logo.png" alt=""></p>
<h1 id="Docker容器技术"><a href="#Docker容器技术" class="headerlink" title="Docker容器技术"></a>Docker容器技术</h1><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）。几乎没有性能开销,可以很容易地在机器和数据中心中运行。最重要的是,他们不依赖于任何语言、框架包括系统。</p>
<blockquote>
<p>百度百科 <a href="http://baike.baidu.com/link?url=ScLumbWwrxxcWth3ZEbYHJFDSQF5d_OXfGjkT45OKooynZUcmlcBNfnV4SiUKpBe6eXVHmpwdUrhBh1FqJmSDa" target="_blank" rel="external">http://baike.baidu.com/link?url=ScLumbWwrxxcWth3ZEbYHJFDSQF5d_OXfGjkT45OKooynZUcmlcBNfnV4SiUKpBe6eXVHmpwdUrhBh1FqJmSDa</a></p>
</blockquote>
<p><img src="http://7pun7p.com1.z0.glb.clouddn.com/blog/docker_logo.png" alt=""></p>
<p>利用docker我们可以:</p>
<ul>
<li>自动打包和部署应用</li>
<li>创建轻量、私有的PaaS环境</li>
<li>自动化测试和持续集成/部署</li>
<li>部署并扩展Web应用、数据库和后端服务器</li>
</ul>
<p>利用Docker可以将我们的nodejs服务器部署到远程的VPS服务器上去。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本篇介绍以Nodejs和Mongodb为后端，以Ionic为前端，以Docker作为服务器容器为基础架构的混合App开发方式的技术综述。&lt;/p&gt;
&lt;p&gt;我已经把项目文件整理起来放到&lt;a href=&quot;https://github.com/rdmclin2/fcws&quot;&gt;github&lt;/a&gt;上了，供大家参考。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="ionic" scheme="http://www.mclspace.com/categories/ionic/"/>
    
    
      <category term="ionic" scheme="http://www.mclspace.com/tags/ionic/"/>
    
      <category term="nodejs" scheme="http://www.mclspace.com/tags/nodejs/"/>
    
      <category term="mongodb" scheme="http://www.mclspace.com/tags/mongodb/"/>
    
  </entry>
  
</feed>
